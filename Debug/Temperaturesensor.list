
Temperaturesensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08006f58  08006f58  00016f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007418  08007418  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007418  08007418  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001e0  08007600  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007600  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001162f  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fcc  00000000  00000000  0003187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000077da  00000000  00000000  00034847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b28  00000000  00000000  0003c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b6d  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000191a8  00000000  00000000  0003d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012fb9  00000000  00000000  00056865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00089b0e  00000000  00000000  0006981e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003500  00000000  00000000  000f332c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000f682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f40 	.word	0x08006f40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006f40 	.word	0x08006f40

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
 8000b4c:	2200      	movs	r2, #0
{
 8000b4e:	b510      	push	{r4, lr}
 8000b50:	4604      	mov	r4, r0
    unsigned int h = 0;
 8000b52:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000b54:	5ca1      	ldrb	r1, [r4, r2]
 8000b56:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	d80b      	bhi.n	8000b76 <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
 8000b5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 8000b62:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
 8000b64:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
 8000b68:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8000b6c:	bf18      	it	ne
 8000b6e:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
 8000b70:	2a04      	cmp	r2, #4
 8000b72:	d1ef      	bne.n	8000b54 <parse_hex4+0x8>
        }
    }

    return h;
}
 8000b74:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000b76:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8000b7a:	2b05      	cmp	r3, #5
 8000b7c:	d802      	bhi.n	8000b84 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
 8000b7e:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
 8000b82:	e7ee      	b.n	8000b62 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8000b84:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8000b88:	2b05      	cmp	r3, #5
 8000b8a:	d802      	bhi.n	8000b92 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
 8000b8c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
 8000b90:	e7e7      	b.n	8000b62 <parse_hex4+0x16>
            return 0;
 8000b92:	2000      	movs	r0, #0
 8000b94:	e7ee      	b.n	8000b74 <parse_hex4+0x28>
	...

08000b98 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8000b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000b9c:	680a      	ldr	r2, [r1, #0]
 8000b9e:	688b      	ldr	r3, [r1, #8]
{
 8000ba0:	4606      	mov	r6, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000ba2:	1c5c      	adds	r4, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8000ba4:	18d0      	adds	r0, r2, r3
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
{
 8000ba8:	4689      	mov	r9, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8000baa:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000bac:	4414      	add	r4, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8000bae:	f040 80ed 	bne.w	8000d8c <parse_string+0x1f4>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000bb2:	46a0      	mov	r8, r4
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
 8000bb4:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8000bb6:	684d      	ldr	r5, [r1, #4]
 8000bb8:	eba8 0102 	sub.w	r1, r8, r2
 8000bbc:	42a9      	cmp	r1, r5
 8000bbe:	f080 80e5 	bcs.w	8000d8c <parse_string+0x1f4>
 8000bc2:	f898 1000 	ldrb.w	r1, [r8]
 8000bc6:	2922      	cmp	r1, #34	; 0x22
 8000bc8:	d10e      	bne.n	8000be8 <parse_string+0x50>
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8000bca:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8000bce:	eba8 0000 	sub.w	r0, r8, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8000bd2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8000bd6:	4418      	add	r0, r3
 8000bd8:	4790      	blx	r2
        if (output == NULL)
 8000bda:	4682      	mov	sl, r0
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	f000 80d5 	beq.w	8000d8c <parse_string+0x1f4>
 8000be2:	4605      	mov	r5, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8000be4:	4f6c      	ldr	r7, [pc, #432]	; (8000d98 <parse_string+0x200>)
 8000be6:	e012      	b.n	8000c0e <parse_string+0x76>
            if (input_end[0] == '\\')
 8000be8:	295c      	cmp	r1, #92	; 0x5c
 8000bea:	d107      	bne.n	8000bfc <parse_string+0x64>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8000bec:	f108 0801 	add.w	r8, r8, #1
 8000bf0:	eba8 0102 	sub.w	r1, r8, r2
 8000bf4:	428d      	cmp	r5, r1
 8000bf6:	f240 80c9 	bls.w	8000d8c <parse_string+0x1f4>
                skipped_bytes++;
 8000bfa:	3301      	adds	r3, #1
            input_end++;
 8000bfc:	f108 0801 	add.w	r8, r8, #1
 8000c00:	e7da      	b.n	8000bb8 <parse_string+0x20>

    output_pointer = output;
    /* loop through the string literal */
    while (input_pointer < input_end)
    {
        if (*input_pointer != '\\')
 8000c02:	7823      	ldrb	r3, [r4, #0]
 8000c04:	2b5c      	cmp	r3, #92	; 0x5c
 8000c06:	d013      	beq.n	8000c30 <parse_string+0x98>
        {
            *output_pointer++ = *input_pointer++;
 8000c08:	3401      	adds	r4, #1
 8000c0a:	f805 3b01 	strb.w	r3, [r5], #1
    while (input_pointer < input_end)
 8000c0e:	4544      	cmp	r4, r8
 8000c10:	d3f7      	bcc.n	8000c02 <parse_string+0x6a>
            input_pointer += sequence_length;
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8000c12:	2300      	movs	r3, #0
 8000c14:	702b      	strb	r3, [r5, #0]

    item->type = cJSON_String;
 8000c16:	2310      	movs	r3, #16
    item->valuestring = (char*)output;

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
    input_buffer->offset++;

    return true;
 8000c18:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
 8000c1a:	e9c6 3a03 	strd	r3, sl, [r6, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8000c1e:	f8d9 3000 	ldr.w	r3, [r9]
 8000c22:	eba8 0303 	sub.w	r3, r8, r3
    input_buffer->offset++;
 8000c26:	3301      	adds	r3, #1
 8000c28:	f8c9 3008 	str.w	r3, [r9, #8]
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
}
 8000c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
 8000c30:	eba8 0204 	sub.w	r2, r8, r4
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	dd0d      	ble.n	8000c54 <parse_string+0xbc>
            switch (input_pointer[1])
 8000c38:	7863      	ldrb	r3, [r4, #1]
 8000c3a:	2b75      	cmp	r3, #117	; 0x75
 8000c3c:	d80a      	bhi.n	8000c54 <parse_string+0xbc>
 8000c3e:	2b6d      	cmp	r3, #109	; 0x6d
 8000c40:	d812      	bhi.n	8000c68 <parse_string+0xd0>
 8000c42:	2b62      	cmp	r3, #98	; 0x62
 8000c44:	d02b      	beq.n	8000c9e <parse_string+0x106>
 8000c46:	d825      	bhi.n	8000c94 <parse_string+0xfc>
 8000c48:	2b2f      	cmp	r3, #47	; 0x2f
 8000c4a:	d038      	beq.n	8000cbe <parse_string+0x126>
 8000c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8000c4e:	d036      	beq.n	8000cbe <parse_string+0x126>
 8000c50:	2b22      	cmp	r3, #34	; 0x22
 8000c52:	d034      	beq.n	8000cbe <parse_string+0x126>
        input_buffer->hooks.deallocate(output);
 8000c54:	4650      	mov	r0, sl
 8000c56:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8000c5a:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8000c5c:	f8d9 3000 	ldr.w	r3, [r9]
 8000c60:	1ae3      	subs	r3, r4, r3
 8000c62:	f8c9 3008 	str.w	r3, [r9, #8]
 8000c66:	e094      	b.n	8000d92 <parse_string+0x1fa>
            switch (input_pointer[1])
 8000c68:	3b6e      	subs	r3, #110	; 0x6e
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d8f2      	bhi.n	8000c54 <parse_string+0xbc>
 8000c6e:	a101      	add	r1, pc, #4	; (adr r1, 8000c74 <parse_string+0xdc>)
 8000c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000c55 	.word	0x08000c55
 8000c7c:	08000c55 	.word	0x08000c55
 8000c80:	08000c55 	.word	0x08000c55
 8000c84:	08000cb3 	.word	0x08000cb3
 8000c88:	08000c55 	.word	0x08000c55
 8000c8c:	08000cb9 	.word	0x08000cb9
 8000c90:	08000cc3 	.word	0x08000cc3
 8000c94:	2b66      	cmp	r3, #102	; 0x66
 8000c96:	d1dd      	bne.n	8000c54 <parse_string+0xbc>
                    break;
 8000c98:	230c      	movs	r3, #12
                    *output_pointer++ = '\f';
 8000c9a:	1c6a      	adds	r2, r5, #1
                    break;
 8000c9c:	e001      	b.n	8000ca2 <parse_string+0x10a>
                    break;
 8000c9e:	2308      	movs	r3, #8
                    *output_pointer++ = '\b';
 8000ca0:	1c6a      	adds	r2, r5, #1
            unsigned char sequence_length = 2;
 8000ca2:	2102      	movs	r1, #2
                    *output_pointer++ = '\b';
 8000ca4:	702b      	strb	r3, [r5, #0]
            input_pointer += sequence_length;
 8000ca6:	440c      	add	r4, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	e7b0      	b.n	8000c0e <parse_string+0x76>
                    break;
 8000cac:	230a      	movs	r3, #10
                    *output_pointer++ = '\n';
 8000cae:	1c6a      	adds	r2, r5, #1
                    break;
 8000cb0:	e7f7      	b.n	8000ca2 <parse_string+0x10a>
                    break;
 8000cb2:	230d      	movs	r3, #13
                    *output_pointer++ = '\r';
 8000cb4:	1c6a      	adds	r2, r5, #1
                    break;
 8000cb6:	e7f4      	b.n	8000ca2 <parse_string+0x10a>
                    break;
 8000cb8:	2309      	movs	r3, #9
                    *output_pointer++ = '\t';
 8000cba:	1c6a      	adds	r2, r5, #1
                    break;
 8000cbc:	e7f1      	b.n	8000ca2 <parse_string+0x10a>
                    *output_pointer++ = input_pointer[1];
 8000cbe:	1c6a      	adds	r2, r5, #1
                    break;
 8000cc0:	e7ef      	b.n	8000ca2 <parse_string+0x10a>
    if ((input_end - first_sequence) < 6)
 8000cc2:	2a05      	cmp	r2, #5
 8000cc4:	ddc6      	ble.n	8000c54 <parse_string+0xbc>
    first_code = parse_hex4(first_sequence + 2);
 8000cc6:	1ca0      	adds	r0, r4, #2
 8000cc8:	f7ff ff40 	bl	8000b4c <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8000ccc:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 8000cd4:	4683      	mov	fp, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8000cd6:	d3bd      	bcc.n	8000c54 <parse_string+0xbc>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8000cd8:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8000cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce0:	d22e      	bcs.n	8000d40 <parse_string+0x1a8>
        const unsigned char *second_sequence = first_sequence + 6;
 8000ce2:	1da3      	adds	r3, r4, #6
        if ((input_end - second_sequence) < 6)
 8000ce4:	eba8 0303 	sub.w	r3, r8, r3
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	ddb3      	ble.n	8000c54 <parse_string+0xbc>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8000cec:	79a3      	ldrb	r3, [r4, #6]
 8000cee:	2b5c      	cmp	r3, #92	; 0x5c
 8000cf0:	d1b0      	bne.n	8000c54 <parse_string+0xbc>
 8000cf2:	79e3      	ldrb	r3, [r4, #7]
 8000cf4:	2b75      	cmp	r3, #117	; 0x75
 8000cf6:	d1ad      	bne.n	8000c54 <parse_string+0xbc>
        second_code = parse_hex4(second_sequence + 2);
 8000cf8:	f104 0008 	add.w	r0, r4, #8
 8000cfc:	f7ff ff26 	bl	8000b4c <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8000d00:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8000d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d08:	d2a4      	bcs.n	8000c54 <parse_string+0xbc>
        sequence_length = 12; /* \uXXXX\uXXXX */
 8000d0a:	210c      	movs	r1, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8000d0c:	ea07 2b8b 	and.w	fp, r7, fp, lsl #10
 8000d10:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8000d14:	ea4b 0b00 	orr.w	fp, fp, r0
 8000d18:	f50b 3b80 	add.w	fp, fp, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
 8000d1c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 8000d20:	2204      	movs	r2, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000d22:	1e50      	subs	r0, r2, #1
 8000d24:	b2c0      	uxtb	r0, r0
 8000d26:	4428      	add	r0, r5
 8000d28:	42a8      	cmp	r0, r5
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000d2a:	fa5f f38b 	uxtb.w	r3, fp
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000d2e:	d124      	bne.n	8000d7a <parse_string+0x1e2>
    if (utf8_length > 1)
 8000d30:	2a01      	cmp	r2, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8000d32:	bf14      	ite	ne
 8000d34:	ea4c 0303 	orrne.w	r3, ip, r3
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8000d38:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    *output_pointer += utf8_length;
 8000d3c:	442a      	add	r2, r5
                    if (sequence_length == 0)
 8000d3e:	e7b1      	b.n	8000ca4 <parse_string+0x10c>
    if (codepoint < 0x80)
 8000d40:	287f      	cmp	r0, #127	; 0x7f
 8000d42:	d90b      	bls.n	8000d5c <parse_string+0x1c4>
    else if (codepoint < 0x800)
 8000d44:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000d48:	d30d      	bcc.n	8000d66 <parse_string+0x1ce>
    else if (codepoint < 0x10000)
 8000d4a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000d4e:	d30f      	bcc.n	8000d70 <parse_string+0x1d8>
    else if (codepoint <= 0x10FFFF)
 8000d50:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8000d54:	f4bf af7e 	bcs.w	8000c54 <parse_string+0xbc>
        sequence_length = 6; /* \uXXXX */
 8000d58:	2106      	movs	r1, #6
 8000d5a:	e7df      	b.n	8000d1c <parse_string+0x184>
 8000d5c:	2106      	movs	r1, #6
    unsigned char first_byte_mark = 0;
 8000d5e:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 8000d62:	2201      	movs	r2, #1
 8000d64:	e7dd      	b.n	8000d22 <parse_string+0x18a>
        sequence_length = 6; /* \uXXXX */
 8000d66:	2106      	movs	r1, #6
        first_byte_mark = 0xC0; /* 11000000 */
 8000d68:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	e7d8      	b.n	8000d22 <parse_string+0x18a>
        sequence_length = 6; /* \uXXXX */
 8000d70:	2106      	movs	r1, #6
        first_byte_mark = 0xE0; /* 11100000 */
 8000d72:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 8000d76:	2203      	movs	r2, #3
 8000d78:	e7d3      	b.n	8000d22 <parse_string+0x18a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d82:	f800 3901 	strb.w	r3, [r0], #-1
        codepoint >>= 6;
 8000d86:	ea4f 1b9b 	mov.w	fp, fp, lsr #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000d8a:	e7cd      	b.n	8000d28 <parse_string+0x190>
    if (input_pointer != NULL)
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	f47f af65 	bne.w	8000c5c <parse_string+0xc4>
    return false;
 8000d92:	2000      	movs	r0, #0
 8000d94:	e74a      	b.n	8000c2c <parse_string+0x94>
 8000d96:	bf00      	nop
 8000d98:	000ffc00 	.word	0x000ffc00

08000d9c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8000d9c:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
 8000d9e:	b128      	cbz	r0, 8000dac <buffer_skip_whitespace+0x10>
 8000da0:	6801      	ldr	r1, [r0, #0]
 8000da2:	b189      	cbz	r1, 8000dc8 <buffer_skip_whitespace+0x2c>
    {
        return NULL;
    }

    if (cannot_access_at_index(buffer, 0))
 8000da4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d302      	bcc.n	8000db2 <buffer_skip_whitespace+0x16>
    {
        buffer->offset--;
    }

    return buffer;
}
 8000dac:	bd10      	pop	{r4, pc}
       buffer->offset++;
 8000dae:	3201      	adds	r2, #1
 8000db0:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8000db2:	6882      	ldr	r2, [r0, #8]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d903      	bls.n	8000dc0 <buffer_skip_whitespace+0x24>
 8000db8:	5c8c      	ldrb	r4, [r1, r2]
 8000dba:	2c20      	cmp	r4, #32
 8000dbc:	d9f7      	bls.n	8000dae <buffer_skip_whitespace+0x12>
 8000dbe:	e7f5      	b.n	8000dac <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
 8000dc0:	d1f4      	bne.n	8000dac <buffer_skip_whitespace+0x10>
        buffer->offset--;
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6083      	str	r3, [r0, #8]
 8000dc6:	e7f1      	b.n	8000dac <buffer_skip_whitespace+0x10>
        return NULL;
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e7ef      	b.n	8000dac <buffer_skip_whitespace+0x10>

08000dcc <update_offset>:
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000dce:	4604      	mov	r4, r0
 8000dd0:	b138      	cbz	r0, 8000de2 <update_offset+0x16>
 8000dd2:	6800      	ldr	r0, [r0, #0]
 8000dd4:	b128      	cbz	r0, 8000de2 <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000dd6:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000dd8:	4428      	add	r0, r5
 8000dda:	f7ff f9c3 	bl	8000164 <strlen>
 8000dde:	4405      	add	r5, r0
 8000de0:	60a5      	str	r5, [r4, #8]
}
 8000de2:	bd38      	pop	{r3, r4, r5, pc}

08000de4 <ensure>:
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
 8000de6:	4604      	mov	r4, r0
 8000de8:	b1b8      	cbz	r0, 8000e1a <ensure+0x36>
 8000dea:	6805      	ldr	r5, [r0, #0]
 8000dec:	b165      	cbz	r5, 8000e08 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
 8000dee:	6843      	ldr	r3, [r0, #4]
 8000df0:	b113      	cbz	r3, 8000df8 <ensure+0x14>
 8000df2:	6882      	ldr	r2, [r0, #8]
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d910      	bls.n	8000e1a <ensure+0x36>
    if (needed > INT_MAX)
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	db0e      	blt.n	8000e1a <ensure+0x36>
    needed += p->offset + 1;
 8000dfc:	68a2      	ldr	r2, [r4, #8]
 8000dfe:	1c4e      	adds	r6, r1, #1
 8000e00:	4416      	add	r6, r2
    if (needed <= p->length)
 8000e02:	42b3      	cmp	r3, r6
 8000e04:	d302      	bcc.n	8000e0c <ensure+0x28>
        return p->buffer + p->offset;
 8000e06:	4415      	add	r5, r2
}
 8000e08:	4628      	mov	r0, r5
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
 8000e0c:	6923      	ldr	r3, [r4, #16]
 8000e0e:	b923      	cbnz	r3, 8000e1a <ensure+0x36>
    if (needed > (INT_MAX / 2))
 8000e10:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8000e14:	d303      	bcc.n	8000e1e <ensure+0x3a>
        if (needed <= INT_MAX)
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	da0f      	bge.n	8000e3a <ensure+0x56>
        return NULL;
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e7f4      	b.n	8000e08 <ensure+0x24>
        newsize = needed * 2;
 8000e1e:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
 8000e20:	6a23      	ldr	r3, [r4, #32]
 8000e22:	b16b      	cbz	r3, 8000e40 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000e24:	4628      	mov	r0, r5
 8000e26:	4631      	mov	r1, r6
 8000e28:	4798      	blx	r3
        if (newbuffer == NULL)
 8000e2a:	4605      	mov	r5, r0
 8000e2c:	b9b0      	cbnz	r0, 8000e5c <ensure+0x78>
            p->hooks.deallocate(p->buffer);
 8000e2e:	69e3      	ldr	r3, [r4, #28]
 8000e30:	6820      	ldr	r0, [r4, #0]
 8000e32:	4798      	blx	r3
            p->buffer = NULL;
 8000e34:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
 8000e38:	e7e6      	b.n	8000e08 <ensure+0x24>
            newsize = INT_MAX;
 8000e3a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8000e3e:	e7ef      	b.n	8000e20 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000e40:	4630      	mov	r0, r6
 8000e42:	69a3      	ldr	r3, [r4, #24]
 8000e44:	4798      	blx	r3
        if (!newbuffer)
 8000e46:	4605      	mov	r5, r0
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	d0f0      	beq.n	8000e2e <ensure+0x4a>
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000e4c:	68a2      	ldr	r2, [r4, #8]
 8000e4e:	6821      	ldr	r1, [r4, #0]
 8000e50:	3201      	adds	r2, #1
 8000e52:	f003 fd4e 	bl	80048f2 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000e56:	69e3      	ldr	r3, [r4, #28]
 8000e58:	6820      	ldr	r0, [r4, #0]
 8000e5a:	4798      	blx	r3
    return newbuffer + p->offset;
 8000e5c:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
 8000e5e:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
 8000e62:	441d      	add	r5, r3
 8000e64:	e7d0      	b.n	8000e08 <ensure+0x24>
	...

08000e68 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d034      	beq.n	8000edc <get_object_item+0x74>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d031      	beq.n	8000eda <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
 8000e76:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8000e78:	b9fa      	cbnz	r2, 8000eba <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000e7a:	4e19      	ldr	r6, [pc, #100]	; (8000ee0 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8000e7c:	b374      	cbz	r4, 8000edc <get_object_item+0x74>
 8000e7e:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8000e80:	b1c3      	cbz	r3, 8000eb4 <get_object_item+0x4c>
    if (string1 == string2)
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d021      	beq.n	8000eca <get_object_item+0x62>
 8000e86:	f105 3cff 	add.w	ip, r5, #4294967295
 8000e8a:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000e8c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8000e90:	460f      	mov	r7, r1
 8000e92:	5c72      	ldrb	r2, [r6, r1]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000e9e:	bf08      	it	eq
 8000ea0:	f101 0720 	addeq.w	r7, r1, #32
 8000ea4:	5cb0      	ldrb	r0, [r6, r2]
 8000ea6:	f000 0003 	and.w	r0, r0, #3
 8000eaa:	2801      	cmp	r0, #1
 8000eac:	bf08      	it	eq
 8000eae:	3220      	addeq	r2, #32
 8000eb0:	4297      	cmp	r7, r2
 8000eb2:	d00f      	beq.n	8000ed4 <get_object_item+0x6c>
        {
            current_element = current_element->next;
 8000eb4:	6824      	ldr	r4, [r4, #0]
 8000eb6:	e7e1      	b.n	8000e7c <get_object_item+0x14>
            current_element = current_element->next;
 8000eb8:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8000eba:	b17c      	cbz	r4, 8000edc <get_object_item+0x74>
 8000ebc:	6a21      	ldr	r1, [r4, #32]
 8000ebe:	b121      	cbz	r1, 8000eca <get_object_item+0x62>
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f7ff f945 	bl	8000150 <strcmp>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d1f6      	bne.n	8000eb8 <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8000eca:	6a23      	ldr	r3, [r4, #32]
        return NULL;
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf08      	it	eq
 8000ed0:	2400      	moveq	r4, #0
 8000ed2:	e003      	b.n	8000edc <get_object_item+0x74>
        if (*string1 == '\0')
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d1d9      	bne.n	8000e8c <get_object_item+0x24>
 8000ed8:	e7f7      	b.n	8000eca <get_object_item+0x62>
        return NULL;
 8000eda:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
 8000edc:	4620      	mov	r0, r4
 8000ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee0:	080070a9 	.word	0x080070a9

08000ee4 <add_item_to_array>:

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
    cJSON *child = NULL;

    if ((item == NULL) || (array == NULL) || (array == item))
 8000ee4:	b181      	cbz	r1, 8000f08 <add_item_to_array+0x24>
 8000ee6:	b138      	cbz	r0, 8000ef8 <add_item_to_array+0x14>
 8000ee8:	4281      	cmp	r1, r0
 8000eea:	d00d      	beq.n	8000f08 <add_item_to_array+0x24>
    {
        return false;
    }

    child = array->child;
 8000eec:	6883      	ldr	r3, [r0, #8]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8000eee:	b923      	cbnz	r3, 8000efa <add_item_to_array+0x16>
    {
        /* list is empty, start new one */
        array->child = item;
 8000ef0:	6081      	str	r1, [r0, #8]
        item->prev = item;
        item->next = NULL;
 8000ef2:	e9c1 3100 	strd	r3, r1, [r1]
 8000ef6:	2001      	movs	r0, #1
            array->child->prev = item;
        }
    }

    return true;
}
 8000ef8:	4770      	bx	lr
        if (child->prev)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d0fa      	beq.n	8000ef6 <add_item_to_array+0x12>
    prev->next = item;
 8000f00:	6011      	str	r1, [r2, #0]
    item->prev = prev;
 8000f02:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
 8000f04:	6059      	str	r1, [r3, #4]
 8000f06:	e7f6      	b.n	8000ef6 <add_item_to_array+0x12>
        return false;
 8000f08:	2000      	movs	r0, #0
 8000f0a:	4770      	bx	lr

08000f0c <print_string_ptr>:
{
 8000f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f10:	4606      	mov	r6, r0
    if (output_buffer == NULL)
 8000f12:	4608      	mov	r0, r1
 8000f14:	b911      	cbnz	r1, 8000f1c <print_string_ptr+0x10>
        return false;
 8000f16:	2000      	movs	r0, #0
}
 8000f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
 8000f1c:	b32e      	cbz	r6, 8000f6a <print_string_ptr+0x5e>
 8000f1e:	4631      	mov	r1, r6
    size_t escape_characters = 0;
 8000f20:	f04f 0a00 	mov.w	sl, #0
        switch (*input_pointer)
 8000f24:	4c41      	ldr	r4, [pc, #260]	; (800102c <print_string_ptr+0x120>)
 8000f26:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f2c:	bb3b      	cbnz	r3, 8000f7e <print_string_ptr+0x72>
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8000f2e:	1bad      	subs	r5, r5, r6
 8000f30:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000f32:	1ce9      	adds	r1, r5, #3
 8000f34:	f7ff ff56 	bl	8000de4 <ensure>
    if (output == NULL)
 8000f38:	4607      	mov	r7, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d0eb      	beq.n	8000f16 <print_string_ptr+0xa>
    if (escape_characters == 0)
 8000f3e:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
 8000f42:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
 8000f44:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
 8000f48:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
 8000f4c:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
 8000f50:	f1ba 0f00 	cmp.w	sl, #0
 8000f54:	d129      	bne.n	8000faa <print_string_ptr+0x9e>
        memcpy(output + 1, input, output_length);
 8000f56:	462a      	mov	r2, r5
 8000f58:	4631      	mov	r1, r6
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f003 fcc9 	bl	80048f2 <memcpy>
        output[output_length + 1] = '\"';
 8000f60:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
 8000f64:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
 8000f68:	e007      	b.n	8000f7a <print_string_ptr+0x6e>
        output = ensure(output_buffer, sizeof("\"\""));
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f7ff ff3a 	bl	8000de4 <ensure>
        if (output == NULL)
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d0d0      	beq.n	8000f16 <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
 8000f74:	492e      	ldr	r1, [pc, #184]	; (8001030 <print_string_ptr+0x124>)
 8000f76:	f003 fcb4 	bl	80048e2 <strcpy>
    return true;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e7cc      	b.n	8000f18 <print_string_ptr+0xc>
        switch (*input_pointer)
 8000f7e:	2b22      	cmp	r3, #34	; 0x22
 8000f80:	d80b      	bhi.n	8000f9a <print_string_ptr+0x8e>
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d90c      	bls.n	8000fa0 <print_string_ptr+0x94>
 8000f86:	f1a3 0208 	sub.w	r2, r3, #8
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	fa24 f202 	lsr.w	r2, r4, r2
 8000f90:	07d2      	lsls	r2, r2, #31
 8000f92:	d505      	bpl.n	8000fa0 <print_string_ptr+0x94>
                escape_characters++;
 8000f94:	f10a 0a01 	add.w	sl, sl, #1
                break;
 8000f98:	e7c5      	b.n	8000f26 <print_string_ptr+0x1a>
        switch (*input_pointer)
 8000f9a:	2b5c      	cmp	r3, #92	; 0x5c
 8000f9c:	d1c3      	bne.n	8000f26 <print_string_ptr+0x1a>
 8000f9e:	e7f9      	b.n	8000f94 <print_string_ptr+0x88>
                if (*input_pointer < 32)
 8000fa0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
 8000fa2:	bf98      	it	ls
 8000fa4:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000fa8:	e7bd      	b.n	8000f26 <print_string_ptr+0x1a>
            *output_pointer++ = '\\';
 8000faa:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
 8000fac:	f04f 0a74 	mov.w	sl, #116	; 0x74
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000fb0:	f8df b080 	ldr.w	fp, [pc, #128]	; 8001034 <print_string_ptr+0x128>
 8000fb4:	3e01      	subs	r6, #1
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000fb6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8000fba:	b92b      	cbnz	r3, 8000fc8 <print_string_ptr+0xbc>
    output[output_length + 1] = '\"';
 8000fbc:	2222      	movs	r2, #34	; 0x22
 8000fbe:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
 8000fc2:	f807 3008 	strb.w	r3, [r7, r8]
 8000fc6:	e7d8      	b.n	8000f7a <print_string_ptr+0x6e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d907      	bls.n	8000fdc <print_string_ptr+0xd0>
 8000fcc:	2b22      	cmp	r3, #34	; 0x22
 8000fce:	d005      	beq.n	8000fdc <print_string_ptr+0xd0>
 8000fd0:	2b5c      	cmp	r3, #92	; 0x5c
 8000fd2:	d003      	beq.n	8000fdc <print_string_ptr+0xd0>
            *output_pointer = *input_pointer;
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000fd8:	1c44      	adds	r4, r0, #1
 8000fda:	e7ec      	b.n	8000fb6 <print_string_ptr+0xaa>
            *output_pointer++ = '\\';
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
 8000fe2:	7832      	ldrb	r2, [r6, #0]
 8000fe4:	2a0d      	cmp	r2, #13
 8000fe6:	d80a      	bhi.n	8000ffe <print_string_ptr+0xf2>
 8000fe8:	2a07      	cmp	r2, #7
 8000fea:	d91a      	bls.n	8001022 <print_string_ptr+0x116>
 8000fec:	f1a2 0308 	sub.w	r3, r2, #8
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d816      	bhi.n	8001022 <print_string_ptr+0x116>
 8000ff4:	e8df f003 	tbb	[pc, r3]
 8000ff8:	150e1209 	.word	0x150e1209
 8000ffc:	100c      	.short	0x100c
 8000ffe:	2a22      	cmp	r2, #34	; 0x22
 8001000:	d001      	beq.n	8001006 <print_string_ptr+0xfa>
 8001002:	2a5c      	cmp	r2, #92	; 0x5c
 8001004:	d10d      	bne.n	8001022 <print_string_ptr+0x116>
                    *output_pointer = '\"';
 8001006:	7062      	strb	r2, [r4, #1]
                    break;
 8001008:	e7e6      	b.n	8000fd8 <print_string_ptr+0xcc>
                    *output_pointer = 'b';
 800100a:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
 800100c:	7063      	strb	r3, [r4, #1]
                    break;
 800100e:	e7e3      	b.n	8000fd8 <print_string_ptr+0xcc>
                    *output_pointer = 'f';
 8001010:	2366      	movs	r3, #102	; 0x66
 8001012:	e7fb      	b.n	800100c <print_string_ptr+0x100>
                    *output_pointer = 'n';
 8001014:	236e      	movs	r3, #110	; 0x6e
 8001016:	e7f9      	b.n	800100c <print_string_ptr+0x100>
                    *output_pointer = 'r';
 8001018:	2372      	movs	r3, #114	; 0x72
 800101a:	e7f7      	b.n	800100c <print_string_ptr+0x100>
                    *output_pointer = 't';
 800101c:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
 8001020:	e7da      	b.n	8000fd8 <print_string_ptr+0xcc>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001022:	4659      	mov	r1, fp
 8001024:	f003 fb14 	bl	8004650 <siprintf>
                    output_pointer += 4;
 8001028:	1d60      	adds	r0, r4, #5
                    break;
 800102a:	e7d5      	b.n	8000fd8 <print_string_ptr+0xcc>
 800102c:	04000037 	.word	0x04000037
 8001030:	08006f64 	.word	0x08006f64
 8001034:	08006f67 	.word	0x08006f67

08001038 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
 8001038:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
 800103a:	4605      	mov	r5, r0
 800103c:	b170      	cbz	r0, 800105c <cJSON_strdup.constprop.0+0x24>
    length = strlen((const char*)string) + sizeof("");
 800103e:	f7ff f891 	bl	8000164 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <cJSON_strdup.constprop.0+0x28>)
    length = strlen((const char*)string) + sizeof("");
 8001044:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
 8001046:	4630      	mov	r0, r6
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4798      	blx	r3
    if (copy == NULL)
 800104c:	4604      	mov	r4, r0
 800104e:	b118      	cbz	r0, 8001058 <cJSON_strdup.constprop.0+0x20>
    memcpy(copy, string, length);
 8001050:	4632      	mov	r2, r6
 8001052:	4629      	mov	r1, r5
 8001054:	f003 fc4d 	bl	80048f2 <memcpy>
}
 8001058:	4620      	mov	r0, r4
 800105a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800105c:	4604      	mov	r4, r0
 800105e:	e7fb      	b.n	8001058 <cJSON_strdup.constprop.0+0x20>
 8001060:	20000000 	.word	0x20000000

08001064 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	460d      	mov	r5, r1
 8001068:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800106a:	4607      	mov	r7, r0
 800106c:	b300      	cbz	r0, 80010b0 <add_item_to_object.constprop.0+0x4c>
 800106e:	b1f9      	cbz	r1, 80010b0 <add_item_to_object.constprop.0+0x4c>
 8001070:	b1f2      	cbz	r2, 80010b0 <add_item_to_object.constprop.0+0x4c>
 8001072:	4290      	cmp	r0, r2
 8001074:	d01c      	beq.n	80010b0 <add_item_to_object.constprop.0+0x4c>
    {
        return false;
    }

    if (constant_key)
 8001076:	b193      	cbz	r3, 800109e <add_item_to_object.constprop.0+0x3a>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
 8001078:	68d6      	ldr	r6, [r2, #12]
 800107a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800107e:	68e3      	ldr	r3, [r4, #12]
 8001080:	059b      	lsls	r3, r3, #22
 8001082:	d404      	bmi.n	800108e <add_item_to_object.constprop.0+0x2a>
 8001084:	6a20      	ldr	r0, [r4, #32]
 8001086:	b110      	cbz	r0, 800108e <add_item_to_object.constprop.0+0x2a>
    {
        hooks->deallocate(item->string);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <add_item_to_object.constprop.0+0x50>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
 800108e:	4621      	mov	r1, r4
 8001090:	4638      	mov	r0, r7
    item->string = new_key;
 8001092:	6225      	str	r5, [r4, #32]
    item->type = new_type;
 8001094:	60e6      	str	r6, [r4, #12]
}
 8001096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
 800109a:	f7ff bf23 	b.w	8000ee4 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800109e:	4608      	mov	r0, r1
 80010a0:	f7ff ffca 	bl	8001038 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
 80010a4:	4605      	mov	r5, r0
 80010a6:	b118      	cbz	r0, 80010b0 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
 80010a8:	68e6      	ldr	r6, [r4, #12]
 80010aa:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 80010ae:	e7e6      	b.n	800107e <add_item_to_object.constprop.0+0x1a>
}
 80010b0:	2000      	movs	r0, #0
 80010b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b4:	20000000 	.word	0x20000000

080010b8 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
 80010b8:	4603      	mov	r3, r0
 80010ba:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	4798      	blx	r3
    if (node)
 80010c0:	4604      	mov	r4, r0
 80010c2:	b118      	cbz	r0, 80010cc <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
 80010c4:	2228      	movs	r2, #40	; 0x28
 80010c6:	2100      	movs	r1, #0
 80010c8:	f003 fb51 	bl	800476e <memset>
}
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd10      	pop	{r4, pc}

080010d0 <print_value>:
{
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d4:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
 80010d6:	4680      	mov	r8, r0
{
 80010d8:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
 80010da:	b908      	cbnz	r0, 80010e0 <print_value+0x10>
    switch ((item->type) & 0xFF)
 80010dc:	2500      	movs	r5, #0
 80010de:	e05d      	b.n	800119c <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d0fb      	beq.n	80010dc <print_value+0xc>
    switch ((item->type) & 0xFF)
 80010e4:	7b05      	ldrb	r5, [r0, #12]
 80010e6:	2d10      	cmp	r5, #16
 80010e8:	f000 810c 	beq.w	8001304 <print_value+0x234>
 80010ec:	dc18      	bgt.n	8001120 <print_value+0x50>
 80010ee:	1e6b      	subs	r3, r5, #1
 80010f0:	2b07      	cmp	r3, #7
 80010f2:	d8f3      	bhi.n	80010dc <print_value+0xc>
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d8f1      	bhi.n	80010dc <print_value+0xc>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <print_value+0x30>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	0800118b 	.word	0x0800118b
 8001104:	080011a5 	.word	0x080011a5
 8001108:	080010dd 	.word	0x080010dd
 800110c:	08001175 	.word	0x08001175
 8001110:	080010dd 	.word	0x080010dd
 8001114:	080010dd 	.word	0x080010dd
 8001118:	080010dd 	.word	0x080010dd
 800111c:	080011b5 	.word	0x080011b5
 8001120:	2d40      	cmp	r5, #64	; 0x40
 8001122:	f000 811e 	beq.w	8001362 <print_value+0x292>
 8001126:	2d80      	cmp	r5, #128	; 0x80
 8001128:	f000 80d8 	beq.w	80012dc <print_value+0x20c>
 800112c:	2d20      	cmp	r5, #32
 800112e:	d1d5      	bne.n	80010dc <print_value+0xc>
            return print_array(item, output_buffer);
 8001130:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
 8001132:	2101      	movs	r1, #1
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff fe55 	bl	8000de4 <ensure>
    if (output_pointer == NULL)
 800113a:	2800      	cmp	r0, #0
 800113c:	d0ce      	beq.n	80010dc <print_value+0xc>
    *output_pointer = '[';
 800113e:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
 8001140:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
 8001142:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
 8001146:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
 8001148:	68a3      	ldr	r3, [r4, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
 800114e:	68e3      	ldr	r3, [r4, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
 8001154:	2e00      	cmp	r6, #0
 8001156:	f040 80db 	bne.w	8001310 <print_value+0x240>
    output_pointer = ensure(output_buffer, 2);
 800115a:	2102      	movs	r1, #2
 800115c:	4620      	mov	r0, r4
 800115e:	f7ff fe41 	bl	8000de4 <ensure>
    if (output_pointer == NULL)
 8001162:	2800      	cmp	r0, #0
 8001164:	d0ba      	beq.n	80010dc <print_value+0xc>
    *output_pointer++ = ']';
 8001166:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
 8001168:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
 800116a:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
 800116c:	68e3      	ldr	r3, [r4, #12]
 800116e:	3b01      	subs	r3, #1
 8001170:	60e3      	str	r3, [r4, #12]
 8001172:	e008      	b.n	8001186 <print_value+0xb6>
            output = ensure(output_buffer, 5);
 8001174:	2105      	movs	r1, #5
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff fe34 	bl	8000de4 <ensure>
            if (output == NULL)
 800117c:	2800      	cmp	r0, #0
 800117e:	d0ad      	beq.n	80010dc <print_value+0xc>
            strcpy((char*)output, "null");
 8001180:	4991      	ldr	r1, [pc, #580]	; (80013c8 <print_value+0x2f8>)
            strcpy((char*)output, "true");
 8001182:	f003 fbae 	bl	80048e2 <strcpy>
    return true;
 8001186:	2501      	movs	r5, #1
 8001188:	e008      	b.n	800119c <print_value+0xcc>
            output = ensure(output_buffer, 6);
 800118a:	2106      	movs	r1, #6
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff fe29 	bl	8000de4 <ensure>
            if (output == NULL)
 8001192:	2800      	cmp	r0, #0
 8001194:	d0a2      	beq.n	80010dc <print_value+0xc>
            strcpy((char*)output, "false");
 8001196:	498d      	ldr	r1, [pc, #564]	; (80013cc <print_value+0x2fc>)
 8001198:	f003 fba3 	bl	80048e2 <strcpy>
}
 800119c:	4628      	mov	r0, r5
 800119e:	b00d      	add	sp, #52	; 0x34
 80011a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            output = ensure(output_buffer, 5);
 80011a4:	2105      	movs	r1, #5
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff fe1c 	bl	8000de4 <ensure>
            if (output == NULL)
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d095      	beq.n	80010dc <print_value+0xc>
            strcpy((char*)output, "true");
 80011b0:	4987      	ldr	r1, [pc, #540]	; (80013d0 <print_value+0x300>)
 80011b2:	e7e6      	b.n	8001182 <print_value+0xb2>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011b4:	2100      	movs	r1, #0
    double d = item->valuedouble;
 80011b6:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011ba:	2216      	movs	r2, #22
 80011bc:	a806      	add	r0, sp, #24
 80011be:	9105      	str	r1, [sp, #20]
 80011c0:	f003 fad5 	bl	800476e <memset>
    double test = 0.0;
 80011c4:	2200      	movs	r2, #0
 80011c6:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
 80011c8:	4630      	mov	r0, r6
    double test = 0.0;
 80011ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (isnan(d) || isinf(d))
 80011ce:	4639      	mov	r1, r7
 80011d0:	4632      	mov	r2, r6
 80011d2:	463b      	mov	r3, r7
 80011d4:	f7ff fc24 	bl	8000a20 <__aeabi_dcmpun>
 80011d8:	b988      	cbnz	r0, 80011fe <print_value+0x12e>
 80011da:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 80011de:	f04f 32ff 	mov.w	r2, #4294967295
 80011e2:	4630      	mov	r0, r6
 80011e4:	4649      	mov	r1, r9
 80011e6:	4b7b      	ldr	r3, [pc, #492]	; (80013d4 <print_value+0x304>)
 80011e8:	f7ff fc1a 	bl	8000a20 <__aeabi_dcmpun>
 80011ec:	b9f0      	cbnz	r0, 800122c <print_value+0x15c>
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	4630      	mov	r0, r6
 80011f4:	4649      	mov	r1, r9
 80011f6:	4b77      	ldr	r3, [pc, #476]	; (80013d4 <print_value+0x304>)
 80011f8:	f7ff fbf4 	bl	80009e4 <__aeabi_dcmple>
 80011fc:	b9b0      	cbnz	r0, 800122c <print_value+0x15c>
        length = sprintf((char*)number_buffer, "null");
 80011fe:	4972      	ldr	r1, [pc, #456]	; (80013c8 <print_value+0x2f8>)
 8001200:	a805      	add	r0, sp, #20
 8001202:	f003 fb6e 	bl	80048e2 <strcpy>
 8001206:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001208:	4620      	mov	r0, r4
 800120a:	1c69      	adds	r1, r5, #1
 800120c:	f7ff fdea 	bl	8000de4 <ensure>
    if (output_pointer == NULL)
 8001210:	2800      	cmp	r0, #0
 8001212:	f43f af63 	beq.w	80010dc <print_value+0xc>
 8001216:	4602      	mov	r2, r0
 8001218:	ab05      	add	r3, sp, #20
 800121a:	1941      	adds	r1, r0, r5
    for (i = 0; i < ((size_t)length); i++)
 800121c:	4291      	cmp	r1, r2
 800121e:	d158      	bne.n	80012d2 <print_value+0x202>
    output_pointer[i] = '\0';
 8001220:	2300      	movs	r3, #0
 8001222:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
 8001224:	68a3      	ldr	r3, [r4, #8]
 8001226:	442b      	add	r3, r5
 8001228:	60a3      	str	r3, [r4, #8]
    return true;
 800122a:	e7ac      	b.n	8001186 <print_value+0xb6>
    else if(d == (double)item->valueint)
 800122c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8001230:	4628      	mov	r0, r5
 8001232:	f7ff f8f1 	bl	8000418 <__aeabi_i2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4630      	mov	r0, r6
 800123c:	4639      	mov	r1, r7
 800123e:	f7ff fbbd 	bl	80009bc <__aeabi_dcmpeq>
 8001242:	b148      	cbz	r0, 8001258 <print_value+0x188>
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001244:	462a      	mov	r2, r5
 8001246:	4964      	ldr	r1, [pc, #400]	; (80013d8 <print_value+0x308>)
 8001248:	a805      	add	r0, sp, #20
 800124a:	f003 fa01 	bl	8004650 <siprintf>
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800124e:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001250:	2d19      	cmp	r5, #25
 8001252:	f63f af43 	bhi.w	80010dc <print_value+0xc>
 8001256:	e7d7      	b.n	8001208 <print_value+0x138>
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001258:	4632      	mov	r2, r6
 800125a:	463b      	mov	r3, r7
 800125c:	495f      	ldr	r1, [pc, #380]	; (80013dc <print_value+0x30c>)
 800125e:	a805      	add	r0, sp, #20
 8001260:	f003 f9f6 	bl	8004650 <siprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001264:	495e      	ldr	r1, [pc, #376]	; (80013e0 <print_value+0x310>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001266:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001268:	aa02      	add	r2, sp, #8
 800126a:	a805      	add	r0, sp, #20
 800126c:	f003 fa10 	bl	8004690 <siscanf>
 8001270:	2801      	cmp	r0, #1
 8001272:	d127      	bne.n	80012c4 <print_value+0x1f4>
 8001274:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001278:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800127c:	4643      	mov	r3, r8
 800127e:	4652      	mov	r2, sl
 8001280:	4649      	mov	r1, r9
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fba4 	bl	80009d0 <__aeabi_dcmplt>
 8001288:	2800      	cmp	r0, #0
 800128a:	bf14      	ite	ne
 800128c:	4653      	movne	r3, sl
 800128e:	4633      	moveq	r3, r6
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001290:	4632      	mov	r2, r6
 8001292:	4650      	mov	r0, sl
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001294:	9301      	str	r3, [sp, #4]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001296:	4659      	mov	r1, fp
 8001298:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800129a:	bf08      	it	eq
 800129c:	46c8      	moveq	r8, r9
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800129e:	f7fe ff6d 	bl	800017c <__aeabi_dsub>
 80012a2:	2200      	movs	r2, #0
 80012a4:	4682      	mov	sl, r0
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <print_value+0x314>)
 80012a8:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 80012ac:	9801      	ldr	r0, [sp, #4]
 80012ae:	4641      	mov	r1, r8
 80012b0:	f7ff f91c 	bl	80004ec <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80012b8:	4650      	mov	r0, sl
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7ff fb92 	bl	80009e4 <__aeabi_dcmple>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1c5      	bne.n	8001250 <print_value+0x180>
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80012c4:	4632      	mov	r2, r6
 80012c6:	463b      	mov	r3, r7
 80012c8:	4947      	ldr	r1, [pc, #284]	; (80013e8 <print_value+0x318>)
 80012ca:	a805      	add	r0, sp, #20
 80012cc:	f003 f9c0 	bl	8004650 <siprintf>
 80012d0:	e7bd      	b.n	800124e <print_value+0x17e>
        if (number_buffer[i] == decimal_point)
 80012d2:	f813 6b01 	ldrb.w	r6, [r3], #1
            output_pointer[i] = '.';
 80012d6:	f802 6b01 	strb.w	r6, [r2], #1
    for (i = 0; i < ((size_t)length); i++)
 80012da:	e79f      	b.n	800121c <print_value+0x14c>
            if (item->valuestring == NULL)
 80012dc:	6900      	ldr	r0, [r0, #16]
 80012de:	2800      	cmp	r0, #0
 80012e0:	f43f aefc 	beq.w	80010dc <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
 80012e4:	f7fe ff3e 	bl	8000164 <strlen>
 80012e8:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
 80012ea:	4629      	mov	r1, r5
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fd79 	bl	8000de4 <ensure>
            if (output == NULL)
 80012f2:	2800      	cmp	r0, #0
 80012f4:	f43f aef2 	beq.w	80010dc <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
 80012f8:	462a      	mov	r2, r5
 80012fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80012fe:	f003 faf8 	bl	80048f2 <memcpy>
            return true;
 8001302:	e740      	b.n	8001186 <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001304:	6900      	ldr	r0, [r0, #16]
}
 8001306:	b00d      	add	sp, #52	; 0x34
 8001308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800130c:	f7ff bdfe 	b.w	8000f0c <print_string_ptr>
        if (!print_value(current_element, output_buffer))
 8001310:	4621      	mov	r1, r4
 8001312:	4630      	mov	r0, r6
 8001314:	f7ff fedc 	bl	80010d0 <print_value>
 8001318:	2800      	cmp	r0, #0
 800131a:	f43f aedf 	beq.w	80010dc <print_value+0xc>
        update_offset(output_buffer);
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff fd54 	bl	8000dcc <update_offset>
        if (current_element->next)
 8001324:	6833      	ldr	r3, [r6, #0]
 8001326:	b1bb      	cbz	r3, 8001358 <print_value+0x288>
            length = (size_t) (output_buffer->format ? 2 : 1);
 8001328:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
 800132a:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	f04f 0902 	movne.w	r9, #2
 8001334:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
 8001338:	f109 0101 	add.w	r1, r9, #1
 800133c:	f7ff fd52 	bl	8000de4 <ensure>
            if (output_pointer == NULL)
 8001340:	2800      	cmp	r0, #0
 8001342:	f43f aecb 	beq.w	80010dc <print_value+0xc>
            *output_pointer++ = ',';
 8001346:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
 8001348:	6963      	ldr	r3, [r4, #20]
 800134a:	b93b      	cbnz	r3, 800135c <print_value+0x28c>
            *output_pointer++ = ',';
 800134c:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
 800134e:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
 8001352:	68a3      	ldr	r3, [r4, #8]
 8001354:	444b      	add	r3, r9
 8001356:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
 8001358:	6836      	ldr	r6, [r6, #0]
 800135a:	e6fb      	b.n	8001154 <print_value+0x84>
                *output_pointer++ = ' ';
 800135c:	1c83      	adds	r3, r0, #2
 800135e:	7045      	strb	r5, [r0, #1]
 8001360:	e7f5      	b.n	800134e <print_value+0x27e>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001362:	694b      	ldr	r3, [r1, #20]
 8001364:	6885      	ldr	r5, [r0, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2602      	movne	r6, #2
 800136c:	2601      	moveq	r6, #1
    output_pointer = ensure(output_buffer, length + 1);
 800136e:	4620      	mov	r0, r4
 8001370:	1c71      	adds	r1, r6, #1
 8001372:	f7ff fd37 	bl	8000de4 <ensure>
    if (output_pointer == NULL)
 8001376:	2800      	cmp	r0, #0
 8001378:	f43f aeb0 	beq.w	80010dc <print_value+0xc>
    *output_pointer++ = '{';
 800137c:	237b      	movs	r3, #123	; 0x7b
 800137e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8001380:	68e3      	ldr	r3, [r4, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60e3      	str	r3, [r4, #12]
    if (output_buffer->format)
 8001386:	6963      	ldr	r3, [r4, #20]
 8001388:	b10b      	cbz	r3, 800138e <print_value+0x2be>
        *output_pointer++ = '\n';
 800138a:	230a      	movs	r3, #10
 800138c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
 800138e:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
 8001390:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
 8001392:	4433      	add	r3, r6
                *output_pointer++ = '\t';
 8001394:	2609      	movs	r6, #9
    output_buffer->offset += length;
 8001396:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
 8001398:	6963      	ldr	r3, [r4, #20]
    while (current_item)
 800139a:	bb3d      	cbnz	r5, 80013ec <print_value+0x31c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8085 	beq.w	80014ac <print_value+0x3dc>
 80013a2:	68e1      	ldr	r1, [r4, #12]
 80013a4:	3101      	adds	r1, #1
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff fd1c 	bl	8000de4 <ensure>
    if (output_pointer == NULL)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f43f ae95 	beq.w	80010dc <print_value+0xc>
    if (output_buffer->format)
 80013b2:	6963      	ldr	r3, [r4, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 8083 	bne.w	80014c0 <print_value+0x3f0>
 80013ba:	4603      	mov	r3, r0
    *output_pointer++ = '}';
 80013bc:	227d      	movs	r2, #125	; 0x7d
 80013be:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80013c0:	2200      	movs	r2, #0
 80013c2:	705a      	strb	r2, [r3, #1]
 80013c4:	e6d2      	b.n	800116c <print_value+0x9c>
 80013c6:	bf00      	nop
 80013c8:	08006f6d 	.word	0x08006f6d
 80013cc:	08006f72 	.word	0x08006f72
 80013d0:	08006f78 	.word	0x08006f78
 80013d4:	7fefffff 	.word	0x7fefffff
 80013d8:	08006f7d 	.word	0x08006f7d
 80013dc:	08006f80 	.word	0x08006f80
 80013e0:	08006f87 	.word	0x08006f87
 80013e4:	3cb00000 	.word	0x3cb00000
 80013e8:	08006f8b 	.word	0x08006f8b
        if (output_buffer->format)
 80013ec:	b173      	cbz	r3, 800140c <print_value+0x33c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80013ee:	4620      	mov	r0, r4
 80013f0:	68e1      	ldr	r1, [r4, #12]
 80013f2:	f7ff fcf7 	bl	8000de4 <ensure>
            if (output_pointer == NULL)
 80013f6:	2800      	cmp	r0, #0
 80013f8:	f43f ae70 	beq.w	80010dc <print_value+0xc>
 80013fc:	4603      	mov	r3, r0
            for (i = 0; i < output_buffer->depth; i++)
 80013fe:	68e2      	ldr	r2, [r4, #12]
 8001400:	1a19      	subs	r1, r3, r0
 8001402:	428a      	cmp	r2, r1
 8001404:	d84f      	bhi.n	80014a6 <print_value+0x3d6>
            output_buffer->offset += output_buffer->depth;
 8001406:	68a3      	ldr	r3, [r4, #8]
 8001408:	4413      	add	r3, r2
 800140a:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800140c:	4621      	mov	r1, r4
 800140e:	6a28      	ldr	r0, [r5, #32]
 8001410:	f7ff fd7c 	bl	8000f0c <print_string_ptr>
 8001414:	2800      	cmp	r0, #0
 8001416:	f43f ae61 	beq.w	80010dc <print_value+0xc>
        update_offset(output_buffer);
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fcd6 	bl	8000dcc <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
 8001420:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
 8001422:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	f04f 0802 	movne.w	r8, #2
 800142c:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
 8001430:	4641      	mov	r1, r8
 8001432:	f7ff fcd7 	bl	8000de4 <ensure>
        if (output_pointer == NULL)
 8001436:	2800      	cmp	r0, #0
 8001438:	f43f ae50 	beq.w	80010dc <print_value+0xc>
        *output_pointer++ = ':';
 800143c:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
 800143e:	6963      	ldr	r3, [r4, #20]
 8001440:	b103      	cbz	r3, 8001444 <print_value+0x374>
            *output_pointer++ = '\t';
 8001442:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
 8001444:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
 8001446:	4621      	mov	r1, r4
        output_buffer->offset += length;
 8001448:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
 800144a:	4628      	mov	r0, r5
        output_buffer->offset += length;
 800144c:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
 800144e:	f7ff fe3f 	bl	80010d0 <print_value>
 8001452:	2800      	cmp	r0, #0
 8001454:	f43f ae42 	beq.w	80010dc <print_value+0xc>
        update_offset(output_buffer);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fcb7 	bl	8000dcc <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	6962      	ldr	r2, [r4, #20]
 8001462:	f1b3 0800 	subs.w	r8, r3, #0
 8001466:	bf18      	it	ne
 8001468:	f04f 0801 	movne.w	r8, #1
 800146c:	2a00      	cmp	r2, #0
 800146e:	bf18      	it	ne
 8001470:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
 8001474:	4620      	mov	r0, r4
 8001476:	f108 0101 	add.w	r1, r8, #1
 800147a:	f7ff fcb3 	bl	8000de4 <ensure>
        if (output_pointer == NULL)
 800147e:	2800      	cmp	r0, #0
 8001480:	f43f ae2c 	beq.w	80010dc <print_value+0xc>
        if (current_item->next)
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	b113      	cbz	r3, 800148e <print_value+0x3be>
            *output_pointer++ = ',';
 8001488:	232c      	movs	r3, #44	; 0x2c
 800148a:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
 800148e:	6963      	ldr	r3, [r4, #20]
 8001490:	b113      	cbz	r3, 8001498 <print_value+0x3c8>
            *output_pointer++ = '\n';
 8001492:	230a      	movs	r3, #10
 8001494:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
 8001498:	2300      	movs	r3, #0
 800149a:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
 800149c:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
 800149e:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
 80014a0:	4443      	add	r3, r8
 80014a2:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
 80014a4:	e778      	b.n	8001398 <print_value+0x2c8>
                *output_pointer++ = '\t';
 80014a6:	f803 6b01 	strb.w	r6, [r3], #1
            for (i = 0; i < output_buffer->depth; i++)
 80014aa:	e7a8      	b.n	80013fe <print_value+0x32e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80014ac:	2102      	movs	r1, #2
 80014ae:	e77a      	b.n	80013a6 <print_value+0x2d6>
            *output_pointer++ = '\t';
 80014b0:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80014b4:	68e2      	ldr	r2, [r4, #12]
 80014b6:	1a19      	subs	r1, r3, r0
 80014b8:	3a01      	subs	r2, #1
 80014ba:	4291      	cmp	r1, r2
 80014bc:	d3f8      	bcc.n	80014b0 <print_value+0x3e0>
 80014be:	e77d      	b.n	80013bc <print_value+0x2ec>
 80014c0:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
 80014c2:	2509      	movs	r5, #9
 80014c4:	e7f6      	b.n	80014b4 <print_value+0x3e4>
 80014c6:	bf00      	nop

080014c8 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 80014c8:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80014ca:	4d23      	ldr	r5, [pc, #140]	; (8001558 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 80014cc:	b08a      	sub	sp, #40	; 0x28
 80014ce:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
 80014d0:	2224      	movs	r2, #36	; 0x24
 80014d2:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 80014d4:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 80014d6:	a801      	add	r0, sp, #4
 80014d8:	f003 f949 	bl	800476e <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014e2:	4798      	blx	r3
    buffer->length = default_buffer_size;
 80014e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80014e8:	4603      	mov	r3, r0
    buffer->format = format;
 80014ea:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
 80014ec:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80014ee:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
 80014f0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
 80014f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f6:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80014fa:	b17b      	cbz	r3, 800151c <print.constprop.0+0x54>
    if (!print_value(item, buffer))
 80014fc:	4620      	mov	r0, r4
 80014fe:	a901      	add	r1, sp, #4
 8001500:	f7ff fde6 	bl	80010d0 <print_value>
 8001504:	b150      	cbz	r0, 800151c <print.constprop.0+0x54>
    update_offset(buffer);
 8001506:	a801      	add	r0, sp, #4
 8001508:	f7ff fc60 	bl	8000dcc <update_offset>
    if (hooks->reallocate != NULL)
 800150c:	68ae      	ldr	r6, [r5, #8]
 800150e:	9903      	ldr	r1, [sp, #12]
 8001510:	b15e      	cbz	r6, 800152a <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001512:	9801      	ldr	r0, [sp, #4]
 8001514:	3101      	adds	r1, #1
 8001516:	47b0      	blx	r6
        if (printed == NULL) {
 8001518:	4604      	mov	r4, r0
 800151a:	b9d0      	cbnz	r0, 8001552 <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
 800151c:	9c01      	ldr	r4, [sp, #4]
 800151e:	b1c4      	cbz	r4, 8001552 <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
 8001520:	4620      	mov	r0, r4
 8001522:	686b      	ldr	r3, [r5, #4]
 8001524:	4798      	blx	r3
    return NULL;
 8001526:	2400      	movs	r4, #0
 8001528:	e013      	b.n	8001552 <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	1c48      	adds	r0, r1, #1
 800152e:	4798      	blx	r3
        if (printed == NULL)
 8001530:	4604      	mov	r4, r0
 8001532:	2800      	cmp	r0, #0
 8001534:	d0f2      	beq.n	800151c <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001536:	9a03      	ldr	r2, [sp, #12]
 8001538:	9b02      	ldr	r3, [sp, #8]
 800153a:	3201      	adds	r2, #1
 800153c:	429a      	cmp	r2, r3
 800153e:	bf28      	it	cs
 8001540:	461a      	movcs	r2, r3
 8001542:	9901      	ldr	r1, [sp, #4]
 8001544:	f003 f9d5 	bl	80048f2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001548:	9b03      	ldr	r3, [sp, #12]
 800154a:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
 800154c:	686b      	ldr	r3, [r5, #4]
 800154e:	9801      	ldr	r0, [sp, #4]
 8001550:	4798      	blx	r3
}
 8001552:	4620      	mov	r0, r4
 8001554:	b00a      	add	sp, #40	; 0x28
 8001556:	bd70      	pop	{r4, r5, r6, pc}
 8001558:	20000000 	.word	0x20000000

0800155c <cJSON_GetErrorPtr>:
    return (const char*) (global_error.json + global_error.position);
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <cJSON_GetErrorPtr+0xc>)
 800155e:	e9d3 0300 	ldrd	r0, r3, [r3]
}
 8001562:	4418      	add	r0, r3
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200001fc 	.word	0x200001fc

0800156c <cJSON_Delete>:
{
 800156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001570:	4604      	mov	r4, r0
            item->valuestring = NULL;
 8001572:	2700      	movs	r7, #0
 8001574:	4e12      	ldr	r6, [pc, #72]	; (80015c0 <cJSON_Delete+0x54>)
    while (item != NULL)
 8001576:	b90c      	cbnz	r4, 800157c <cJSON_Delete+0x10>
}
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800157c:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 800157e:	f8d4 8000 	ldr.w	r8, [r4]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001582:	05da      	lsls	r2, r3, #23
 8001584:	d404      	bmi.n	8001590 <cJSON_Delete+0x24>
 8001586:	68a0      	ldr	r0, [r4, #8]
 8001588:	b980      	cbnz	r0, 80015ac <cJSON_Delete+0x40>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800158a:	6920      	ldr	r0, [r4, #16]
            global_hooks.deallocate(item->valuestring);
 800158c:	6873      	ldr	r3, [r6, #4]
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800158e:	b998      	cbnz	r0, 80015b8 <cJSON_Delete+0x4c>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001590:	68e3      	ldr	r3, [r4, #12]
 8001592:	f413 7500 	ands.w	r5, r3, #512	; 0x200
 8001596:	d104      	bne.n	80015a2 <cJSON_Delete+0x36>
 8001598:	6a20      	ldr	r0, [r4, #32]
 800159a:	b110      	cbz	r0, 80015a2 <cJSON_Delete+0x36>
            global_hooks.deallocate(item->string);
 800159c:	6873      	ldr	r3, [r6, #4]
 800159e:	4798      	blx	r3
            item->string = NULL;
 80015a0:	6225      	str	r5, [r4, #32]
        global_hooks.deallocate(item);
 80015a2:	4620      	mov	r0, r4
 80015a4:	6873      	ldr	r3, [r6, #4]
 80015a6:	4798      	blx	r3
        item = next;
 80015a8:	4644      	mov	r4, r8
 80015aa:	e7e4      	b.n	8001576 <cJSON_Delete+0xa>
            cJSON_Delete(item->child);
 80015ac:	f7ff ffde 	bl	800156c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80015b0:	68e3      	ldr	r3, [r4, #12]
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	d5e9      	bpl.n	800158a <cJSON_Delete+0x1e>
 80015b6:	e7eb      	b.n	8001590 <cJSON_Delete+0x24>
            global_hooks.deallocate(item->valuestring);
 80015b8:	4798      	blx	r3
            item->valuestring = NULL;
 80015ba:	6127      	str	r7, [r4, #16]
 80015bc:	e7e8      	b.n	8001590 <cJSON_Delete+0x24>
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000
 80015c4:	00000000 	.word	0x00000000

080015c8 <parse_value>:
{
 80015c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015cc:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80015ce:	460c      	mov	r4, r1
{
 80015d0:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80015d2:	b909      	cbnz	r1, 80015d8 <parse_value+0x10>
    return false;
 80015d4:	2000      	movs	r0, #0
 80015d6:	e023      	b.n	8001620 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80015d8:	680f      	ldr	r7, [r1, #0]
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d0fa      	beq.n	80015d4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80015de:	688d      	ldr	r5, [r1, #8]
 80015e0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80015e4:	f105 0904 	add.w	r9, r5, #4
 80015e8:	45c1      	cmp	r9, r8
 80015ea:	d80b      	bhi.n	8001604 <parse_value+0x3c>
 80015ec:	2204      	movs	r2, #4
 80015ee:	49aa      	ldr	r1, [pc, #680]	; (8001898 <parse_value+0x2d0>)
 80015f0:	1978      	adds	r0, r7, r5
 80015f2:	f003 f8e0 	bl	80047b6 <strncmp>
 80015f6:	b928      	cbnz	r0, 8001604 <parse_value+0x3c>
        item->type = cJSON_NULL;
 80015f8:	2304      	movs	r3, #4
 80015fa:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
 80015fc:	f8c4 9008 	str.w	r9, [r4, #8]
    return true;
 8001600:	2001      	movs	r0, #1
 8001602:	e00d      	b.n	8001620 <parse_value+0x58>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001604:	f105 0a05 	add.w	sl, r5, #5
 8001608:	45d0      	cmp	r8, sl
 800160a:	d30c      	bcc.n	8001626 <parse_value+0x5e>
 800160c:	2205      	movs	r2, #5
 800160e:	49a3      	ldr	r1, [pc, #652]	; (800189c <parse_value+0x2d4>)
 8001610:	1978      	adds	r0, r7, r5
 8001612:	f003 f8d0 	bl	80047b6 <strncmp>
 8001616:	b930      	cbnz	r0, 8001626 <parse_value+0x5e>
        item->type = cJSON_False;
 8001618:	2001      	movs	r0, #1
 800161a:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
 800161c:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8001620:	b012      	add	sp, #72	; 0x48
 8001622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001626:	45c1      	cmp	r9, r8
 8001628:	d80c      	bhi.n	8001644 <parse_value+0x7c>
 800162a:	2204      	movs	r2, #4
 800162c:	499c      	ldr	r1, [pc, #624]	; (80018a0 <parse_value+0x2d8>)
 800162e:	1978      	adds	r0, r7, r5
 8001630:	f003 f8c1 	bl	80047b6 <strncmp>
 8001634:	b930      	cbnz	r0, 8001644 <parse_value+0x7c>
        item->type = cJSON_True;
 8001636:	2302      	movs	r3, #2
        item->valueint = 1;
 8001638:	2001      	movs	r0, #1
        item->type = cJSON_True;
 800163a:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
 800163c:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
 800163e:	f8c4 9008 	str.w	r9, [r4, #8]
        return true;
 8001642:	e7ed      	b.n	8001620 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001644:	4545      	cmp	r5, r8
 8001646:	d2c5      	bcs.n	80015d4 <parse_value+0xc>
 8001648:	5d7b      	ldrb	r3, [r7, r5]
 800164a:	1978      	adds	r0, r7, r5
 800164c:	2b22      	cmp	r3, #34	; 0x22
 800164e:	d106      	bne.n	800165e <parse_value+0x96>
        return parse_string(item, input_buffer);
 8001650:	4621      	mov	r1, r4
 8001652:	4630      	mov	r0, r6
}
 8001654:	b012      	add	sp, #72	; 0x48
 8001656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
 800165a:	f7ff ba9d 	b.w	8000b98 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800165e:	2b2d      	cmp	r3, #45	; 0x2d
 8001660:	d003      	beq.n	800166a <parse_value+0xa2>
 8001662:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001666:	2a09      	cmp	r2, #9
 8001668:	d854      	bhi.n	8001714 <parse_value+0x14c>
    unsigned char *after_end = NULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f10d 0c08 	add.w	ip, sp, #8
 8001670:	4667      	mov	r7, ip
        switch (buffer_at_offset(input_buffer)[i])
 8001672:	f04f 0e01 	mov.w	lr, #1
 8001676:	eba8 0505 	sub.w	r5, r8, r5
 800167a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80018a4 <parse_value+0x2dc>
    unsigned char *after_end = NULL;
 800167e:	9301      	str	r3, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
 8001680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001684:	2a45      	cmp	r2, #69	; 0x45
 8001686:	d83d      	bhi.n	8001704 <parse_value+0x13c>
 8001688:	2a2a      	cmp	r2, #42	; 0x2a
 800168a:	d910      	bls.n	80016ae <parse_value+0xe6>
 800168c:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
 8001690:	b2c9      	uxtb	r1, r1
 8001692:	fa0e f101 	lsl.w	r1, lr, r1
 8001696:	ea11 0f08 	tst.w	r1, r8
 800169a:	d101      	bne.n	80016a0 <parse_value+0xd8>
 800169c:	2a2e      	cmp	r2, #46	; 0x2e
 800169e:	d106      	bne.n	80016ae <parse_value+0xe6>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80016a0:	3301      	adds	r3, #1
 80016a2:	2b3f      	cmp	r3, #63	; 0x3f
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80016a4:	f80c 2b01 	strb.w	r2, [ip], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80016a8:	d001      	beq.n	80016ae <parse_value+0xe6>
 80016aa:	42ab      	cmp	r3, r5
 80016ac:	d1e8      	bne.n	8001680 <parse_value+0xb8>
    number_c_string[i] = '\0';
 80016ae:	2500      	movs	r5, #0
 80016b0:	3348      	adds	r3, #72	; 0x48
 80016b2:	446b      	add	r3, sp
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80016b4:	4638      	mov	r0, r7
    number_c_string[i] = '\0';
 80016b6:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80016ba:	a901      	add	r1, sp, #4
 80016bc:	f002 fe70 	bl	80043a0 <strtod>
    if (number_c_string == after_end)
 80016c0:	f8dd a004 	ldr.w	sl, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80016c4:	4680      	mov	r8, r0
    if (number_c_string == after_end)
 80016c6:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80016c8:	4689      	mov	r9, r1
    if (number_c_string == after_end)
 80016ca:	d083      	beq.n	80015d4 <parse_value+0xc>
    if (number >= INT_MAX)
 80016cc:	a370      	add	r3, pc, #448	; (adr r3, 8001890 <parse_value+0x2c8>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f991 	bl	80009f8 <__aeabi_dcmpge>
 80016d6:	b9b8      	cbnz	r0, 8001708 <parse_value+0x140>
    else if (number <= (double)INT_MIN)
 80016d8:	2200      	movs	r2, #0
 80016da:	4640      	mov	r0, r8
 80016dc:	4649      	mov	r1, r9
 80016de:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <parse_value+0x2e0>)
 80016e0:	f7ff f980 	bl	80009e4 <__aeabi_dcmple>
 80016e4:	b998      	cbnz	r0, 800170e <parse_value+0x146>
        item->valueint = (int)number;
 80016e6:	4640      	mov	r0, r8
 80016e8:	4649      	mov	r1, r9
 80016ea:	f7ff f9af 	bl	8000a4c <__aeabi_d2iz>
    item->type = cJSON_Number;
 80016ee:	2308      	movs	r3, #8
    item->valuedouble = number;
 80016f0:	e9c6 8906 	strd	r8, r9, [r6, #24]
    item->type = cJSON_Number;
 80016f4:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 80016f6:	68a3      	ldr	r3, [r4, #8]
 80016f8:	ebaa 0a07 	sub.w	sl, sl, r7
        item->valueint = INT_MAX;
 80016fc:	6170      	str	r0, [r6, #20]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 80016fe:	4453      	add	r3, sl
    input_buffer->offset++;
 8001700:	60a3      	str	r3, [r4, #8]
 8001702:	e77d      	b.n	8001600 <parse_value+0x38>
        switch (buffer_at_offset(input_buffer)[i])
 8001704:	2a65      	cmp	r2, #101	; 0x65
 8001706:	e7ca      	b.n	800169e <parse_value+0xd6>
 8001708:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800170c:	e7ef      	b.n	80016ee <parse_value+0x126>
 800170e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001712:	e7ec      	b.n	80016ee <parse_value+0x126>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001714:	2b5b      	cmp	r3, #91	; 0x5b
 8001716:	d155      	bne.n	80017c4 <parse_value+0x1fc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001718:	68e3      	ldr	r3, [r4, #12]
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171e:	f4bf af59 	bcs.w	80015d4 <parse_value+0xc>
    input_buffer->depth++;
 8001722:	3301      	adds	r3, #1
 8001724:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 8001726:	5d7b      	ldrb	r3, [r7, r5]
 8001728:	2b5b      	cmp	r3, #91	; 0x5b
 800172a:	f47f af53 	bne.w	80015d4 <parse_value+0xc>
    input_buffer->offset++;
 800172e:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
 8001730:	4620      	mov	r0, r4
    input_buffer->offset++;
 8001732:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8001734:	f7ff fb32 	bl	8000d9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001738:	68a3      	ldr	r3, [r4, #8]
 800173a:	4598      	cmp	r8, r3
 800173c:	d902      	bls.n	8001744 <parse_value+0x17c>
 800173e:	5cfa      	ldrb	r2, [r7, r3]
 8001740:	2a5d      	cmp	r2, #93	; 0x5d
 8001742:	d032      	beq.n	80017aa <parse_value+0x1e2>
        input_buffer->offset--;
 8001744:	1e5a      	subs	r2, r3, #1
    if (cannot_access_at_index(input_buffer, 0))
 8001746:	4598      	cmp	r8, r3
        input_buffer->offset--;
 8001748:	60a2      	str	r2, [r4, #8]
    if (cannot_access_at_index(input_buffer, 0))
 800174a:	f67f af43 	bls.w	80015d4 <parse_value+0xc>
    cJSON *current_item = NULL;
 800174e:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
 8001750:	462f      	mov	r7, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001752:	6920      	ldr	r0, [r4, #16]
 8001754:	f7ff fcb0 	bl	80010b8 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8001758:	46a8      	mov	r8, r5
 800175a:	4605      	mov	r5, r0
 800175c:	2800      	cmp	r0, #0
 800175e:	f000 80ae 	beq.w	80018be <parse_value+0x2f6>
        if (head == NULL)
 8001762:	b307      	cbz	r7, 80017a6 <parse_value+0x1de>
            current_item->next = new_item;
 8001764:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8001768:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 800176c:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 800176e:	4620      	mov	r0, r4
        input_buffer->offset++;
 8001770:	3301      	adds	r3, #1
 8001772:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001774:	f7ff fb12 	bl	8000d9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001778:	4621      	mov	r1, r4
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff ff24 	bl	80015c8 <parse_value>
 8001780:	2800      	cmp	r0, #0
 8001782:	f000 809f 	beq.w	80018c4 <parse_value+0x2fc>
        buffer_skip_whitespace(input_buffer);
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff fb08 	bl	8000d9c <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800178c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001790:	4293      	cmp	r3, r2
 8001792:	f080 8097 	bcs.w	80018c4 <parse_value+0x2fc>
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	2b2c      	cmp	r3, #44	; 0x2c
 800179c:	d0d9      	beq.n	8001752 <parse_value+0x18a>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800179e:	2b5d      	cmp	r3, #93	; 0x5d
 80017a0:	f040 8090 	bne.w	80018c4 <parse_value+0x2fc>
 80017a4:	e003      	b.n	80017ae <parse_value+0x1e6>
 80017a6:	4607      	mov	r7, r0
 80017a8:	e7e0      	b.n	800176c <parse_value+0x1a4>
    cJSON *current_item = NULL;
 80017aa:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
 80017ac:	462f      	mov	r7, r5
    input_buffer->depth--;
 80017ae:	68e3      	ldr	r3, [r4, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
 80017b4:	b107      	cbz	r7, 80017b8 <parse_value+0x1f0>
        head->prev = current_item;
 80017b6:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
 80017b8:	2320      	movs	r3, #32
    item->child = head;
 80017ba:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
 80017be:	68a3      	ldr	r3, [r4, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	e79d      	b.n	8001700 <parse_value+0x138>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80017c4:	2b7b      	cmp	r3, #123	; 0x7b
 80017c6:	f47f af05 	bne.w	80015d4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80017ca:	68e3      	ldr	r3, [r4, #12]
 80017cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d0:	f4bf af00 	bcs.w	80015d4 <parse_value+0xc>
    input_buffer->depth++;
 80017d4:	3301      	adds	r3, #1
 80017d6:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80017d8:	5d7b      	ldrb	r3, [r7, r5]
 80017da:	2b7b      	cmp	r3, #123	; 0x7b
 80017dc:	f47f aefa 	bne.w	80015d4 <parse_value+0xc>
    input_buffer->offset++;
 80017e0:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
 80017e2:	4620      	mov	r0, r4
    input_buffer->offset++;
 80017e4:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 80017e6:	f7ff fad9 	bl	8000d9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80017ea:	68a3      	ldr	r3, [r4, #8]
 80017ec:	4598      	cmp	r8, r3
 80017ee:	d902      	bls.n	80017f6 <parse_value+0x22e>
 80017f0:	5cfa      	ldrb	r2, [r7, r3]
 80017f2:	2a7d      	cmp	r2, #125	; 0x7d
 80017f4:	d05a      	beq.n	80018ac <parse_value+0x2e4>
        input_buffer->offset--;
 80017f6:	1e5a      	subs	r2, r3, #1
    if (cannot_access_at_index(input_buffer, 0))
 80017f8:	4598      	cmp	r8, r3
        input_buffer->offset--;
 80017fa:	60a2      	str	r2, [r4, #8]
    if (cannot_access_at_index(input_buffer, 0))
 80017fc:	f67f aeea 	bls.w	80015d4 <parse_value+0xc>
    cJSON *current_item = NULL;
 8001800:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
 8001802:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
 8001804:	46a8      	mov	r8, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001806:	6920      	ldr	r0, [r4, #16]
 8001808:	f7ff fc56 	bl	80010b8 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 800180c:	46a9      	mov	r9, r5
 800180e:	4605      	mov	r5, r0
 8001810:	2800      	cmp	r0, #0
 8001812:	d054      	beq.n	80018be <parse_value+0x2f6>
        if (head == NULL)
 8001814:	2f00      	cmp	r7, #0
 8001816:	d039      	beq.n	800188c <parse_value+0x2c4>
            current_item->next = new_item;
 8001818:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
 800181c:	f8c0 9004 	str.w	r9, [r0, #4]
        if (cannot_access_at_index(input_buffer, 1))
 8001820:	68a3      	ldr	r3, [r4, #8]
 8001822:	6862      	ldr	r2, [r4, #4]
 8001824:	3301      	adds	r3, #1
 8001826:	4293      	cmp	r3, r2
 8001828:	d24c      	bcs.n	80018c4 <parse_value+0x2fc>
        buffer_skip_whitespace(input_buffer);
 800182a:	4620      	mov	r0, r4
        input_buffer->offset++;
 800182c:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 800182e:	f7ff fab5 	bl	8000d9c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001832:	4621      	mov	r1, r4
 8001834:	4628      	mov	r0, r5
 8001836:	f7ff f9af 	bl	8000b98 <parse_string>
 800183a:	2800      	cmp	r0, #0
 800183c:	d042      	beq.n	80018c4 <parse_value+0x2fc>
        buffer_skip_whitespace(input_buffer);
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff faac 	bl	8000d9c <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8001844:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
 8001846:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
 800184a:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800184c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001850:	4293      	cmp	r3, r2
 8001852:	d237      	bcs.n	80018c4 <parse_value+0x2fc>
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	5cd2      	ldrb	r2, [r2, r3]
 8001858:	2a3a      	cmp	r2, #58	; 0x3a
 800185a:	d133      	bne.n	80018c4 <parse_value+0x2fc>
        input_buffer->offset++;
 800185c:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
 800185e:	4620      	mov	r0, r4
        input_buffer->offset++;
 8001860:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001862:	f7ff fa9b 	bl	8000d9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001866:	4621      	mov	r1, r4
 8001868:	4628      	mov	r0, r5
 800186a:	f7ff fead 	bl	80015c8 <parse_value>
 800186e:	b348      	cbz	r0, 80018c4 <parse_value+0x2fc>
        buffer_skip_whitespace(input_buffer);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fa93 	bl	8000d9c <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001876:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800187a:	4293      	cmp	r3, r2
 800187c:	d222      	bcs.n	80018c4 <parse_value+0x2fc>
 800187e:	6822      	ldr	r2, [r4, #0]
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	2b2c      	cmp	r3, #44	; 0x2c
 8001884:	d0bf      	beq.n	8001806 <parse_value+0x23e>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001886:	2b7d      	cmp	r3, #125	; 0x7d
 8001888:	d11c      	bne.n	80018c4 <parse_value+0x2fc>
 800188a:	e011      	b.n	80018b0 <parse_value+0x2e8>
 800188c:	4607      	mov	r7, r0
 800188e:	e7c7      	b.n	8001820 <parse_value+0x258>
 8001890:	ffc00000 	.word	0xffc00000
 8001894:	41dfffff 	.word	0x41dfffff
 8001898:	08006f6d 	.word	0x08006f6d
 800189c:	08006f72 	.word	0x08006f72
 80018a0:	08006f78 	.word	0x08006f78
 80018a4:	04007fe5 	.word	0x04007fe5
 80018a8:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
 80018ac:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
 80018ae:	462f      	mov	r7, r5
    input_buffer->depth--;
 80018b0:	68e3      	ldr	r3, [r4, #12]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
 80018b6:	b107      	cbz	r7, 80018ba <parse_value+0x2f2>
        head->prev = current_item;
 80018b8:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	e77d      	b.n	80017ba <parse_value+0x1f2>
    if (head != NULL)
 80018be:	2f00      	cmp	r7, #0
 80018c0:	f43f ae88 	beq.w	80015d4 <parse_value+0xc>
        cJSON_Delete(head);
 80018c4:	4638      	mov	r0, r7
 80018c6:	f7ff fe51 	bl	800156c <cJSON_Delete>
 80018ca:	e683      	b.n	80015d4 <parse_value+0xc>

080018cc <cJSON_ParseWithLengthOpts>:
{
 80018cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018d0:	4605      	mov	r5, r0
    global_error.json = NULL;
 80018d2:	f04f 0900 	mov.w	r9, #0
{
 80018d6:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
 80018d8:	4f2e      	ldr	r7, [pc, #184]	; (8001994 <cJSON_ParseWithLengthOpts+0xc8>)
{
 80018da:	460c      	mov	r4, r1
 80018dc:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80018de:	2100      	movs	r1, #0
 80018e0:	221c      	movs	r2, #28
 80018e2:	a801      	add	r0, sp, #4
{
 80018e4:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80018e6:	f002 ff42 	bl	800476e <memset>
    global_error.position = 0;
 80018ea:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
 80018ee:	2d00      	cmp	r5, #0
 80018f0:	d046      	beq.n	8001980 <cJSON_ParseWithLengthOpts+0xb4>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d039      	beq.n	800196a <cJSON_ParseWithLengthOpts+0x9e>
    buffer.hooks = global_hooks;
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <cJSON_ParseWithLengthOpts+0xcc>)
    buffer.length = buffer_length;
 80018f8:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
 80018fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001900:	ab08      	add	r3, sp, #32
 8001902:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
 8001906:	f7ff fbd7 	bl	80010b8 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
 800190a:	4604      	mov	r4, r0
 800190c:	b368      	cbz	r0, 800196a <cJSON_ParseWithLengthOpts+0x9e>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800190e:	9801      	ldr	r0, [sp, #4]
 8001910:	b170      	cbz	r0, 8001930 <cJSON_ParseWithLengthOpts+0x64>
 8001912:	9b03      	ldr	r3, [sp, #12]
 8001914:	b95b      	cbnz	r3, 800192e <cJSON_ParseWithLengthOpts+0x62>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001916:	9b02      	ldr	r3, [sp, #8]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d906      	bls.n	800192a <cJSON_ParseWithLengthOpts+0x5e>
 800191c:	2203      	movs	r2, #3
 800191e:	491f      	ldr	r1, [pc, #124]	; (800199c <cJSON_ParseWithLengthOpts+0xd0>)
 8001920:	f002 ff49 	bl	80047b6 <strncmp>
 8001924:	b908      	cbnz	r0, 800192a <cJSON_ParseWithLengthOpts+0x5e>
        buffer->offset += 3;
 8001926:	2303      	movs	r3, #3
 8001928:	9303      	str	r3, [sp, #12]
    return buffer;
 800192a:	a801      	add	r0, sp, #4
 800192c:	e000      	b.n	8001930 <cJSON_ParseWithLengthOpts+0x64>
        return NULL;
 800192e:	4648      	mov	r0, r9
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001930:	f7ff fa34 	bl	8000d9c <buffer_skip_whitespace>
 8001934:	4601      	mov	r1, r0
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fe46 	bl	80015c8 <parse_value>
 800193c:	b190      	cbz	r0, 8001964 <cJSON_ParseWithLengthOpts+0x98>
    if (require_null_terminated)
 800193e:	f1b8 0f00 	cmp.w	r8, #0
 8001942:	d104      	bne.n	800194e <cJSON_ParseWithLengthOpts+0x82>
    if (return_parse_end)
 8001944:	b9f6      	cbnz	r6, 8001984 <cJSON_ParseWithLengthOpts+0xb8>
}
 8001946:	4620      	mov	r0, r4
 8001948:	b009      	add	sp, #36	; 0x24
 800194a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
 800194e:	a801      	add	r0, sp, #4
 8001950:	f7ff fa24 	bl	8000d9c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001958:	4293      	cmp	r3, r2
 800195a:	d203      	bcs.n	8001964 <cJSON_ParseWithLengthOpts+0x98>
 800195c:	9a01      	ldr	r2, [sp, #4]
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <cJSON_ParseWithLengthOpts+0x78>
        cJSON_Delete(item);
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fe01 	bl	800156c <cJSON_Delete>
        if (buffer.offset < buffer.length)
 800196a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800196e:	4293      	cmp	r3, r2
 8001970:	d301      	bcc.n	8001976 <cJSON_ParseWithLengthOpts+0xaa>
        else if (buffer.length > 0)
 8001972:	b162      	cbz	r2, 800198e <cJSON_ParseWithLengthOpts+0xc2>
            local_error.position = buffer.length - 1;
 8001974:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
 8001976:	b10e      	cbz	r6, 800197c <cJSON_ParseWithLengthOpts+0xb0>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001978:	18ea      	adds	r2, r5, r3
 800197a:	6032      	str	r2, [r6, #0]
        global_error = local_error;
 800197c:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
 8001980:	2400      	movs	r4, #0
 8001982:	e7e0      	b.n	8001946 <cJSON_ParseWithLengthOpts+0x7a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	9a03      	ldr	r2, [sp, #12]
 8001988:	4413      	add	r3, r2
 800198a:	6033      	str	r3, [r6, #0]
 800198c:	e7db      	b.n	8001946 <cJSON_ParseWithLengthOpts+0x7a>
        local_error.position = 0;
 800198e:	4613      	mov	r3, r2
 8001990:	e7f1      	b.n	8001976 <cJSON_ParseWithLengthOpts+0xaa>
 8001992:	bf00      	nop
 8001994:	200001fc 	.word	0x200001fc
 8001998:	20000000 	.word	0x20000000
 800199c:	08006f92 	.word	0x08006f92

080019a0 <cJSON_ParseWithOpts>:
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	460d      	mov	r5, r1
 80019a4:	4616      	mov	r6, r2
    if (NULL == value)
 80019a6:	4604      	mov	r4, r0
 80019a8:	b148      	cbz	r0, 80019be <cJSON_ParseWithOpts+0x1e>
    buffer_length = strlen(value) + sizeof("");
 80019aa:	f7fe fbdb 	bl	8000164 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80019ae:	4633      	mov	r3, r6
 80019b0:	462a      	mov	r2, r5
 80019b2:	1c41      	adds	r1, r0, #1
 80019b4:	4620      	mov	r0, r4
}
 80019b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80019ba:	f7ff bf87 	b.w	80018cc <cJSON_ParseWithLengthOpts>
}
 80019be:	bd70      	pop	{r4, r5, r6, pc}

080019c0 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	4611      	mov	r1, r2
 80019c4:	f7ff bfec 	b.w	80019a0 <cJSON_ParseWithOpts>

080019c8 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
 80019c8:	2101      	movs	r1, #1
 80019ca:	f7ff bd7d 	b.w	80014c8 <print.constprop.0>

080019ce <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f7ff ba4a 	b.w	8000e68 <get_object_item>

080019d4 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <cJSON_CreateString+0x2c>)
{
 80019d8:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f7ff fb6c 	bl	80010b8 <cJSON_New_Item.isra.0>
    if(item)
 80019e0:	4604      	mov	r4, r0
 80019e2:	b158      	cbz	r0, 80019fc <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
 80019e4:	2310      	movs	r3, #16
 80019e6:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80019e8:	4628      	mov	r0, r5
 80019ea:	f7ff fb25 	bl	8001038 <cJSON_strdup.constprop.0>
 80019ee:	4605      	mov	r5, r0
 80019f0:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
 80019f2:	b918      	cbnz	r0, 80019fc <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fdb9 	bl	800156c <cJSON_Delete>
            return NULL;
 80019fa:	462c      	mov	r4, r5
        }
    }

    return item;
}
 80019fc:	4620      	mov	r0, r4
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	20000000 	.word	0x20000000

08001a04 <cJSON_AddStringToObject>:
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
 8001a08:	4610      	mov	r0, r2
{
 8001a0a:	460e      	mov	r6, r1
    cJSON *string_item = cJSON_CreateString(string);
 8001a0c:	f7ff ffe2 	bl	80019d4 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001a10:	2300      	movs	r3, #0
 8001a12:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
 8001a14:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001a16:	4631      	mov	r1, r6
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff fb23 	bl	8001064 <add_item_to_object.constprop.0>
 8001a1e:	4605      	mov	r5, r0
 8001a20:	b918      	cbnz	r0, 8001a2a <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff fda2 	bl	800156c <cJSON_Delete>
    return NULL;
 8001a28:	462c      	mov	r4, r5
}
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a30 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001a30:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <cJSON_CreateObject+0x14>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f7ff fb3f 	bl	80010b8 <cJSON_New_Item.isra.0>
    if (item)
 8001a3a:	b108      	cbz	r0, 8001a40 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000

08001a48 <cJSON_IsString>:
    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
 8001a48:	b120      	cbz	r0, 8001a54 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
 8001a4a:	7b00      	ldrb	r0, [r0, #12]
 8001a4c:	f1a0 0310 	sub.w	r3, r0, #16
 8001a50:	4258      	negs	r0, r3
 8001a52:	4158      	adcs	r0, r3
}
 8001a54:	4770      	bx	lr

08001a56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a56:	b530      	push	{r4, r5, lr}
 8001a58:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	a80b      	add	r0, sp, #44	; 0x2c
 8001a60:	f002 fe85 	bl	800476e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a66:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	2100      	movs	r1, #0
 8001a6a:	eb0d 0002 	add.w	r0, sp, r2
 8001a6e:	f002 fe7e 	bl	800476e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a72:	2100      	movs	r1, #0
 8001a74:	462a      	mov	r2, r5
 8001a76:	a801      	add	r0, sp, #4
 8001a78:	f002 fe79 	bl	800476e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a82:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a86:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f000 fe20 	bl	80026cc <HAL_RCC_OscConfig>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	b108      	cbz	r0, 8001a94 <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a94:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	e9cd 0007 	strd	r0, r0, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a9a:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aa0:	a805      	add	r0, sp, #20
 8001aa2:	f000 ffd5 	bl	8002a50 <HAL_RCC_ClockConfig>
 8001aa6:	b108      	cbz	r0, 8001aac <SystemClock_Config+0x56>
 8001aa8:	b672      	cpsid	i
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <SystemClock_Config+0x54>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001aac:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aae:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ab0:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab2:	f001 f889 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	b108      	cbz	r0, 8001abc <SystemClock_Config+0x66>
 8001ab8:	b672      	cpsid	i
  while (1)
 8001aba:	e7fe      	b.n	8001aba <SystemClock_Config+0x64>
}
 8001abc:	b015      	add	sp, #84	; 0x54
 8001abe:	bd30      	pop	{r4, r5, pc}

08001ac0 <HAL_UART_RxCpltCallback>:
    if (huart->Instance == USART1)
 8001ac0:	6802      	ldr	r2, [r0, #0]
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_RxCpltCallback+0x58>)
{
 8001ac4:	b410      	push	{r4}
    if (huart->Instance == USART1)
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d123      	bne.n	8001b12 <HAL_UART_RxCpltCallback+0x52>
        if (rxBuffer[rxIndex] == '\n' || rxBuffer[rxIndex] == '}' || rxBuffer[rxIndex] == '\0' || rxIndex >= RX_BUFFER_SIZE - 1)
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_UART_RxCpltCallback+0x5c>)
 8001acc:	4914      	ldr	r1, [pc, #80]	; (8001b20 <HAL_UART_RxCpltCallback+0x60>)
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	5c8a      	ldrb	r2, [r1, r2]
 8001ad2:	2a0a      	cmp	r2, #10
 8001ad4:	d009      	beq.n	8001aea <HAL_UART_RxCpltCallback+0x2a>
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	5c8a      	ldrb	r2, [r1, r2]
 8001ada:	2a7d      	cmp	r2, #125	; 0x7d
 8001adc:	d005      	beq.n	8001aea <HAL_UART_RxCpltCallback+0x2a>
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	b112      	cbz	r2, 8001aea <HAL_UART_RxCpltCallback+0x2a>
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	2a30      	cmp	r2, #48	; 0x30
 8001ae8:	d90e      	bls.n	8001b08 <HAL_UART_RxCpltCallback+0x48>
            rxBuffer[rxIndex + 1] = '\0'; // Null-terminate the string
 8001aea:	2000      	movs	r0, #0
            dataReceived = 1;
 8001aec:	2401      	movs	r4, #1
            rxBuffer[rxIndex + 1] = '\0'; // Null-terminate the string
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	440a      	add	r2, r1
 8001af2:	7050      	strb	r0, [r2, #1]
            dataReceived = 1;
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_UART_RxCpltCallback+0x64>)
 8001af6:	7014      	strb	r4, [r2, #0]
            rxIndex = 0; // Reset the buffer index
 8001af8:	7018      	strb	r0, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	480a      	ldr	r0, [pc, #40]	; (8001b28 <HAL_UART_RxCpltCallback+0x68>)
}
 8001b00:	bc10      	pop	{r4}
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001b02:	4419      	add	r1, r3
 8001b04:	f001 bbbb 	b.w	800327e <HAL_UART_Receive_IT>
            rxIndex++;
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e7f3      	b.n	8001afa <HAL_UART_RxCpltCallback+0x3a>
}
 8001b12:	bc10      	pop	{r4}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	200002fa 	.word	0x200002fa
 8001b20:	200002c8 	.word	0x200002c8
 8001b24:	2000024e 	.word	0x2000024e
 8001b28:	20000280 	.word	0x20000280

08001b2c <CommandHandling>:
{
 8001b2c:	b538      	push	{r3, r4, r5, lr}
	if (strcmp(commandPtr->command, "ENA") == 0) {
 8001b2e:	6805      	ldr	r5, [r0, #0]
{
 8001b30:	4604      	mov	r4, r0
	if (strcmp(commandPtr->command, "ENA") == 0) {
 8001b32:	4932      	ldr	r1, [pc, #200]	; (8001bfc <CommandHandling+0xd0>)
 8001b34:	4628      	mov	r0, r5
 8001b36:	f7fe fb0b 	bl	8000150 <strcmp>
 8001b3a:	b9d0      	cbnz	r0, 8001b72 <CommandHandling+0x46>
	    if (TempSensorID == commandPtr->nodeID) {
 8001b3c:	7923      	ldrb	r3, [r4, #4]
 8001b3e:	2b80      	cmp	r3, #128	; 0x80
 8001b40:	d109      	bne.n	8001b56 <CommandHandling+0x2a>
	    	LM35_voidInit(&NodeTemp);
 8001b42:	482f      	ldr	r0, [pc, #188]	; (8001c00 <CommandHandling+0xd4>)
 8001b44:	f001 fce0 	bl	8003508 <LM35_voidInit>
			cJSONOPtr = generateJSONObjectTemp(&NodeTemp);
 8001b48:	482d      	ldr	r0, [pc, #180]	; (8001c00 <CommandHandling+0xd4>)
					cJSONOPtr = generateJSONObjectTemp(&NodeRELAY);
 8001b4a:	f001 fba9 	bl	80032a0 <generateJSONObjectTemp>
}
 8001b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					PrintJson(cJSONOPtr);
 8001b52:	f001 bbdd 	b.w	8003310 <PrintJson>
	    } else if (LDRSensorID == commandPtr->nodeID) {
 8001b56:	2b81      	cmp	r3, #129	; 0x81
 8001b58:	d104      	bne.n	8001b64 <CommandHandling+0x38>
	        LDR_voidinit(&NodeLDR);
 8001b5a:	482a      	ldr	r0, [pc, #168]	; (8001c04 <CommandHandling+0xd8>)
 8001b5c:	f001 fc78 	bl	8003450 <LDR_voidinit>
					cJSONOPtr = generateJSONObjectTemp(&NodeLDR);
 8001b60:	4828      	ldr	r0, [pc, #160]	; (8001c04 <CommandHandling+0xd8>)
 8001b62:	e7f2      	b.n	8001b4a <CommandHandling+0x1e>
	    else if (RelayID == commandPtr->nodeID) {
 8001b64:	2b50      	cmp	r3, #80	; 0x50
 8001b66:	d147      	bne.n	8001bf8 <CommandHandling+0xcc>
			RELAY_voidInit(&NodeRELAY);
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <CommandHandling+0xdc>)
 8001b6a:	f001 fce5 	bl	8003538 <RELAY_voidInit>
					cJSONOPtr = generateJSONObjectTemp(&NodeRELAY);
 8001b6e:	4826      	ldr	r0, [pc, #152]	; (8001c08 <CommandHandling+0xdc>)
 8001b70:	e7eb      	b.n	8001b4a <CommandHandling+0x1e>
	else if (strcmp(commandPtr->command, "DIS") == 0) {
 8001b72:	4628      	mov	r0, r5
 8001b74:	4925      	ldr	r1, [pc, #148]	; (8001c0c <CommandHandling+0xe0>)
 8001b76:	f7fe faeb 	bl	8000150 <strcmp>
 8001b7a:	b998      	cbnz	r0, 8001ba4 <CommandHandling+0x78>
	    if (TempSensorID == commandPtr->nodeID) {
 8001b7c:	7923      	ldrb	r3, [r4, #4]
 8001b7e:	2b80      	cmp	r3, #128	; 0x80
 8001b80:	d104      	bne.n	8001b8c <CommandHandling+0x60>
}
 8001b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	        LM35_voidDeInit(&NodeTemp);
 8001b86:	481e      	ldr	r0, [pc, #120]	; (8001c00 <CommandHandling+0xd4>)
 8001b88:	f001 bccc 	b.w	8003524 <LM35_voidDeInit>
	    } else if (LDRSensorID == commandPtr->nodeID) {
 8001b8c:	2b81      	cmp	r3, #129	; 0x81
 8001b8e:	d103      	bne.n	8001b98 <CommandHandling+0x6c>
	        LDR_voidDeInit(&NodeLDR);
 8001b90:	481c      	ldr	r0, [pc, #112]	; (8001c04 <CommandHandling+0xd8>)
 8001b92:	f001 fc6b 	bl	800346c <LDR_voidDeInit>
	        cJSONOPtr = generateJSONObjectTemp(&NodeLDR);
 8001b96:	e7e3      	b.n	8001b60 <CommandHandling+0x34>
	    else if (RelayID == commandPtr->nodeID) {
 8001b98:	2b50      	cmp	r3, #80	; 0x50
 8001b9a:	d12d      	bne.n	8001bf8 <CommandHandling+0xcc>
			RELAY_voidDeInit(&NodeRELAY);
 8001b9c:	481a      	ldr	r0, [pc, #104]	; (8001c08 <CommandHandling+0xdc>)
 8001b9e:	f001 fce7 	bl	8003570 <RELAY_voidDeInit>
			cJSONOPtr = generateJSONObjectTemp(&NodeRELAY);
 8001ba2:	e7e4      	b.n	8001b6e <CommandHandling+0x42>
	else if (strcmp(commandPtr->command, "ACT") == 0) {
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	491a      	ldr	r1, [pc, #104]	; (8001c10 <CommandHandling+0xe4>)
 8001ba8:	f7fe fad2 	bl	8000150 <strcmp>
 8001bac:	b930      	cbnz	r0, 8001bbc <CommandHandling+0x90>
		 NodeRELAY.Data = commandPtr->data;
 8001bae:	7963      	ldrb	r3, [r4, #5]
 8001bb0:	4815      	ldr	r0, [pc, #84]	; (8001c08 <CommandHandling+0xdc>)
 8001bb2:	80c3      	strh	r3, [r0, #6]
}
 8001bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		RELAY_voidSetPin(&NodeRELAY);
 8001bb8:	f001 bccc 	b.w	8003554 <RELAY_voidSetPin>
	else if (strcmp(commandPtr->command, "DUR") == 0) {
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	4915      	ldr	r1, [pc, #84]	; (8001c14 <CommandHandling+0xe8>)
 8001bc0:	f7fe fac6 	bl	8000150 <strcmp>
 8001bc4:	b960      	cbnz	r0, 8001be0 <CommandHandling+0xb4>
		if (TempSensorID == commandPtr->nodeID) {
 8001bc6:	7923      	ldrb	r3, [r4, #4]
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d103      	bne.n	8001bd4 <CommandHandling+0xa8>
				LM35_voidGetTemperature(&NodeTemp);
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <CommandHandling+0xd4>)
 8001bce:	f001 fc75 	bl	80034bc <LM35_voidGetTemperature>
				cJSONOPtr = generateJSONObjectTemp(&NodeTemp);
 8001bd2:	e7b9      	b.n	8001b48 <CommandHandling+0x1c>
			} else if (LDRSensorID == commandPtr->nodeID) {
 8001bd4:	2b81      	cmp	r3, #129	; 0x81
 8001bd6:	d10f      	bne.n	8001bf8 <CommandHandling+0xcc>
				LDR_voidGetLightingIntensity(&NodeLDR);
 8001bd8:	480a      	ldr	r0, [pc, #40]	; (8001c04 <CommandHandling+0xd8>)
 8001bda:	f001 fc51 	bl	8003480 <LDR_voidGetLightingIntensity>
				cJSONOPtr = generateJSONObjectTemp(&NodeLDR);
 8001bde:	e7bf      	b.n	8001b60 <CommandHandling+0x34>
	else if (strcmp(commandPtr->command, "STA") == 0) {
 8001be0:	4628      	mov	r0, r5
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <CommandHandling+0xec>)
 8001be4:	f7fe fab4 	bl	8000150 <strcmp>
 8001be8:	b930      	cbnz	r0, 8001bf8 <CommandHandling+0xcc>
		if (TempSensorID == commandPtr->nodeID) {
 8001bea:	7923      	ldrb	r3, [r4, #4]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d0ab      	beq.n	8001b48 <CommandHandling+0x1c>
				} else if (LDRSensorID == commandPtr->nodeID) {
 8001bf0:	2b81      	cmp	r3, #129	; 0x81
 8001bf2:	d0b5      	beq.n	8001b60 <CommandHandling+0x34>
				else if (RelayID == commandPtr->nodeID) {
 8001bf4:	2b50      	cmp	r3, #80	; 0x50
 8001bf6:	d0ba      	beq.n	8001b6e <CommandHandling+0x42>
}
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08006f96 	.word	0x08006f96
 8001c00:	20000214 	.word	0x20000214
 8001c04:	20000204 	.word	0x20000204
 8001c08:	2000020c 	.word	0x2000020c
 8001c0c:	08006f9a 	.word	0x08006f9a
 8001c10:	08006f9e 	.word	0x08006f9e
 8001c14:	08006fa2 	.word	0x08006fa2
 8001c18:	08006fa6 	.word	0x08006fa6

08001c1c <main>:
{
 8001c1c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8001c1e:	f000 f9c5 	bl	8001fac <HAL_Init>
  SystemClock_Config();
 8001c22:	f7ff ff18 	bl	8001a56 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	2210      	movs	r2, #16
 8001c28:	2100      	movs	r1, #0
 8001c2a:	a802      	add	r0, sp, #8
 8001c2c:	f002 fd9f 	bl	800476e <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <main+0xf0>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c38:	4835      	ldr	r0, [pc, #212]	; (8001d10 <main+0xf4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	619a      	str	r2, [r3, #24]
 8001c40:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	f002 0220 	and.w	r2, r2, #32
 8001c48:	9200      	str	r2, [sp, #0]
 8001c4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c62:	f000 fd2d 	bl	80026c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6a:	e9cd 3602 	strd	r3, r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	4827      	ldr	r0, [pc, #156]	; (8001d10 <main+0xf4>)
 8001c72:	a902      	add	r1, sp, #8
  hadc1.Instance = ADC1;
 8001c74:	4c27      	ldr	r4, [pc, #156]	; (8001d14 <main+0xf8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	e9cd 5304 	strd	r5, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f000 fc4b 	bl	8002514 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <main+0xfc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c80:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001c82:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c84:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c88:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8001c8c:	9504      	str	r5, [sp, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c8e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c90:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c94:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c96:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c98:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c9a:	f000 faf1 	bl	8002280 <HAL_ADC_Init>
 8001c9e:	b108      	cbz	r0, 8001ca4 <main+0x88>
 8001ca0:	b672      	cpsid	i
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <main+0x86>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ca4:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ca6:	9004      	str	r0, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca8:	a902      	add	r1, sp, #8
 8001caa:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cac:	e9cd 3602 	strd	r3, r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	f000 f9a4 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8001cb4:	b108      	cbz	r0, 8001cba <main+0x9e>
 8001cb6:	b672      	cpsid	i
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <main+0x9c>
  huart1.Init.BaudRate = 9600;
 8001cba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8001cbe:	4c17      	ldr	r4, [pc, #92]	; (8001d1c <main+0x100>)
  huart1.Init.BaudRate = 9600;
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <main+0x104>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.BaudRate = 9600;
 8001cc6:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cca:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ccc:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd2:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f001 f88b 	bl	8002df0 <HAL_UART_Init>
 8001cda:	4605      	mov	r5, r0
 8001cdc:	b108      	cbz	r0, 8001ce2 <main+0xc6>
 8001cde:	b672      	cpsid	i
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <main+0xc4>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <main+0x108>)
 8001ce4:	4f10      	ldr	r7, [pc, #64]	; (8001d28 <main+0x10c>)
 8001ce6:	7819      	ldrb	r1, [r3, #0]
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4632      	mov	r2, r6
 8001cec:	4439      	add	r1, r7
 8001cee:	f001 fac6 	bl	800327e <HAL_UART_Receive_IT>
	  if (dataReceived)
 8001cf2:	4c0e      	ldr	r4, [pc, #56]	; (8001d2c <main+0x110>)
 8001cf4:	7823      	ldrb	r3, [r4, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0fc      	beq.n	8001cf4 <main+0xd8>
	  		parse_json_command(rxBuffer,&test);
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	a902      	add	r1, sp, #8
	  		dataReceived = 0;
 8001cfe:	7025      	strb	r5, [r4, #0]
	  		parse_json_command(rxBuffer,&test);
 8001d00:	f001 fb34 	bl	800336c <parse_json_command>
	  		CommandHandling(&test);
 8001d04:	a802      	add	r0, sp, #8
 8001d06:	f7ff ff11 	bl	8001b2c <CommandHandling>
 8001d0a:	e7f3      	b.n	8001cf4 <main+0xd8>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	20000250 	.word	0x20000250
 8001d18:	40012400 	.word	0x40012400
 8001d1c:	20000280 	.word	0x20000280
 8001d20:	40013800 	.word	0x40013800
 8001d24:	200002fa 	.word	0x200002fa
 8001d28:	200002c8 	.word	0x200002c8
 8001d2c:	2000024e 	.word	0x2000024e

08001d30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_MspInit+0x2c>)
{
 8001d32:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	f002 0201 	and.w	r2, r2, #1
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d4c:	61da      	str	r2, [r3, #28]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d58:	b002      	add	sp, #8
 8001d5a:	4770      	bx	lr
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4604      	mov	r4, r0
 8001d64:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	2210      	movs	r2, #16
 8001d68:	2100      	movs	r1, #0
 8001d6a:	a802      	add	r0, sp, #8
 8001d6c:	f002 fcff 	bl	800476e <memset>
  if(hadc->Instance==ADC1)
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_ADC_MspInit+0x54>)
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d11b      	bne.n	8001db0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d78:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001d7c:	699a      	ldr	r2, [r3, #24]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	480e      	ldr	r0, [pc, #56]	; (8001db8 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d8a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	f042 0204 	orr.w	r2, r2, #4
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9c:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f000 fbb2 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db0:	b006      	add	sp, #24
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	40012400 	.word	0x40012400
 8001db8:	40010800 	.word	0x40010800

08001dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	a802      	add	r0, sp, #8
 8001dc8:	f002 fcd1 	bl	800476e <memset>
  if(huart->Instance==USART1)
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_MspInit+0x80>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d130      	bne.n	8001e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001dd8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	4819      	ldr	r0, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	f042 0204 	orr.w	r2, r2, #4
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f000 fb80 	bl	8002514 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <HAL_UART_MspInit+0x84>)
 8001e1a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f000 fb77 	bl	8002514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e26:	2025      	movs	r0, #37	; 0x25
 8001e28:	4622      	mov	r2, r4
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	f000 fab8 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e30:	2025      	movs	r0, #37	; 0x25
 8001e32:	f000 fae5 	bl	8002400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e36:	b006      	add	sp, #24
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40010800 	.word	0x40010800

08001e44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler>

08001e46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler>

08001e48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler>

08001e4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler>

08001e4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>

08001e4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 b8bc 	b.w	8001fd0 <HAL_IncTick>

08001e58 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e58:	4801      	ldr	r0, [pc, #4]	; (8001e60 <USART1_IRQHandler+0x8>)
 8001e5a:	f001 b8ad 	b.w	8002fb8 <HAL_UART_IRQHandler>
 8001e5e:	bf00      	nop
 8001e60:	20000280 	.word	0x20000280

08001e64 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e64:	2001      	movs	r0, #1
 8001e66:	4770      	bx	lr

08001e68 <_kill>:

int _kill(int pid, int sig)
{
 8001e68:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e6a:	f002 fd0d 	bl	8004888 <__errno>
 8001e6e:	2316      	movs	r3, #22
 8001e70:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e72:	f04f 30ff 	mov.w	r0, #4294967295
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001e7a:	f002 fd05 	bl	8004888 <__errno>
 8001e7e:	2316      	movs	r3, #22
 8001e80:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001e82:	e7fe      	b.n	8001e82 <_exit+0xa>

08001e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	460d      	mov	r5, r1
 8001e88:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	460e      	mov	r6, r1
 8001e8c:	1b73      	subs	r3, r6, r5
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	dc01      	bgt.n	8001e96 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001e92:	4620      	mov	r0, r4
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001e96:	f3af 8000 	nop.w
 8001e9a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	e7f5      	b.n	8001e8c <_read+0x8>

08001ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	460e      	mov	r6, r1
 8001ea8:	1b73      	subs	r3, r6, r5
 8001eaa:	429c      	cmp	r4, r3
 8001eac:	dc01      	bgt.n	8001eb2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001eae:	4620      	mov	r0, r4
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001eb2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001eb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	e7f5      	b.n	8001ea8 <_write+0x8>

08001ebc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	4770      	bx	lr

08001ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001ec6:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001ec8:	604b      	str	r3, [r1, #4]
}
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ecc:	2001      	movs	r0, #1
 8001ece:	4770      	bx	lr

08001ed0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4770      	bx	lr

08001ed4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <_sbrk+0x30>)
{
 8001ed6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001ed8:	6811      	ldr	r1, [r2, #0]
{
 8001eda:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001edc:	b909      	cbnz	r1, 8001ee2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <_sbrk+0x34>)
 8001ee0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	6810      	ldr	r0, [r2, #0]
 8001ee4:	4909      	ldr	r1, [pc, #36]	; (8001f0c <_sbrk+0x38>)
 8001ee6:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <_sbrk+0x3c>)
 8001ee8:	4403      	add	r3, r0
 8001eea:	1b09      	subs	r1, r1, r4
 8001eec:	428b      	cmp	r3, r1
 8001eee:	d906      	bls.n	8001efe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001ef0:	f002 fcca 	bl	8004888 <__errno>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001efc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001efe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001f00:	e7fc      	b.n	8001efc <_sbrk+0x28>
 8001f02:	bf00      	nop
 8001f04:	200002fc 	.word	0x200002fc
 8001f08:	20000450 	.word	0x20000450
 8001f0c:	20002800 	.word	0x20002800
 8001f10:	00000400 	.word	0x00000400

08001f14 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	4770      	bx	lr
	...

08001f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f18:	f7ff fffc 	bl	8001f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f1e:	490c      	ldr	r1, [pc, #48]	; (8001f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f34:	4c09      	ldr	r4, [pc, #36]	; (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f002 fca7 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f46:	f7ff fe69 	bl	8001c1c <main>
  bx lr
 8001f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f54:	08007420 	.word	0x08007420
  ldr r2, =_sbss
 8001f58:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f5c:	20000450 	.word	0x20000450

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>
	...

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_InitTick+0x3c>)
{
 8001f68:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_InitTick+0x40>)
 8001f76:	6810      	ldr	r0, [r2, #0]
 8001f78:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f7c:	f000 fa4e 	bl	800241c <HAL_SYSTICK_Config>
 8001f80:	4604      	mov	r4, r0
 8001f82:	b958      	cbnz	r0, 8001f9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f84:	2d0f      	cmp	r5, #15
 8001f86:	d809      	bhi.n	8001f9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f000 fa06 	bl	80023a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4620      	mov	r0, r4
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_InitTick+0x44>)
 8001f98:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	e7fc      	b.n	8001f9a <HAL_InitTick+0x36>
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000014 	.word	0x20000014

08001fac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_Init+0x20>)
{
 8001fae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fba:	f000 f9df 	bl	800237c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f7ff ffd0 	bl	8001f64 <HAL_InitTick>
  HAL_MspInit();
 8001fc4:	f7ff feb4 	bl	8001d30 <HAL_MspInit>
}
 8001fc8:	2000      	movs	r0, #0
 8001fca:	bd08      	pop	{r3, pc}
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <HAL_IncTick+0x10>)
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_IncTick+0x14>)
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	440b      	add	r3, r1
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000300 	.word	0x20000300
 8001fe4:	20000010 	.word	0x20000010

08001fe8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fe8:	4b01      	ldr	r3, [pc, #4]	; (8001ff0 <HAL_GetTick+0x8>)
 8001fea:	6818      	ldr	r0, [r3, #0]
}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000300 	.word	0x20000300

08001ff4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ff4:	6803      	ldr	r3, [r0, #0]
 8001ff6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001ffc:	2300      	movs	r3, #0
{ 
 8001ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002000:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002002:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8002006:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002008:	2b01      	cmp	r3, #1
 800200a:	d06c      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0xea>
 800200c:	2301      	movs	r3, #1
 800200e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002012:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002014:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002016:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002018:	6808      	ldr	r0, [r1, #0]
 800201a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800201e:	d822      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002020:	261f      	movs	r6, #31
 8002022:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002024:	3b05      	subs	r3, #5
 8002026:	409e      	lsls	r6, r3
 8002028:	ea25 0506 	bic.w	r5, r5, r6
 800202c:	fa00 f303 	lsl.w	r3, r0, r3
 8002030:	432b      	orrs	r3, r5
 8002032:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002034:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002036:	688b      	ldr	r3, [r1, #8]
 8002038:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800203c:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002040:	d929      	bls.n	8002096 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002042:	68d6      	ldr	r6, [r2, #12]
 8002044:	3d1e      	subs	r5, #30
 8002046:	40a9      	lsls	r1, r5
 8002048:	ea26 0101 	bic.w	r1, r6, r1
 800204c:	40ab      	lsls	r3, r5
 800204e:	430b      	orrs	r3, r1
 8002050:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002052:	f1a0 0310 	sub.w	r3, r0, #16
 8002056:	2b01      	cmp	r3, #1
 8002058:	d925      	bls.n	80020a6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	2300      	movs	r3, #0
 800205e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002062:	b002      	add	sp, #8
 8002064:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002066:	2d0c      	cmp	r5, #12
 8002068:	f04f 051f 	mov.w	r5, #31
 800206c:	d809      	bhi.n	8002082 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800206e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002070:	3b23      	subs	r3, #35	; 0x23
 8002072:	409d      	lsls	r5, r3
 8002074:	ea26 0505 	bic.w	r5, r6, r5
 8002078:	fa00 f303 	lsl.w	r3, r0, r3
 800207c:	432b      	orrs	r3, r5
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	e7d8      	b.n	8002034 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002082:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002084:	3b41      	subs	r3, #65	; 0x41
 8002086:	409d      	lsls	r5, r3
 8002088:	ea26 0505 	bic.w	r5, r6, r5
 800208c:	fa00 f303 	lsl.w	r3, r0, r3
 8002090:	432b      	orrs	r3, r5
 8002092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002094:	e7ce      	b.n	8002034 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002096:	6910      	ldr	r0, [r2, #16]
 8002098:	40a9      	lsls	r1, r5
 800209a:	ea20 0101 	bic.w	r1, r0, r1
 800209e:	40ab      	lsls	r3, r5
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6113      	str	r3, [r2, #16]
 80020a4:	e7d9      	b.n	800205a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_ADC_ConfigChannel+0xf0>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d116      	bne.n	80020da <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020ac:	6893      	ldr	r3, [r2, #8]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	d4d3      	bmi.n	800205a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020b2:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ba:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020bc:	d1cd      	bne.n	800205a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_ADC_ConfigChannel+0xf4>)
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_ADC_ConfigChannel+0xf8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020c8:	220a      	movs	r2, #10
 80020ca:	4353      	muls	r3, r2
            wait_loop_index--;
 80020cc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0c2      	beq.n	800205a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80020d4:	9b01      	ldr	r3, [sp, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	e7f8      	b.n	80020cc <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80020dc:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80020e4:	e7ba      	b.n	800205c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80020e6:	2002      	movs	r0, #2
 80020e8:	e7bb      	b.n	8002062 <HAL_ADC_ConfigChannel+0x66>
 80020ea:	bf00      	nop
 80020ec:	40012400 	.word	0x40012400
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	000f4240 	.word	0x000f4240

080020f8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80020f8:	2300      	movs	r3, #0
{
 80020fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80020fc:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020fe:	6803      	ldr	r3, [r0, #0]
{
 8002100:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	07d2      	lsls	r2, r2, #31
 8002106:	d502      	bpl.n	800210e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
}
 800210a:	b003      	add	sp, #12
 800210c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <ADC_Enable+0x70>)
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <ADC_Enable+0x74>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002120:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002122:	9b01      	ldr	r3, [sp, #4]
 8002124:	b9e3      	cbnz	r3, 8002160 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002126:	f7ff ff5f 	bl	8001fe8 <HAL_GetTick>
 800212a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	d4e9      	bmi.n	8002108 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002134:	f7ff ff58 	bl	8001fe8 <HAL_GetTick>
 8002138:	1b40      	subs	r0, r0, r5
 800213a:	2802      	cmp	r0, #2
 800213c:	d9f6      	bls.n	800212c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f013 0301 	ands.w	r3, r3, #1
 8002146:	d1f1      	bne.n	800212c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002148:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800214a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	f042 0210 	orr.w	r2, r2, #16
 8002150:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002154:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800215e:	e7d4      	b.n	800210a <ADC_Enable+0x12>
      wait_loop_index--;
 8002160:	9b01      	ldr	r3, [sp, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	e7dc      	b.n	8002120 <ADC_Enable+0x28>
 8002166:	bf00      	nop
 8002168:	2000000c 	.word	0x2000000c
 800216c:	000f4240 	.word	0x000f4240

08002170 <HAL_ADC_Start>:
{
 8002170:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002172:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002176:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002178:	2b01      	cmp	r3, #1
 800217a:	d054      	beq.n	8002226 <HAL_ADC_Start+0xb6>
 800217c:	2301      	movs	r3, #1
 800217e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002182:	f7ff ffb9 	bl	80020f8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002186:	2800      	cmp	r0, #0
 8002188:	d149      	bne.n	800221e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800218a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	4293      	cmp	r3, r2
 80021a0:	d104      	bne.n	80021ac <HAL_ADC_Start+0x3c>
 80021a2:	4923      	ldr	r1, [pc, #140]	; (8002230 <HAL_ADC_Start+0xc0>)
 80021a4:	684a      	ldr	r2, [r1, #4]
 80021a6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80021aa:	d12e      	bne.n	800220a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021b2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021b6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021b8:	bf41      	itttt	mi
 80021ba:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80021bc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80021c0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80021c4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021cc:	bf1c      	itt	ne
 80021ce:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80021d0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021dc:	f06f 0202 	mvn.w	r2, #2
 80021e0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80021e8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80021ec:	d113      	bne.n	8002216 <HAL_ADC_Start+0xa6>
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_ADC_Start+0xbc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021f4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80021f8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021fa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800220c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002210:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002212:	684a      	ldr	r2, [r1, #4]
 8002214:	e7cf      	b.n	80021b6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800221c:	e7f3      	b.n	8002206 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800221e:	2300      	movs	r3, #0
 8002220:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002224:	e7f0      	b.n	8002208 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8002226:	2002      	movs	r0, #2
 8002228:	e7ee      	b.n	8002208 <HAL_ADC_Start+0x98>
 800222a:	bf00      	nop
 800222c:	40012800 	.word	0x40012800
 8002230:	40012400 	.word	0x40012400

08002234 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002234:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002236:	6803      	ldr	r3, [r0, #0]
{
 8002238:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	07d1      	lsls	r1, r2, #31
 800223e:	d401      	bmi.n	8002244 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002240:	2000      	movs	r0, #0
}
 8002242:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800224c:	f7ff fecc 	bl	8001fe8 <HAL_GetTick>
 8002250:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	07db      	lsls	r3, r3, #31
 8002258:	d5f2      	bpl.n	8002240 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225a:	f7ff fec5 	bl	8001fe8 <HAL_GetTick>
 800225e:	1b40      	subs	r0, r0, r5
 8002260:	2802      	cmp	r0, #2
 8002262:	d9f6      	bls.n	8002252 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	07da      	lsls	r2, r3, #31
 800226a:	d5f2      	bpl.n	8002252 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800227e:	e7e0      	b.n	8002242 <ADC_ConversionStop_Disable+0xe>

08002280 <HAL_ADC_Init>:
{
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002282:	4604      	mov	r4, r0
 8002284:	2800      	cmp	r0, #0
 8002286:	d06d      	beq.n	8002364 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800228a:	b923      	cbnz	r3, 8002296 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800228c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800228e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002292:	f7ff fd65 	bl	8001d60 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff ffcc 	bl	8002234 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800229c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229e:	f013 0310 	ands.w	r3, r3, #16
 80022a2:	d161      	bne.n	8002368 <HAL_ADC_Init+0xe8>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d15f      	bne.n	8002368 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022aa:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80022b0:	f022 0202 	bic.w	r2, r2, #2
 80022b4:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b8:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ba:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80022bc:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022be:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c0:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022c2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022c6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ca:	d036      	beq.n	800233a <HAL_ADC_Init+0xba>
 80022cc:	1e77      	subs	r7, r6, #1
 80022ce:	427d      	negs	r5, r7
 80022d0:	417d      	adcs	r5, r7
 80022d2:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d4:	7d27      	ldrb	r7, [r4, #20]
 80022d6:	2f01      	cmp	r7, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022da:	bb82      	cbnz	r2, 800233e <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022dc:	69a2      	ldr	r2, [r4, #24]
 80022de:	3a01      	subs	r2, #1
 80022e0:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80022e4:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80022e8:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022ea:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80022ee:	6857      	ldr	r7, [r2, #4]
 80022f0:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 80022f4:	ea45 0507 	orr.w	r5, r5, r7
 80022f8:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80022fa:	6897      	ldr	r7, [r2, #8]
 80022fc:	4d1d      	ldr	r5, [pc, #116]	; (8002374 <HAL_ADC_Init+0xf4>)
 80022fe:	ea05 0507 	and.w	r5, r5, r7
 8002302:	ea45 0501 	orr.w	r5, r5, r1
 8002306:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002308:	d001      	beq.n	800230e <HAL_ADC_Init+0x8e>
 800230a:	2e01      	cmp	r6, #1
 800230c:	d102      	bne.n	8002314 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	3b01      	subs	r3, #1
 8002312:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002314:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002316:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800231a:	432b      	orrs	r3, r5
 800231c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_ADC_Init+0xf8>)
 8002322:	4013      	ands	r3, r2
 8002324:	4299      	cmp	r1, r3
 8002326:	d113      	bne.n	8002350 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002328:	2300      	movs	r3, #0
 800232a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800232c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800233a:	4635      	mov	r5, r6
 800233c:	e7ca      	b.n	80022d4 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800234e:	e7cb      	b.n	80022e8 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8002350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002352:	f023 0312 	bic.w	r3, r3, #18
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
 8002366:	e7e7      	b.n	8002338 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002370:	e7f8      	b.n	8002364 <HAL_ADC_Init+0xe4>
 8002372:	bf00      	nop
 8002374:	ffe1f7fd 	.word	0xffe1f7fd
 8002378:	ff1f0efe 	.word	0xff1f0efe

0800237c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800237e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800238a:	0412      	lsls	r2, r2, #16
 800238c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002398:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b530      	push	{r4, r5, lr}
 80023a4:	68dc      	ldr	r4, [r3, #12]
 80023a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	bf28      	it	cs
 80023b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023bc:	bf94      	ite	ls
 80023be:	2400      	movls	r4, #0
 80023c0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c2:	fa05 f303 	lsl.w	r3, r5, r3
 80023c6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ca:	40a5      	lsls	r5, r4
 80023cc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80023d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	bfac      	ite	ge
 80023da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	4a07      	ldrlt	r2, [pc, #28]	; (80023fc <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	bfab      	itete	ge
 80023e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023f6:	bd30      	pop	{r4, r5, pc}
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	e000ed14 	.word	0xe000ed14

08002400 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002400:	2800      	cmp	r0, #0
 8002402:	db07      	blt.n	8002414 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002404:	2301      	movs	r3, #1
 8002406:	0941      	lsrs	r1, r0, #5
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_NVIC_EnableIRQ+0x18>)
 800240a:	f000 001f 	and.w	r0, r0, #31
 800240e:	4083      	lsls	r3, r0
 8002410:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	3801      	subs	r0, #1
 800241e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002422:	d20b      	bcs.n	800243c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002424:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	21f0      	movs	r1, #240	; 0xf0
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002432:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002434:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002436:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002438:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800243c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002444:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002448:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244a:	2a02      	cmp	r2, #2
 800244c:	d006      	beq.n	800245c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244e:	2204      	movs	r2, #4
 8002450:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8002452:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800245a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800245e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	f021 010e 	bic.w	r1, r1, #14
 8002466:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	f021 0101 	bic.w	r1, r1, #1
 800246e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002470:	2101      	movs	r1, #1
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	6042      	str	r2, [r0, #4]
  return status; 
 800247a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800247c:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8002480:	e7e8      	b.n	8002454 <HAL_DMA_Abort+0x10>
	...

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002484:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002486:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248e:	2304      	movs	r3, #4
 8002490:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002492:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002494:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002496:	6803      	ldr	r3, [r0, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_DMA_Abort_IT+0x88>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <HAL_DMA_Abort_IT+0x6a>
 80024ae:	3214      	adds	r2, #20
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d01e      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x6e>
 80024b4:	3214      	adds	r2, #20
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x72>
 80024ba:	3214      	adds	r2, #20
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <HAL_DMA_Abort_IT+0x78>
 80024c0:	3214      	adds	r2, #20
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_Abort_IT+0x7e>
 80024c6:	3214      	adds	r2, #20
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf0c      	ite	eq
 80024cc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80024d0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80024d6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80024da:	2301      	movs	r3, #1
 80024dc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80024e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80024e2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80024e6:	b17b      	cbz	r3, 8002508 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80024e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	4620      	mov	r0, r4
 80024ec:	e7d2      	b.n	8002494 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024ee:	2301      	movs	r3, #1
 80024f0:	e7f0      	b.n	80024d4 <HAL_DMA_Abort_IT+0x50>
 80024f2:	2310      	movs	r3, #16
 80024f4:	e7ee      	b.n	80024d4 <HAL_DMA_Abort_IT+0x50>
 80024f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fa:	e7eb      	b.n	80024d4 <HAL_DMA_Abort_IT+0x50>
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	e7e8      	b.n	80024d4 <HAL_DMA_Abort_IT+0x50>
 8002502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002506:	e7e5      	b.n	80024d4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	4618      	mov	r0, r3
 800250a:	e7c3      	b.n	8002494 <HAL_DMA_Abort_IT+0x10>
 800250c:	40020008 	.word	0x40020008
 8002510:	40020000 	.word	0x40020000

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002518:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800251a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800251c:	4f61      	ldr	r7, [pc, #388]	; (80026a4 <HAL_GPIO_Init+0x190>)
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8002520:	f8df c188 	ldr.w	ip, [pc, #392]	; 80026ac <HAL_GPIO_Init+0x198>
 8002524:	f8df e188 	ldr.w	lr, [pc, #392]	; 80026b0 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	680d      	ldr	r5, [r1, #0]
 800252a:	fa35 f406 	lsrs.w	r4, r5, r6
 800252e:	d102      	bne.n	8002536 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002530:	b003      	add	sp, #12
 8002532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002536:	f04f 0801 	mov.w	r8, #1
 800253a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002542:	ea38 0505 	bics.w	r5, r8, r5
 8002546:	d176      	bne.n	8002636 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8002548:	684d      	ldr	r5, [r1, #4]
 800254a:	2d03      	cmp	r5, #3
 800254c:	d807      	bhi.n	800255e <HAL_GPIO_Init+0x4a>
 800254e:	3d01      	subs	r5, #1
 8002550:	2d02      	cmp	r5, #2
 8002552:	f200 8081 	bhi.w	8002658 <HAL_GPIO_Init+0x144>
 8002556:	e8df f005 	tbb	[pc, r5]
 800255a:	9691      	.short	0x9691
 800255c:	9c          	.byte	0x9c
 800255d:	00          	.byte	0x00
 800255e:	2d12      	cmp	r5, #18
 8002560:	f000 8094 	beq.w	800268c <HAL_GPIO_Init+0x178>
 8002564:	d869      	bhi.n	800263a <HAL_GPIO_Init+0x126>
 8002566:	2d11      	cmp	r5, #17
 8002568:	f000 808a 	beq.w	8002680 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800256c:	2cff      	cmp	r4, #255	; 0xff
 800256e:	bf98      	it	ls
 8002570:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002572:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002576:	bf88      	it	hi
 8002578:	f100 0a04 	addhi.w	sl, r0, #4
 800257c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002580:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002584:	bf88      	it	hi
 8002586:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002588:	fa09 fb05 	lsl.w	fp, r9, r5
 800258c:	ea28 080b 	bic.w	r8, r8, fp
 8002590:	fa02 f505 	lsl.w	r5, r2, r5
 8002594:	ea48 0505 	orr.w	r5, r8, r5
 8002598:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80025a0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80025a4:	d047      	beq.n	8002636 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a6:	69bd      	ldr	r5, [r7, #24]
 80025a8:	f026 0803 	bic.w	r8, r6, #3
 80025ac:	f045 0501 	orr.w	r5, r5, #1
 80025b0:	61bd      	str	r5, [r7, #24]
 80025b2:	69bd      	ldr	r5, [r7, #24]
 80025b4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80025b8:	f005 0501 	and.w	r5, r5, #1
 80025bc:	9501      	str	r5, [sp, #4]
 80025be:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80025cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025d0:	fa09 f90b 	lsl.w	r9, r9, fp
 80025d4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025d8:	4d36      	ldr	r5, [pc, #216]	; (80026b4 <HAL_GPIO_Init+0x1a0>)
 80025da:	42a8      	cmp	r0, r5
 80025dc:	d05d      	beq.n	800269a <HAL_GPIO_Init+0x186>
 80025de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e2:	42a8      	cmp	r0, r5
 80025e4:	d05b      	beq.n	800269e <HAL_GPIO_Init+0x18a>
 80025e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025ea:	42a8      	cmp	r0, r5
 80025ec:	bf0c      	ite	eq
 80025ee:	2502      	moveq	r5, #2
 80025f0:	2503      	movne	r5, #3
 80025f2:	fa05 f50b 	lsl.w	r5, r5, fp
 80025f6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80025fa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80025fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002604:	bf14      	ite	ne
 8002606:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002608:	43a5      	biceq	r5, r4
 800260a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800260c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002612:	bf14      	ite	ne
 8002614:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002616:	43a5      	biceq	r5, r4
 8002618:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800261a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800261c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002620:	bf14      	ite	ne
 8002622:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002624:	43a5      	biceq	r5, r4
 8002626:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002628:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800262e:	bf14      	ite	ne
 8002630:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002632:	43a5      	biceq	r5, r4
 8002634:	601d      	str	r5, [r3, #0]
	position++;
 8002636:	3601      	adds	r6, #1
 8002638:	e776      	b.n	8002528 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800263a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80026b8 <HAL_GPIO_Init+0x1a4>
 800263e:	454d      	cmp	r5, r9
 8002640:	d00a      	beq.n	8002658 <HAL_GPIO_Init+0x144>
 8002642:	d815      	bhi.n	8002670 <HAL_GPIO_Init+0x15c>
 8002644:	4575      	cmp	r5, lr
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x144>
 8002648:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800264c:	454d      	cmp	r5, r9
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x144>
 8002650:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002654:	454d      	cmp	r5, r9
 8002656:	d189      	bne.n	800256c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002658:	688a      	ldr	r2, [r1, #8]
 800265a:	b1e2      	cbz	r2, 8002696 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800265c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800265e:	bf08      	it	eq
 8002660:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002664:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002668:	bf18      	it	ne
 800266a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800266e:	e77d      	b.n	800256c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002670:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80026bc <HAL_GPIO_Init+0x1a8>
 8002674:	454d      	cmp	r5, r9
 8002676:	d0ef      	beq.n	8002658 <HAL_GPIO_Init+0x144>
 8002678:	4565      	cmp	r5, ip
 800267a:	e7ec      	b.n	8002656 <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800267c:	68ca      	ldr	r2, [r1, #12]
          break;
 800267e:	e775      	b.n	800256c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002680:	68ca      	ldr	r2, [r1, #12]
 8002682:	3204      	adds	r2, #4
          break;
 8002684:	e772      	b.n	800256c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002686:	68ca      	ldr	r2, [r1, #12]
 8002688:	3208      	adds	r2, #8
          break;
 800268a:	e76f      	b.n	800256c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800268c:	68ca      	ldr	r2, [r1, #12]
 800268e:	320c      	adds	r2, #12
          break;
 8002690:	e76c      	b.n	800256c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002692:	2200      	movs	r2, #0
 8002694:	e76a      	b.n	800256c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002696:	2204      	movs	r2, #4
 8002698:	e768      	b.n	800256c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800269a:	2500      	movs	r5, #0
 800269c:	e7a9      	b.n	80025f2 <HAL_GPIO_Init+0xde>
 800269e:	2501      	movs	r5, #1
 80026a0:	e7a7      	b.n	80025f2 <HAL_GPIO_Init+0xde>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010400 	.word	0x40010400
 80026ac:	10320000 	.word	0x10320000
 80026b0:	10120000 	.word	0x10120000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	10220000 	.word	0x10220000
 80026bc:	10310000 	.word	0x10310000

080026c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	b10a      	cbz	r2, 80026c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c2:	6101      	str	r1, [r0, #16]
  }
}
 80026c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	0409      	lsls	r1, r1, #16
 80026c8:	e7fb      	b.n	80026c2 <HAL_GPIO_WritePin+0x2>
	...

080026cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	4605      	mov	r5, r0
 80026d2:	b338      	cbz	r0, 8002724 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	07db      	lsls	r3, r3, #31
 80026d8:	d410      	bmi.n	80026fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	682b      	ldr	r3, [r5, #0]
 80026dc:	079f      	lsls	r7, r3, #30
 80026de:	d45e      	bmi.n	800279e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	0719      	lsls	r1, r3, #28
 80026e4:	f100 8095 	bmi.w	8002812 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	075a      	lsls	r2, r3, #29
 80026ec:	f100 80c1 	bmi.w	8002872 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	69e8      	ldr	r0, [r5, #28]
 80026f2:	2800      	cmp	r0, #0
 80026f4:	f040 812c 	bne.w	8002950 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80026f8:	2000      	movs	r0, #0
 80026fa:	e029      	b.n	8002750 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	4c90      	ldr	r4, [pc, #576]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80026fe:	6863      	ldr	r3, [r4, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b04      	cmp	r3, #4
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d10a      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
 8002712:	6863      	ldr	r3, [r4, #4]
 8002714:	03de      	lsls	r6, r3, #15
 8002716:	d507      	bpl.n	8002728 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	039c      	lsls	r4, r3, #14
 800271c:	d5dd      	bpl.n	80026da <HAL_RCC_OscConfig+0xe>
 800271e:	686b      	ldr	r3, [r5, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1da      	bne.n	80026da <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	686b      	ldr	r3, [r5, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d112      	bne.n	8002756 <HAL_RCC_OscConfig+0x8a>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002736:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002738:	f7ff fc56 	bl	8001fe8 <HAL_GetTick>
 800273c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	0398      	lsls	r0, r3, #14
 8002742:	d4ca      	bmi.n	80026da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fc50 	bl	8001fe8 <HAL_GetTick>
 8002748:	1b80      	subs	r0, r0, r6
 800274a:	2864      	cmp	r0, #100	; 0x64
 800274c:	d9f7      	bls.n	800273e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
}
 8002750:	b002      	add	sp, #8
 8002752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	b99b      	cbnz	r3, 8002780 <HAL_RCC_OscConfig+0xb4>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6023      	str	r3, [r4, #0]
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002768:	f7ff fc3e 	bl	8001fe8 <HAL_GetTick>
 800276c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	0399      	lsls	r1, r3, #14
 8002772:	d5b2      	bpl.n	80026da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fc38 	bl	8001fe8 <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	2864      	cmp	r0, #100	; 0x64
 800277c:	d9f7      	bls.n	800276e <HAL_RCC_OscConfig+0xa2>
 800277e:	e7e6      	b.n	800274e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	d103      	bne.n	8002790 <HAL_RCC_OscConfig+0xc4>
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	e7cf      	b.n	8002730 <HAL_RCC_OscConfig+0x64>
 8002790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	e7cb      	b.n	8002736 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279e:	4c68      	ldr	r4, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027a0:	6863      	ldr	r3, [r4, #4]
 80027a2:	f013 0f0c 	tst.w	r3, #12
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a8:	6863      	ldr	r3, [r4, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d110      	bne.n	80027d4 <HAL_RCC_OscConfig+0x108>
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	03da      	lsls	r2, r3, #15
 80027b6:	d40d      	bmi.n	80027d4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	079b      	lsls	r3, r3, #30
 80027bc:	d502      	bpl.n	80027c4 <HAL_RCC_OscConfig+0xf8>
 80027be:	692b      	ldr	r3, [r5, #16]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d1af      	bne.n	8002724 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	696a      	ldr	r2, [r5, #20]
 80027c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	e785      	b.n	80026e0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d4:	692a      	ldr	r2, [r5, #16]
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x278>)
 80027d8:	b16a      	cbz	r2, 80027f6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027de:	f7ff fc03 	bl	8001fe8 <HAL_GetTick>
 80027e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	079f      	lsls	r7, r3, #30
 80027e8:	d4ec      	bmi.n	80027c4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff fbfd 	bl	8001fe8 <HAL_GetTick>
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	2802      	cmp	r0, #2
 80027f2:	d9f7      	bls.n	80027e4 <HAL_RCC_OscConfig+0x118>
 80027f4:	e7ab      	b.n	800274e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80027f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027f8:	f7ff fbf6 	bl	8001fe8 <HAL_GetTick>
 80027fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	0798      	lsls	r0, r3, #30
 8002802:	f57f af6d 	bpl.w	80026e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7ff fbef 	bl	8001fe8 <HAL_GetTick>
 800280a:	1b80      	subs	r0, r0, r6
 800280c:	2802      	cmp	r0, #2
 800280e:	d9f6      	bls.n	80027fe <HAL_RCC_OscConfig+0x132>
 8002810:	e79d      	b.n	800274e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	69aa      	ldr	r2, [r5, #24]
 8002814:	4e4a      	ldr	r6, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCC_OscConfig+0x278>)
 8002818:	b1e2      	cbz	r2, 8002854 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800281a:	2201      	movs	r2, #1
 800281c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002820:	f7ff fbe2 	bl	8001fe8 <HAL_GetTick>
 8002824:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002828:	079b      	lsls	r3, r3, #30
 800282a:	d50d      	bpl.n	8002848 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002830:	4b45      	ldr	r3, [pc, #276]	; (8002948 <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fbb3 f3f2 	udiv	r3, r3, r2
 8002838:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800283a:	bf00      	nop
  }
  while (Delay --);
 800283c:	9b01      	ldr	r3, [sp, #4]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	9201      	str	r2, [sp, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_RCC_OscConfig+0x16e>
 8002846:	e74f      	b.n	80026e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff fbce 	bl	8001fe8 <HAL_GetTick>
 800284c:	1b00      	subs	r0, r0, r4
 800284e:	2802      	cmp	r0, #2
 8002850:	d9e9      	bls.n	8002826 <HAL_RCC_OscConfig+0x15a>
 8002852:	e77c      	b.n	800274e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002854:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002858:	f7ff fbc6 	bl	8001fe8 <HAL_GetTick>
 800285c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002860:	079f      	lsls	r7, r3, #30
 8002862:	f57f af41 	bpl.w	80026e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002866:	f7ff fbbf 	bl	8001fe8 <HAL_GetTick>
 800286a:	1b00      	subs	r0, r0, r4
 800286c:	2802      	cmp	r0, #2
 800286e:	d9f6      	bls.n	800285e <HAL_RCC_OscConfig+0x192>
 8002870:	e76d      	b.n	800274e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4c33      	ldr	r4, [pc, #204]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002874:	69e3      	ldr	r3, [r4, #28]
 8002876:	00d8      	lsls	r0, r3, #3
 8002878:	d424      	bmi.n	80028c4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800287a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800287c:	69e3      	ldr	r3, [r4, #28]
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	61e3      	str	r3, [r4, #28]
 8002884:	69e3      	ldr	r3, [r4, #28]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4e2f      	ldr	r6, [pc, #188]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002890:	6833      	ldr	r3, [r6, #0]
 8002892:	05d9      	lsls	r1, r3, #23
 8002894:	d518      	bpl.n	80028c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	68eb      	ldr	r3, [r5, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d126      	bne.n	80028ea <HAL_RCC_OscConfig+0x21e>
 800289c:	6a23      	ldr	r3, [r4, #32]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028a4:	f7ff fba0 	bl	8001fe8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	6a23      	ldr	r3, [r4, #32]
 80028b0:	079b      	lsls	r3, r3, #30
 80028b2:	d53f      	bpl.n	8002934 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	f43f af1b 	beq.w	80026f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	69e3      	ldr	r3, [r4, #28]
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	61e3      	str	r3, [r4, #28]
 80028c2:	e715      	b.n	80026f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80028c4:	2700      	movs	r7, #0
 80028c6:	e7e2      	b.n	800288e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c8:	6833      	ldr	r3, [r6, #0]
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80028d0:	f7ff fb8a 	bl	8001fe8 <HAL_GetTick>
 80028d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	6833      	ldr	r3, [r6, #0]
 80028d8:	05da      	lsls	r2, r3, #23
 80028da:	d4dc      	bmi.n	8002896 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7ff fb84 	bl	8001fe8 <HAL_GetTick>
 80028e0:	eba0 0008 	sub.w	r0, r0, r8
 80028e4:	2864      	cmp	r0, #100	; 0x64
 80028e6:	d9f6      	bls.n	80028d6 <HAL_RCC_OscConfig+0x20a>
 80028e8:	e731      	b.n	800274e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ea:	b9ab      	cbnz	r3, 8002918 <HAL_RCC_OscConfig+0x24c>
 80028ec:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6223      	str	r3, [r4, #32]
 80028f8:	6a23      	ldr	r3, [r4, #32]
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002900:	f7ff fb72 	bl	8001fe8 <HAL_GetTick>
 8002904:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	6a23      	ldr	r3, [r4, #32]
 8002908:	0798      	lsls	r0, r3, #30
 800290a:	d5d3      	bpl.n	80028b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7ff fb6c 	bl	8001fe8 <HAL_GetTick>
 8002910:	1b80      	subs	r0, r0, r6
 8002912:	4540      	cmp	r0, r8
 8002914:	d9f7      	bls.n	8002906 <HAL_RCC_OscConfig+0x23a>
 8002916:	e71a      	b.n	800274e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	2b05      	cmp	r3, #5
 800291a:	6a23      	ldr	r3, [r4, #32]
 800291c:	d103      	bne.n	8002926 <HAL_RCC_OscConfig+0x25a>
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6223      	str	r3, [r4, #32]
 8002924:	e7ba      	b.n	800289c <HAL_RCC_OscConfig+0x1d0>
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6223      	str	r3, [r4, #32]
 800292c:	6a23      	ldr	r3, [r4, #32]
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	e7b6      	b.n	80028a2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff fb58 	bl	8001fe8 <HAL_GetTick>
 8002938:	1b80      	subs	r0, r0, r6
 800293a:	4540      	cmp	r0, r8
 800293c:	d9b7      	bls.n	80028ae <HAL_RCC_OscConfig+0x1e2>
 800293e:	e706      	b.n	800274e <HAL_RCC_OscConfig+0x82>
 8002940:	40021000 	.word	0x40021000
 8002944:	42420000 	.word	0x42420000
 8002948:	2000000c 	.word	0x2000000c
 800294c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002950:	4c2a      	ldr	r4, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x330>)
 8002952:	6863      	ldr	r3, [r4, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d03e      	beq.n	80029da <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	2200      	movs	r2, #0
 800295e:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x334>)
 8002960:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002962:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	d12c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002966:	f7ff fb3f 	bl	8001fe8 <HAL_GetTick>
 800296a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	0199      	lsls	r1, r3, #6
 8002970:	d420      	bmi.n	80029b4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002972:	6a2b      	ldr	r3, [r5, #32]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297a:	6862      	ldr	r2, [r4, #4]
 800297c:	68a9      	ldr	r1, [r5, #8]
 800297e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002982:	430a      	orrs	r2, r1
 8002984:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002986:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002988:	6862      	ldr	r2, [r4, #4]
 800298a:	430b      	orrs	r3, r1
 800298c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002990:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002992:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002994:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x334>)
 8002998:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800299a:	f7ff fb25 	bl	8001fe8 <HAL_GetTick>
 800299e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	019a      	lsls	r2, r3, #6
 80029a4:	f53f aea8 	bmi.w	80026f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff fb1e 	bl	8001fe8 <HAL_GetTick>
 80029ac:	1b40      	subs	r0, r0, r5
 80029ae:	2802      	cmp	r0, #2
 80029b0:	d9f6      	bls.n	80029a0 <HAL_RCC_OscConfig+0x2d4>
 80029b2:	e6cc      	b.n	800274e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff fb18 	bl	8001fe8 <HAL_GetTick>
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	2802      	cmp	r0, #2
 80029bc:	d9d6      	bls.n	800296c <HAL_RCC_OscConfig+0x2a0>
 80029be:	e6c6      	b.n	800274e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80029c0:	f7ff fb12 	bl	8001fe8 <HAL_GetTick>
 80029c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	f57f ae95 	bpl.w	80026f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7ff fb0b 	bl	8001fe8 <HAL_GetTick>
 80029d2:	1b40      	subs	r0, r0, r5
 80029d4:	2802      	cmp	r0, #2
 80029d6:	d9f6      	bls.n	80029c6 <HAL_RCC_OscConfig+0x2fa>
 80029d8:	e6b9      	b.n	800274e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029da:	2801      	cmp	r0, #1
 80029dc:	f43f aeb8 	beq.w	8002750 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80029e0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	6a2a      	ldr	r2, [r5, #32]
 80029e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80029e8:	4291      	cmp	r1, r2
 80029ea:	f47f ae9b 	bne.w	8002724 <HAL_RCC_OscConfig+0x58>
 80029ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f43f ae7f 	beq.w	80026f8 <HAL_RCC_OscConfig+0x2c>
 80029fa:	e693      	b.n	8002724 <HAL_RCC_OscConfig+0x58>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	42420000 	.word	0x42420000

08002a04 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x38>)
 8002a06:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a08:	f003 010c 	and.w	r1, r3, #12
 8002a0c:	2908      	cmp	r1, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a10:	480b      	ldr	r0, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a12:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a16:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a18:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a1a:	d509      	bpl.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a1c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a20:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a24:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x44>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a2e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x48>)
 8002a32:	4358      	muls	r0, r3
 8002a34:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002a36:	4803      	ldr	r0, [pc, #12]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08006fc2 	.word	0x08006fc2
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	08006fd2 	.word	0x08006fd2
 8002a4c:	003d0900 	.word	0x003d0900

08002a50 <HAL_RCC_ClockConfig>:
{
 8002a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a54:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a56:	4604      	mov	r4, r0
 8002a58:	b910      	cbnz	r0, 8002a60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
}
 8002a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4a44      	ldr	r2, [pc, #272]	; (8002b74 <HAL_RCC_ClockConfig+0x124>)
 8002a62:	6813      	ldr	r3, [r2, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	428b      	cmp	r3, r1
 8002a6a:	d328      	bcc.n	8002abe <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	6821      	ldr	r1, [r4, #0]
 8002a6e:	078e      	lsls	r6, r1, #30
 8002a70:	d430      	bmi.n	8002ad4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	07ca      	lsls	r2, r1, #31
 8002a74:	d443      	bmi.n	8002afe <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <HAL_RCC_ClockConfig+0x124>)
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	42ab      	cmp	r3, r5
 8002a80:	d865      	bhi.n	8002b4e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	4d3c      	ldr	r5, [pc, #240]	; (8002b78 <HAL_RCC_ClockConfig+0x128>)
 8002a86:	f012 0f04 	tst.w	r2, #4
 8002a8a:	d16c      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	0713      	lsls	r3, r2, #28
 8002a8e:	d506      	bpl.n	8002a9e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a90:	686b      	ldr	r3, [r5, #4]
 8002a92:	6922      	ldr	r2, [r4, #16]
 8002a94:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a9c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9e:	f7ff ffb1 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002aa2:	686b      	ldr	r3, [r5, #4]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <HAL_RCC_ClockConfig+0x12c>)
 8002aa6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	40d8      	lsrs	r0, r3
 8002aae:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCC_ClockConfig+0x130>)
 8002ab0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_ClockConfig+0x134>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	f7ff fa55 	bl	8001f64 <HAL_InitTick>
  return HAL_OK;
 8002aba:	2000      	movs	r0, #0
 8002abc:	e7ce      	b.n	8002a5c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	f023 0307 	bic.w	r3, r3, #7
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	428b      	cmp	r3, r1
 8002ad0:	d1c3      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xa>
 8002ad2:	e7cb      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_ClockConfig+0x128>)
 8002ad6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ada:	bf1e      	ittt	ne
 8002adc:	685a      	ldrne	r2, [r3, #4]
 8002ade:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002ae2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae6:	bf42      	ittt	mi
 8002ae8:	685a      	ldrmi	r2, [r3, #4]
 8002aea:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002aee:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	68a0      	ldr	r0, [r4, #8]
 8002af4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002af8:	4302      	orrs	r2, r0
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	e7b9      	b.n	8002a72 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	6862      	ldr	r2, [r4, #4]
 8002b00:	4e1d      	ldr	r6, [pc, #116]	; (8002b78 <HAL_RCC_ClockConfig+0x128>)
 8002b02:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	d11a      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	d0a5      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fa64 	bl	8001fe8 <HAL_GetTick>
 8002b20:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	6873      	ldr	r3, [r6, #4]
 8002b24:	6862      	ldr	r2, [r4, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b2e:	d0a2      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7ff fa5a 	bl	8001fe8 <HAL_GetTick>
 8002b34:	1bc0      	subs	r0, r0, r7
 8002b36:	4540      	cmp	r0, r8
 8002b38:	d9f3      	bls.n	8002b22 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	e78e      	b.n	8002a5c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	2a02      	cmp	r2, #2
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b46:	e7e1      	b.n	8002b0c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	f013 0f02 	tst.w	r3, #2
 8002b4c:	e7de      	b.n	8002b0c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f023 0307 	bic.w	r3, r3, #7
 8002b54:	432b      	orrs	r3, r5
 8002b56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	42ab      	cmp	r3, r5
 8002b60:	f47f af7b 	bne.w	8002a5a <HAL_RCC_ClockConfig+0xa>
 8002b64:	e78d      	b.n	8002a82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b66:	686b      	ldr	r3, [r5, #4]
 8002b68:	68e1      	ldr	r1, [r4, #12]
 8002b6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	606b      	str	r3, [r5, #4]
 8002b72:	e78b      	b.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08006faa 	.word	0x08006faa
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000014 	.word	0x20000014

08002b88 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b96:	6810      	ldr	r0, [r2, #0]
}
 8002b98:	40d8      	lsrs	r0, r3
 8002b9a:	4770      	bx	lr
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08006fba 	.word	0x08006fba
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x14>)
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	4a03      	ldr	r2, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bb6:	6810      	ldr	r0, [r2, #0]
}
 8002bb8:	40d8      	lsrs	r0, r3
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08006fba 	.word	0x08006fba
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bc8:	6803      	ldr	r3, [r0, #0]
{
 8002bca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bce:	07d9      	lsls	r1, r3, #31
{
 8002bd0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bd2:	d521      	bpl.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4c36      	ldr	r4, [pc, #216]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bd6:	69e3      	ldr	r3, [r4, #28]
 8002bd8:	00da      	lsls	r2, r3, #3
 8002bda:	d433      	bmi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002bdc:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	69e3      	ldr	r3, [r4, #28]
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	61e3      	str	r3, [r4, #28]
 8002be6:	69e3      	ldr	r3, [r4, #28]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4f30      	ldr	r7, [pc, #192]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	d527      	bpl.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfa:	686a      	ldr	r2, [r5, #4]
 8002bfc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c00:	d136      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c02:	6a23      	ldr	r3, [r4, #32]
 8002c04:	686a      	ldr	r2, [r5, #4]
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0e:	b11e      	cbz	r6, 8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	69e3      	ldr	r3, [r4, #28]
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c18:	6828      	ldr	r0, [r5, #0]
 8002c1a:	0783      	lsls	r3, r0, #30
 8002c1c:	d506      	bpl.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1e:	4924      	ldr	r1, [pc, #144]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c20:	68ab      	ldr	r3, [r5, #8]
 8002c22:	684a      	ldr	r2, [r1, #4]
 8002c24:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2c:	f010 0010 	ands.w	r0, r0, #16
 8002c30:	d01b      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c34:	68e9      	ldr	r1, [r5, #12]
 8002c36:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c38:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6053      	str	r3, [r2, #4]
 8002c42:	e012      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8002c44:	2600      	movs	r6, #0
 8002c46:	e7d3      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002c50:	f7ff f9ca 	bl	8001fe8 <HAL_GetTick>
 8002c54:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	05d8      	lsls	r0, r3, #23
 8002c5a:	d4cd      	bmi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7ff f9c4 	bl	8001fe8 <HAL_GetTick>
 8002c60:	eba0 0008 	sub.w	r0, r0, r8
 8002c64:	2864      	cmp	r0, #100	; 0x64
 8002c66:	d9f6      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
}
 8002c6a:	b002      	add	sp, #8
 8002c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d0c4      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c78:	2001      	movs	r0, #1
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c7c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c82:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c88:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8002c8c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c8e:	07d9      	lsls	r1, r3, #31
 8002c90:	d5b7      	bpl.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002c92:	f7ff f9a9 	bl	8001fe8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c9a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	6a23      	ldr	r3, [r4, #32]
 8002c9e:	079a      	lsls	r2, r3, #30
 8002ca0:	d4af      	bmi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff f9a1 	bl	8001fe8 <HAL_GetTick>
 8002ca6:	1bc0      	subs	r0, r0, r7
 8002ca8:	4540      	cmp	r0, r8
 8002caa:	d9f7      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cac:	e7dc      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42420000 	.word	0x42420000

08002cbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cbc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	f102 030c 	add.w	r3, r2, #12
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	320c      	adds	r2, #12
 8002ccc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	2900      	cmp	r1, #0
 8002cd4:	d1f2      	bne.n	8002cbc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	f102 0314 	add.w	r3, r2, #20
 8002cda:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cde:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	f102 0c14 	add.w	ip, r2, #20
 8002ce6:	e84c 3100 	strex	r1, r3, [ip]
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d1f3      	bne.n	8002cd6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10b      	bne.n	8002d0c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	f102 030c 	add.w	r3, r2, #12
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	f102 0c0c 	add.w	ip, r2, #12
 8002d04:	e84c 3100 	strex	r1, r3, [ip]
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d1f3      	bne.n	8002cf4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d12:	2300      	movs	r3, #0
 8002d14:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002d16:	4770      	bx	lr

08002d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	6803      	ldr	r3, [r0, #0]
 8002d1e:	68c1      	ldr	r1, [r0, #12]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d2a:	6882      	ldr	r2, [r0, #8]
 8002d2c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002d2e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d30:	4302      	orrs	r2, r0
 8002d32:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002d34:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002d38:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d3c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	69a1      	ldr	r1, [r4, #24]
 8002d46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <UART_SetConfig+0x70>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d115      	bne.n	8002d80 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7ff ff28 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d58:	2319      	movs	r3, #25
 8002d5a:	4343      	muls	r3, r0
 8002d5c:	6862      	ldr	r2, [r4, #4]
 8002d5e:	6820      	ldr	r0, [r4, #0]
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d66:	2264      	movs	r2, #100	; 0x64
 8002d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d6c:	fb02 3311 	mls	r3, r2, r1, r3
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	3332      	adds	r3, #50	; 0x32
 8002d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002d7c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d7e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7ff ff02 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8002d84:	e7e8      	b.n	8002d58 <UART_SetConfig+0x40>
 8002d86:	bf00      	nop
 8002d88:	40013800 	.word	0x40013800

08002d8c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d8e:	4605      	mov	r5, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	4617      	mov	r7, r2
 8002d94:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d96:	682a      	ldr	r2, [r5, #0]
 8002d98:	6813      	ldr	r3, [r2, #0]
 8002d9a:	ea34 0303 	bics.w	r3, r4, r3
 8002d9e:	d101      	bne.n	8002da4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002da0:	2000      	movs	r0, #0
 8002da2:	e021      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	1c70      	adds	r0, r6, #1
 8002da6:	d0f7      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7ff f91e 	bl	8001fe8 <HAL_GetTick>
 8002dac:	1bc0      	subs	r0, r0, r7
 8002dae:	4286      	cmp	r6, r0
 8002db0:	d31c      	bcc.n	8002dec <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8002db2:	b1de      	cbz	r6, 8002dec <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	0751      	lsls	r1, r2, #29
 8002dba:	d5ec      	bpl.n	8002d96 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002dbc:	2c80      	cmp	r4, #128	; 0x80
 8002dbe:	d0ea      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002dc0:	2c40      	cmp	r4, #64	; 0x40
 8002dc2:	d0e8      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	0712      	lsls	r2, r2, #28
 8002dc8:	d5e5      	bpl.n	8002d96 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dca:	2400      	movs	r4, #0
 8002dcc:	9401      	str	r4, [sp, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8002dd0:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002dda:	f7ff ff6f 	bl	8002cbc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dde:	2308      	movs	r3, #8
          return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de2:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 8002de4:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
}
 8002de8:	b003      	add	sp, #12
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002dec:	2003      	movs	r0, #3
 8002dee:	e7fb      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08002df0 <HAL_UART_Init>:
{
 8002df0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002df2:	4604      	mov	r4, r0
 8002df4:	b348      	cbz	r0, 8002e4a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002dfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dfe:	b91b      	cbnz	r3, 8002e08 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002e00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002e04:	f7fe ffda 	bl	8001dbc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002e0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002e10:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e12:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e18:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e1a:	f7ff ff7d 	bl	8002d18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e30:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e38:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e3a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e46:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002e48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	e7fc      	b.n	8002e48 <HAL_UART_Init+0x58>

08002e4e <HAL_UART_Transmit>:
{
 8002e4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e52:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002e58:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5a:	2b20      	cmp	r3, #32
{
 8002e5c:	460e      	mov	r6, r1
 8002e5e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002e60:	d13f      	bne.n	8002ee2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8002e62:	2900      	cmp	r1, #0
 8002e64:	d03f      	beq.n	8002ee6 <HAL_UART_Transmit+0x98>
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	d03d      	beq.n	8002ee6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002e74:	f7ff f8b8 	bl	8001fe8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002e7a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002e80:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e82:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e84:	d103      	bne.n	8002e8e <HAL_UART_Transmit+0x40>
 8002e86:	6923      	ldr	r3, [r4, #16]
 8002e88:	b90b      	cbnz	r3, 8002e8e <HAL_UART_Transmit+0x40>
 8002e8a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002e8c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002e8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b95b      	cbnz	r3, 8002eac <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e94:	464b      	mov	r3, r9
 8002e96:	4642      	mov	r2, r8
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f7ff ff76 	bl	8002d8c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002ea0:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002ea2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	b958      	cbnz	r0, 8002ec0 <HAL_UART_Transmit+0x72>
}
 8002ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eac:	464b      	mov	r3, r9
 8002eae:	4642      	mov	r2, r8
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f7ff ff6a 	bl	8002d8c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002eb8:	b120      	cbz	r0, 8002ec4 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	e7f1      	b.n	8002ea8 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002ec6:	b94e      	cbnz	r6, 8002edc <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002ed2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002ed4:	3901      	subs	r1, #1
 8002ed6:	b289      	uxth	r1, r1
 8002ed8:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002eda:	e7d8      	b.n	8002e8e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002edc:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002ee0:	e7f6      	b.n	8002ed0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	e7e0      	b.n	8002ea8 <HAL_UART_Transmit+0x5a>
      return  HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	e7de      	b.n	8002ea8 <HAL_UART_Transmit+0x5a>

08002eea <HAL_UART_TxCpltCallback>:
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_ErrorCallback>:
 8002eec:	4770      	bx	lr

08002eee <UART_DMAAbortOnError>:
{
 8002eee:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002ef0:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002ef4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ef6:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002ef8:	f7ff fff8 	bl	8002eec <HAL_UART_ErrorCallback>
}
 8002efc:	bd08      	pop	{r3, pc}

08002efe <HAL_UARTEx_RxEventCallback>:
}
 8002efe:	4770      	bx	lr

08002f00 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f00:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002f04:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f06:	2b22      	cmp	r3, #34	; 0x22
 8002f08:	d142      	bne.n	8002f90 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f12:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	d13f      	bne.n	8002f96 <UART_Receive_IT.isra.0+0x96>
 8002f16:	6901      	ldr	r1, [r0, #16]
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	d13f      	bne.n	8002f9c <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f1c:	6852      	ldr	r2, [r2, #4]
 8002f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f22:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002f26:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002f28:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12d      	bne.n	8002f90 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f34:	6802      	ldr	r2, [r0, #0]
 8002f36:	68d1      	ldr	r1, [r2, #12]
 8002f38:	f021 0120 	bic.w	r1, r1, #32
 8002f3c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f3e:	68d1      	ldr	r1, [r2, #12]
 8002f40:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f44:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f46:	6951      	ldr	r1, [r2, #20]
 8002f48:	f021 0101 	bic.w	r1, r1, #1
 8002f4c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f54:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f56:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002f58:	2a01      	cmp	r2, #1
 8002f5a:	6802      	ldr	r2, [r0, #0]
 8002f5c:	d128      	bne.n	8002fb0 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	f102 030c 	add.w	r3, r2, #12
 8002f64:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	f102 0c0c 	add.w	ip, r2, #12
 8002f70:	e84c 3100 	strex	r1, r3, [ip]
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d1f3      	bne.n	8002f60 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	06db      	lsls	r3, r3, #27
 8002f7c:	d505      	bpl.n	8002f8a <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7e:	9101      	str	r1, [sp, #4]
 8002f80:	6813      	ldr	r3, [r2, #0]
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	6853      	ldr	r3, [r2, #4]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002f8c:	f7ff ffb7 	bl	8002efe <HAL_UARTEx_RxEventCallback>
}
 8002f90:	b003      	add	sp, #12
 8002f92:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f96:	b939      	cbnz	r1, 8002fa8 <UART_Receive_IT.isra.0+0xa8>
 8002f98:	6901      	ldr	r1, [r0, #16]
 8002f9a:	b929      	cbnz	r1, 8002fa8 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002fa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e7be      	b.n	8002f26 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fa8:	6852      	ldr	r2, [r2, #4]
 8002faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fae:	e7f7      	b.n	8002fa0 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8002fb0:	f7fe fd86 	bl	8001ac0 <HAL_UART_RxCpltCallback>
 8002fb4:	e7ec      	b.n	8002f90 <UART_Receive_IT.isra.0+0x90>
	...

08002fb8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fb8:	6803      	ldr	r3, [r0, #0]
{
 8002fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fbc:	681a      	ldr	r2, [r3, #0]
{
 8002fbe:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002fc0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002fc6:	d108      	bne.n	8002fda <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc8:	0696      	lsls	r6, r2, #26
 8002fca:	d568      	bpl.n	800309e <HAL_UART_IRQHandler+0xe6>
 8002fcc:	068d      	lsls	r5, r1, #26
 8002fce:	d566      	bpl.n	800309e <HAL_UART_IRQHandler+0xe6>
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002fd6:	f7ff bf93 	b.w	8002f00 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fda:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fde:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002fe2:	4305      	orrs	r5, r0
 8002fe4:	d05b      	beq.n	800309e <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fe6:	07d6      	lsls	r6, r2, #31
 8002fe8:	d505      	bpl.n	8002ff6 <HAL_UART_IRQHandler+0x3e>
 8002fea:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fec:	bf42      	ittt	mi
 8002fee:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8002ff0:	f043 0301 	orrmi.w	r3, r3, #1
 8002ff4:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ff6:	0753      	lsls	r3, r2, #29
 8002ff8:	d504      	bpl.n	8003004 <HAL_UART_IRQHandler+0x4c>
 8002ffa:	b118      	cbz	r0, 8003004 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003004:	0796      	lsls	r6, r2, #30
 8003006:	d504      	bpl.n	8003012 <HAL_UART_IRQHandler+0x5a>
 8003008:	b118      	cbz	r0, 8003012 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800300a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003012:	0715      	lsls	r5, r2, #28
 8003014:	d507      	bpl.n	8003026 <HAL_UART_IRQHandler+0x6e>
 8003016:	f001 0320 	and.w	r3, r1, #32
 800301a:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800301c:	bf1e      	ittt	ne
 800301e:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8003020:	f043 0308 	orrne.w	r3, r3, #8
 8003024:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003026:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003028:	2b00      	cmp	r3, #0
 800302a:	d032      	beq.n	8003092 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800302c:	0692      	lsls	r2, r2, #26
 800302e:	d504      	bpl.n	800303a <HAL_UART_IRQHandler+0x82>
 8003030:	068b      	lsls	r3, r1, #26
 8003032:	d502      	bpl.n	800303a <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff ff63 	bl	8002f00 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800303c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800303e:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003040:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003046:	f002 0208 	and.w	r2, r2, #8
 800304a:	ea53 0502 	orrs.w	r5, r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8003050:	f7ff fe34 	bl	8002cbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	6973      	ldr	r3, [r6, #20]
 8003056:	065e      	lsls	r6, r3, #25
 8003058:	d518      	bpl.n	800308c <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	f102 0314 	add.w	r3, r2, #20
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	3214      	adds	r2, #20
 800306a:	e842 3100 	strex	r1, r3, [r2]
 800306e:	2900      	cmp	r1, #0
 8003070:	d1f3      	bne.n	800305a <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8003072:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003074:	b150      	cbz	r0, 800308c <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003076:	4b74      	ldr	r3, [pc, #464]	; (8003248 <HAL_UART_IRQHandler+0x290>)
 8003078:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307a:	f7ff fa03 	bl	8002484 <HAL_DMA_Abort_IT>
 800307e:	b140      	cbz	r0, 8003092 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003080:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003082:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003084:	b002      	add	sp, #8
 8003086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff ff2d 	bl	8002eec <HAL_UART_ErrorCallback>
}
 8003092:	b002      	add	sp, #8
 8003094:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003096:	f7ff ff29 	bl	8002eec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	6465      	str	r5, [r4, #68]	; 0x44
 800309c:	e7f9      	b.n	8003092 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80030a0:	2801      	cmp	r0, #1
 80030a2:	f040 8094 	bne.w	80031ce <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030a6:	06d5      	lsls	r5, r2, #27
 80030a8:	f140 8091 	bpl.w	80031ce <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030ac:	06c8      	lsls	r0, r1, #27
 80030ae:	f140 808e 	bpl.w	80031ce <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030b2:	2200      	movs	r2, #0
 80030b4:	9201      	str	r2, [sp, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	9201      	str	r2, [sp, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	9201      	str	r2, [sp, #4]
 80030be:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	0652      	lsls	r2, r2, #25
 80030c4:	d54d      	bpl.n	8003162 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80030c8:	680a      	ldr	r2, [r1, #0]
 80030ca:	6852      	ldr	r2, [r2, #4]
 80030cc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80030ce:	2a00      	cmp	r2, #0
 80030d0:	d0df      	beq.n	8003092 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030d2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80030d4:	4290      	cmp	r0, r2
 80030d6:	d9dc      	bls.n	8003092 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80030d8:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030da:	698a      	ldr	r2, [r1, #24]
 80030dc:	2a20      	cmp	r2, #32
 80030de:	d036      	beq.n	800314e <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	f103 020c 	add.w	r2, r3, #12
 80030e4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	f103 000c 	add.w	r0, r3, #12
 80030f0:	e840 2100 	strex	r1, r2, [r0]
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d1f3      	bne.n	80030e0 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f103 0214 	add.w	r2, r3, #20
 80030fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003100:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	f103 0014 	add.w	r0, r3, #20
 8003108:	e840 2100 	strex	r1, r2, [r0]
 800310c:	2900      	cmp	r1, #0
 800310e:	d1f3      	bne.n	80030f8 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f103 0214 	add.w	r2, r3, #20
 8003114:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	f103 0014 	add.w	r0, r3, #20
 8003120:	e840 2100 	strex	r1, r2, [r0]
 8003124:	2900      	cmp	r1, #0
 8003126:	d1f3      	bne.n	8003110 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8003128:	2220      	movs	r2, #32
 800312a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	f103 020c 	add.w	r2, r3, #12
 8003134:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003138:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	f103 000c 	add.w	r0, r3, #12
 8003140:	e840 2100 	strex	r1, r2, [r0]
 8003144:	2900      	cmp	r1, #0
 8003146:	d1f3      	bne.n	8003130 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003148:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800314a:	f7ff f97b 	bl	8002444 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314e:	2302      	movs	r3, #2
 8003150:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003152:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003154:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003156:	1ac9      	subs	r1, r1, r3
 8003158:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff fecf 	bl	8002efe <HAL_UARTEx_RxEventCallback>
 8003160:	e797      	b.n	8003092 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003162:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003164:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003166:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8003168:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800316a:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800316c:	2800      	cmp	r0, #0
 800316e:	d090      	beq.n	8003092 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003170:	1a89      	subs	r1, r1, r2
 8003172:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003174:	2900      	cmp	r1, #0
 8003176:	d08c      	beq.n	8003092 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	f103 020c 	add.w	r2, r3, #12
 800317c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	f103 050c 	add.w	r5, r3, #12
 8003188:	e845 2000 	strex	r0, r2, [r5]
 800318c:	2800      	cmp	r0, #0
 800318e:	d1f3      	bne.n	8003178 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	f103 0214 	add.w	r2, r3, #20
 8003194:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	f103 0514 	add.w	r5, r3, #20
 80031a0:	e845 2000 	strex	r0, r2, [r5]
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d1f3      	bne.n	8003190 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80031a8:	2220      	movs	r2, #32
 80031aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f103 020c 	add.w	r2, r3, #12
 80031b4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	f103 050c 	add.w	r5, r3, #12
 80031c0:	e845 2000 	strex	r0, r2, [r5]
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d1f3      	bne.n	80031b0 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c8:	2302      	movs	r3, #2
 80031ca:	6363      	str	r3, [r4, #52]	; 0x34
 80031cc:	e7c5      	b.n	800315a <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031ce:	0616      	lsls	r6, r2, #24
 80031d0:	d528      	bpl.n	8003224 <HAL_UART_IRQHandler+0x26c>
 80031d2:	060d      	lsls	r5, r1, #24
 80031d4:	d526      	bpl.n	8003224 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031d6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80031da:	2a21      	cmp	r2, #33	; 0x21
 80031dc:	f47f af59 	bne.w	8003092 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e0:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031e2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80031e8:	d117      	bne.n	800321a <HAL_UART_IRQHandler+0x262>
 80031ea:	6921      	ldr	r1, [r4, #16]
 80031ec:	b9a9      	cbnz	r1, 800321a <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ee:	f832 1b02 	ldrh.w	r1, [r2], #2
 80031f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80031f6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031f8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80031fa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80031fc:	3a01      	subs	r2, #1
 80031fe:	b292      	uxth	r2, r2
 8003200:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003202:	2a00      	cmp	r2, #0
 8003204:	f47f af45 	bne.w	8003092 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	e73b      	b.n	8003092 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800321a:	1c51      	adds	r1, r2, #1
 800321c:	6221      	str	r1, [r4, #32]
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	e7ea      	b.n	80031fa <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003224:	0650      	lsls	r0, r2, #25
 8003226:	f57f af34 	bpl.w	8003092 <HAL_UART_IRQHandler+0xda>
 800322a:	064a      	lsls	r2, r1, #25
 800322c:	f57f af31 	bpl.w	8003092 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003230:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003232:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003238:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800323a:	2320      	movs	r3, #32
 800323c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8003240:	f7ff fe53 	bl	8002eea <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003244:	e725      	b.n	8003092 <HAL_UART_IRQHandler+0xda>
 8003246:	bf00      	nop
 8003248:	08002eef 	.word	0x08002eef

0800324c <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 800324e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003252:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 8003254:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003256:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003258:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 800325c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800325e:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003260:	b11a      	cbz	r2, 800326a <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003268:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800326a:	695a      	ldr	r2, [r3, #20]
}
 800326c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	4770      	bx	lr

0800327e <HAL_UART_Receive_IT>:
{
 800327e:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003280:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8003284:	2e20      	cmp	r6, #32
 8003286:	d106      	bne.n	8003296 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8003288:	b141      	cbz	r1, 800329c <HAL_UART_Receive_IT+0x1e>
 800328a:	b13a      	cbz	r2, 800329c <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328c:	2400      	movs	r4, #0
 800328e:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003290:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003292:	f7ff bfdb 	b.w	800324c <UART_Start_Receive_IT>
    return HAL_BUSY;
 8003296:	2002      	movs	r0, #2
}
 8003298:	bc70      	pop	{r4, r5, r6}
 800329a:	4770      	bx	lr
      return HAL_ERROR;
 800329c:	2001      	movs	r0, #1
 800329e:	e7fb      	b.n	8003298 <HAL_UART_Receive_IT+0x1a>

080032a0 <generateJSONObjectTemp>:
#include "JsonHandling.h"
static void removeSpaces(char *str);

// Function to generate JSON object
cJSON* generateJSONObjectTemp(Node_t *node)
{
 80032a0:	b530      	push	{r4, r5, lr}
 80032a2:	b087      	sub	sp, #28
 80032a4:	4605      	mov	r5, r0
    // Create a JSON object
    cJSON *json = cJSON_CreateObject();
 80032a6:	f7fe fbc3 	bl	8001a30 <cJSON_CreateObject>

    if (json == NULL)
 80032aa:	4604      	mov	r4, r0
 80032ac:	b308      	cbz	r0, 80032f2 <generateJSONObjectTemp+0x52>
    // Buffer to hold string representations of NodeID and Data
    char nodeIDStr[12]; // Sufficient size for uint8_t and null terminator
    char dataStr[12];   // Sufficient size for uint8_t and null terminator

    // Convert NodeID and Data to strings
    sprintf(nodeIDStr, "0x%02X", node->NodeID);
 80032ae:	792a      	ldrb	r2, [r5, #4]
 80032b0:	4911      	ldr	r1, [pc, #68]	; (80032f8 <generateJSONObjectTemp+0x58>)
 80032b2:	4668      	mov	r0, sp
 80032b4:	f001 f9cc 	bl	8004650 <siprintf>
    sprintf(dataStr, "%u^C", node->Data);
 80032b8:	4910      	ldr	r1, [pc, #64]	; (80032fc <generateJSONObjectTemp+0x5c>)
 80032ba:	88ea      	ldrh	r2, [r5, #6]
 80032bc:	a803      	add	r0, sp, #12
 80032be:	f001 f9c7 	bl	8004650 <siprintf>

    if (node->NodeID == TempSensorID) {
 80032c2:	792b      	ldrb	r3, [r5, #4]
 80032c4:	88ea      	ldrh	r2, [r5, #6]
 80032c6:	2b80      	cmp	r3, #128	; 0x80
    	sprintf(dataStr, "%u^C", node->Data);
 80032c8:	bf0c      	ite	eq
 80032ca:	490c      	ldreq	r1, [pc, #48]	; (80032fc <generateJSONObjectTemp+0x5c>)
	} else {
		sprintf(dataStr, "%u", node->Data);
 80032cc:	490c      	ldrne	r1, [pc, #48]	; (8003300 <generateJSONObjectTemp+0x60>)
 80032ce:	a803      	add	r0, sp, #12
 80032d0:	f001 f9be 	bl	8004650 <siprintf>
	}

    // Add elements to the JSON object
    cJSON_AddStringToObject(json, "NodeType", (char *)node->NodeType);
 80032d4:	682a      	ldr	r2, [r5, #0]
 80032d6:	490b      	ldr	r1, [pc, #44]	; (8003304 <generateJSONObjectTemp+0x64>)
 80032d8:	4620      	mov	r0, r4
 80032da:	f7fe fb93 	bl	8001a04 <cJSON_AddStringToObject>
    cJSON_AddStringToObject(json, "NodeID", nodeIDStr);
 80032de:	466a      	mov	r2, sp
 80032e0:	4909      	ldr	r1, [pc, #36]	; (8003308 <generateJSONObjectTemp+0x68>)
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7fe fb8e 	bl	8001a04 <cJSON_AddStringToObject>
    cJSON_AddStringToObject(json, "Data", dataStr);
 80032e8:	4620      	mov	r0, r4
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <generateJSONObjectTemp+0x6c>)
 80032ec:	aa03      	add	r2, sp, #12
 80032ee:	f7fe fb89 	bl	8001a04 <cJSON_AddStringToObject>

    return json; // Return the JSON object
}
 80032f2:	4620      	mov	r0, r4
 80032f4:	b007      	add	sp, #28
 80032f6:	bd30      	pop	{r4, r5, pc}
 80032f8:	08006fd4 	.word	0x08006fd4
 80032fc:	08006fdb 	.word	0x08006fdb
 8003300:	08006fe0 	.word	0x08006fe0
 8003304:	08006fe3 	.word	0x08006fe3
 8003308:	08006fec 	.word	0x08006fec
 800330c:	08006ff3 	.word	0x08006ff3

08003310 <PrintJson>:

void PrintJson(cJSON * jsonObject)
{
 8003310:	b570      	push	{r4, r5, r6, lr}
	if (jsonObject != NULL)
 8003312:	4605      	mov	r5, r0
 8003314:	b1a0      	cbz	r0, 8003340 <PrintJson+0x30>
		    {
		  	  // Convert JSON object to string
		  	  char *jsonString = cJSON_Print(jsonObject);
 8003316:	f7fe fb57 	bl	80019c8 <cJSON_Print>

		  	  if (jsonString != NULL)
 800331a:	4604      	mov	r4, r0
 800331c:	b158      	cbz	r0, 8003336 <PrintJson+0x26>
		  	  {
		  		  HAL_UART_Transmit(&huart1, (uint8_t*)jsonString, strlen(jsonString), HAL_MAX_DELAY);
 800331e:	f7fc ff21 	bl	8000164 <strlen>
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	b282      	uxth	r2, r0
 8003328:	4621      	mov	r1, r4
 800332a:	480d      	ldr	r0, [pc, #52]	; (8003360 <PrintJson+0x50>)
 800332c:	f7ff fd8f 	bl	8002e4e <HAL_UART_Transmit>
		  		  free(jsonString); // Free the allocated memory for the JSON string
 8003330:	4620      	mov	r0, r4
 8003332:	f000 f933 	bl	800359c <free>
		  	  }
		  	  cJSON_Delete(jsonObject); // Free the JSON object
 8003336:	4628      	mov	r0, r5
		    else
		    {
		  	  sprintf(buffer,"Failed to generate JSON\r");
		  	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
		    }
}
 8003338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		  	  cJSON_Delete(jsonObject); // Free the JSON object
 800333c:	f7fe b916 	b.w	800156c <cJSON_Delete>
		  	  sprintf(buffer,"Failed to generate JSON\r");
 8003340:	4908      	ldr	r1, [pc, #32]	; (8003364 <PrintJson+0x54>)
 8003342:	4809      	ldr	r0, [pc, #36]	; (8003368 <PrintJson+0x58>)
 8003344:	f001 facd 	bl	80048e2 <strcpy>
		  	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <PrintJson+0x58>)
 800334a:	f7fc ff0b 	bl	8000164 <strlen>
}
 800334e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		  	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8003352:	b282      	uxth	r2, r0
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <PrintJson+0x58>)
 800335a:	4801      	ldr	r0, [pc, #4]	; (8003360 <PrintJson+0x50>)
 800335c:	f7ff bd77 	b.w	8002e4e <HAL_UART_Transmit>
 8003360:	20000280 	.word	0x20000280
 8003364:	08006ff8 	.word	0x08006ff8
 8003368:	2000021c 	.word	0x2000021c

0800336c <parse_json_command>:

void parse_json_command(const char *json_string,Command_t * CommandPtr)
{
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
    cJSON_Delete(json);
}

static void removeSpaces(char *str) {
    uint8_t i, j = 0;
    uint8_t len = strlen(str);
 8003374:	f7fc fef6 	bl	8000164 <strlen>

    for (i = 0; i < len; i++) {
 8003378:	4622      	mov	r2, r4
    uint8_t i, j = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	b2c0      	uxtb	r0, r0
 800337e:	4420      	add	r0, r4
    for (i = 0; i < len; i++) {
 8003380:	4290      	cmp	r0, r2
        if (str[i] != ' ') {
            str[j++] = str[i];
 8003382:	eb04 0103 	add.w	r1, r4, r3
    for (i = 0; i < len; i++) {
 8003386:	d11b      	bne.n	80033c0 <parse_json_command+0x54>
        }
    }
    str[j] = '\0'; // Null-terminate the modified string
 8003388:	f04f 0900 	mov.w	r9, #0
    cJSON *json = cJSON_Parse(json_string);
 800338c:	4620      	mov	r0, r4
    str[j] = '\0'; // Null-terminate the modified string
 800338e:	f881 9000 	strb.w	r9, [r1]
    cJSON *json = cJSON_Parse(json_string);
 8003392:	f7fe fb15 	bl	80019c0 <cJSON_Parse>
    if (json == NULL) {
 8003396:	4604      	mov	r4, r0
 8003398:	b9d0      	cbnz	r0, 80033d0 <parse_json_command+0x64>
        sprintf(buffer, "Error parsing JSON string: %s\r", cJSON_GetErrorPtr());
 800339a:	f7fe f8df 	bl	800155c <cJSON_GetErrorPtr>
 800339e:	4926      	ldr	r1, [pc, #152]	; (8003438 <parse_json_command+0xcc>)
 80033a0:	4602      	mov	r2, r0
 80033a2:	4826      	ldr	r0, [pc, #152]	; (800343c <parse_json_command+0xd0>)
 80033a4:	f001 f954 	bl	8004650 <siprintf>
        HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80033a8:	4824      	ldr	r0, [pc, #144]	; (800343c <parse_json_command+0xd0>)
 80033aa:	f7fc fedb 	bl	8000164 <strlen>
}
 80033ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80033b2:	b282      	uxth	r2, r0
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	4920      	ldr	r1, [pc, #128]	; (800343c <parse_json_command+0xd0>)
 80033ba:	4821      	ldr	r0, [pc, #132]	; (8003440 <parse_json_command+0xd4>)
 80033bc:	f7ff bd47 	b.w	8002e4e <HAL_UART_Transmit>
        if (str[i] != ' ') {
 80033c0:	f812 6b01 	ldrb.w	r6, [r2], #1
 80033c4:	2e20      	cmp	r6, #32
            str[j++] = str[i];
 80033c6:	bf1e      	ittt	ne
 80033c8:	3301      	addne	r3, #1
 80033ca:	b2db      	uxtbne	r3, r3
 80033cc:	700e      	strbne	r6, [r1, #0]
    for (i = 0; i < len; i++) {
 80033ce:	e7d7      	b.n	8003380 <parse_json_command+0x14>
    cJSON *command = cJSON_GetObjectItem(json, "command");
 80033d0:	491c      	ldr	r1, [pc, #112]	; (8003444 <parse_json_command+0xd8>)
 80033d2:	f7fe fafc 	bl	80019ce <cJSON_GetObjectItem>
    cJSON *node_id = cJSON_GetObjectItem(json, "nodeID");
 80033d6:	491c      	ldr	r1, [pc, #112]	; (8003448 <parse_json_command+0xdc>)
    cJSON *command = cJSON_GetObjectItem(json, "command");
 80033d8:	4680      	mov	r8, r0
    cJSON *node_id = cJSON_GetObjectItem(json, "nodeID");
 80033da:	4620      	mov	r0, r4
 80033dc:	f7fe faf7 	bl	80019ce <cJSON_GetObjectItem>
    cJSON *data = cJSON_GetObjectItem(json, "data");
 80033e0:	491a      	ldr	r1, [pc, #104]	; (800344c <parse_json_command+0xe0>)
    cJSON *node_id = cJSON_GetObjectItem(json, "nodeID");
 80033e2:	4607      	mov	r7, r0
    cJSON *data = cJSON_GetObjectItem(json, "data");
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7fe faf2 	bl	80019ce <cJSON_GetObjectItem>
    memset(CommandPtr, 0, sizeof(CommandPtr));
 80033ea:	f8c5 9000 	str.w	r9, [r5]
    cJSON *data = cJSON_GetObjectItem(json, "data");
 80033ee:	4606      	mov	r6, r0
    if (cJSON_IsString(command) && command->valuestring != NULL) {
 80033f0:	4640      	mov	r0, r8
 80033f2:	f7fe fb29 	bl	8001a48 <cJSON_IsString>
 80033f6:	b128      	cbz	r0, 8003404 <parse_json_command+0x98>
 80033f8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80033fc:	b110      	cbz	r0, 8003404 <parse_json_command+0x98>
    	CommandPtr->command = (uint8_t *)strdup(command->valuestring); // Duplicate string
 80033fe:	f001 f9bf 	bl	8004780 <strdup>
 8003402:	6028      	str	r0, [r5, #0]
    if (cJSON_IsString(node_id) && node_id->valuestring != NULL) {
 8003404:	4638      	mov	r0, r7
 8003406:	f7fe fb1f 	bl	8001a48 <cJSON_IsString>
 800340a:	b130      	cbz	r0, 800341a <parse_json_command+0xae>
 800340c:	6938      	ldr	r0, [r7, #16]
 800340e:	b120      	cbz	r0, 800341a <parse_json_command+0xae>
    	CommandPtr->nodeID = (uint8_t)strtol(node_id->valuestring, NULL, 16);
 8003410:	2210      	movs	r2, #16
 8003412:	2100      	movs	r1, #0
 8003414:	f001 f850 	bl	80044b8 <strtol>
 8003418:	7128      	strb	r0, [r5, #4]
    if (cJSON_IsString(data) && data->valuestring != NULL) {
 800341a:	4630      	mov	r0, r6
 800341c:	f7fe fb14 	bl	8001a48 <cJSON_IsString>
 8003420:	b120      	cbz	r0, 800342c <parse_json_command+0xc0>
 8003422:	6930      	ldr	r0, [r6, #16]
 8003424:	b110      	cbz	r0, 800342c <parse_json_command+0xc0>
    	CommandPtr->data = (uint8_t)atoi(data->valuestring); // Convert string to int
 8003426:	f000 f8ad 	bl	8003584 <atoi>
 800342a:	7168      	strb	r0, [r5, #5]
    cJSON_Delete(json);
 800342c:	4620      	mov	r0, r4
}
 800342e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cJSON_Delete(json);
 8003432:	f7fe b89b 	b.w	800156c <cJSON_Delete>
 8003436:	bf00      	nop
 8003438:	08007011 	.word	0x08007011
 800343c:	2000021c 	.word	0x2000021c
 8003440:	20000280 	.word	0x20000280
 8003444:	08007030 	.word	0x08007030
 8003448:	08007038 	.word	0x08007038
 800344c:	0800703f 	.word	0x0800703f

08003450 <LDR_voidinit>:
#include "LDR.h"

LDR_status LDR_voidinit(Node_t * Node_LDR)
{
	LDR_status ret = LDR_ERROR;
	if (Node_LDR != NULL) {
 8003450:	b138      	cbz	r0, 8003462 <LDR_voidinit+0x12>
		Node_LDR->NodeType = "NS";
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LDR_voidinit+0x18>)
 8003454:	6003      	str	r3, [r0, #0]
		Node_LDR->NodeID = 0x81;
 8003456:	2381      	movs	r3, #129	; 0x81
 8003458:	7103      	strb	r3, [r0, #4]
		Node_LDR->Data = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	80c3      	strh	r3, [r0, #6]
		ret = LDR_OK;
 800345e:	4618      	mov	r0, r3
 8003460:	4770      	bx	lr
	LDR_status ret = LDR_ERROR;
 8003462:	2001      	movs	r0, #1
	}
	return ret;
}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	08007044 	.word	0x08007044

0800346c <LDR_voidDeInit>:

LDR_status LDR_voidDeInit(Node_t * Node_LDR)
{
	LDR_status ret = LDR_ERROR;
	if (Node_LDR != NULL) {
 800346c:	b130      	cbz	r0, 800347c <LDR_voidDeInit+0x10>
		Node_LDR->NodeType = NULL;
 800346e:	2300      	movs	r3, #0
		Node_LDR->NodeID = 0x81;
 8003470:	2281      	movs	r2, #129	; 0x81
		Node_LDR->NodeType = NULL;
 8003472:	6003      	str	r3, [r0, #0]
		Node_LDR->NodeID = 0x81;
 8003474:	7102      	strb	r2, [r0, #4]
		Node_LDR->Data = NULL;
 8003476:	80c3      	strh	r3, [r0, #6]
		ret = LDR_OK;
 8003478:	4618      	mov	r0, r3
 800347a:	4770      	bx	lr
	LDR_status ret = LDR_ERROR;
 800347c:	2001      	movs	r0, #1
	}
	return ret;
}
 800347e:	4770      	bx	lr

08003480 <LDR_voidGetLightingIntensity>:

LDR_status LDR_voidGetLightingIntensity(Node_t * Node_LDR_prt)
{
 8003480:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LDR_status ret = LDR_ERROR;
	if (Node_LDR_prt != NULL) {
 8003482:	4605      	mov	r5, r0
 8003484:	b1a8      	cbz	r0, 80034b2 <LDR_voidGetLightingIntensity+0x32>
		ADC_ChannelConfTypeDef sConfig = {0};
 8003486:	2300      	movs	r3, #0
		sConfig.Channel = LDRDataPin;
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8003488:	2601      	movs	r6, #1
		ADC_ChannelConfTypeDef sConfig = {0};
 800348a:	9303      	str	r3, [sp, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800348c:	2305      	movs	r3, #5
		sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800348e:	a901      	add	r1, sp, #4
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <LDR_voidGetLightingIntensity+0x38>)
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8003492:	e9cd 3601 	strd	r3, r6, [sp, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003496:	f7fe fdb1 	bl	8001ffc <HAL_ADC_ConfigChannel>
	if (HAL_ADC_Start(&hadc1) == HAL_OK){
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <LDR_voidGetLightingIntensity+0x38>)
 800349c:	f7fe fe68 	bl	8002170 <HAL_ADC_Start>
 80034a0:	4604      	mov	r4, r0
 80034a2:	b930      	cbnz	r0, 80034b2 <LDR_voidGetLightingIntensity+0x32>
		ret = LDR_OK;
		uint32_t ADC_val = HAL_ADC_GetValue(&hadc1);
 80034a4:	4804      	ldr	r0, [pc, #16]	; (80034b8 <LDR_voidGetLightingIntensity+0x38>)
 80034a6:	f7fe fda5 	bl	8001ff4 <HAL_ADC_GetValue>
		Node_LDR_prt->Data= ADC_val;
 80034aa:	80e8      	strh	r0, [r5, #6]
		}
	}
	return ret;
}
 80034ac:	4620      	mov	r0, r4
 80034ae:	b004      	add	sp, #16
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
	LDR_status ret = LDR_ERROR;
 80034b2:	2401      	movs	r4, #1
 80034b4:	e7fa      	b.n	80034ac <LDR_voidGetLightingIntensity+0x2c>
 80034b6:	bf00      	nop
 80034b8:	20000250 	.word	0x20000250

080034bc <LM35_voidGetTemperature>:
 *  Created on: Dec 6, 2024
 *      Author: ahmed
 */
#include "LM35.h"
LM35_status LM35_voidGetTemperature(Node_t * Node_temp_prt)
{
 80034bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LM35_status ret = LM35_ERROR;
	if (Node_temp_prt != NULL) {
 80034be:	4605      	mov	r5, r0
 80034c0:	b1e8      	cbz	r0, 80034fe <LM35_voidGetTemperature+0x42>
		ADC_ChannelConfTypeDef sConfig = {0};
 80034c2:	2300      	movs	r3, #0
 80034c4:	9303      	str	r3, [sp, #12]
		sConfig.Channel = LM35DataPin;
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80034c6:	2304      	movs	r3, #4
 80034c8:	2601      	movs	r6, #1
		sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80034ca:	eb0d 0103 	add.w	r1, sp, r3
 80034ce:	480d      	ldr	r0, [pc, #52]	; (8003504 <LM35_voidGetTemperature+0x48>)
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80034d0:	e9cd 3601 	strd	r3, r6, [sp, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80034d4:	f7fe fd92 	bl	8001ffc <HAL_ADC_ConfigChannel>
	if (HAL_ADC_Start(&hadc1) == HAL_OK){
 80034d8:	480a      	ldr	r0, [pc, #40]	; (8003504 <LM35_voidGetTemperature+0x48>)
 80034da:	f7fe fe49 	bl	8002170 <HAL_ADC_Start>
 80034de:	4604      	mov	r4, r0
 80034e0:	b968      	cbnz	r0, 80034fe <LM35_voidGetTemperature+0x42>
		ret = LM35_OK;
		uint32_t ADC_val = HAL_ADC_GetValue(&hadc1);
 80034e2:	4808      	ldr	r0, [pc, #32]	; (8003504 <LM35_voidGetTemperature+0x48>)
 80034e4:	f7fe fd86 	bl	8001ff4 <HAL_ADC_GetValue>
		uint32_t temp_val = (ADC_val * VREF * REVERED_10mm) / 4059;
 80034e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034ec:	f640 72db 	movw	r2, #4059	; 0xfdb
 80034f0:	4343      	muls	r3, r0
 80034f2:	fbb3 f3f2 	udiv	r3, r3, r2
		Node_temp_prt->Data= temp_val;
 80034f6:	80eb      	strh	r3, [r5, #6]
		}
	}
	return ret;
}
 80034f8:	4620      	mov	r0, r4
 80034fa:	b004      	add	sp, #16
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
	LM35_status ret = LM35_ERROR;
 80034fe:	2401      	movs	r4, #1
 8003500:	e7fa      	b.n	80034f8 <LM35_voidGetTemperature+0x3c>
 8003502:	bf00      	nop
 8003504:	20000250 	.word	0x20000250

08003508 <LM35_voidInit>:

LM35_status LM35_voidInit(Node_t * Node_temp_prt)
{
	LM35_status ret = LM35_ERROR;
	if (Node_temp_prt != NULL) {
 8003508:	b138      	cbz	r0, 800351a <LM35_voidInit+0x12>
		Node_temp_prt->NodeType = "NS";
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <LM35_voidInit+0x18>)
 800350c:	6003      	str	r3, [r0, #0]
		Node_temp_prt->NodeID = 0x80;
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	7103      	strb	r3, [r0, #4]
		Node_temp_prt->Data = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	80c3      	strh	r3, [r0, #6]
		ret = LM35_OK;
 8003516:	4618      	mov	r0, r3
 8003518:	4770      	bx	lr
	LM35_status ret = LM35_ERROR;
 800351a:	2001      	movs	r0, #1
	}
	return ret;
}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	08007044 	.word	0x08007044

08003524 <LM35_voidDeInit>:

LM35_status LM35_voidDeInit(Node_t * Node_temp_prt)
{
	LM35_status ret = LM35_ERROR;
	if (Node_temp_prt != NULL) {
 8003524:	b130      	cbz	r0, 8003534 <LM35_voidDeInit+0x10>
		Node_temp_prt->NodeType = NULL;
 8003526:	2300      	movs	r3, #0
		Node_temp_prt->NodeID = 0x80;
 8003528:	2280      	movs	r2, #128	; 0x80
		Node_temp_prt->NodeType = NULL;
 800352a:	6003      	str	r3, [r0, #0]
		Node_temp_prt->NodeID = 0x80;
 800352c:	7102      	strb	r2, [r0, #4]
		Node_temp_prt->Data = NULL;
 800352e:	80c3      	strh	r3, [r0, #6]
		ret = LM35_OK;
 8003530:	4618      	mov	r0, r3
 8003532:	4770      	bx	lr
	LM35_status ret = LM35_ERROR;
 8003534:	2001      	movs	r0, #1
	}
	return ret;
}
 8003536:	4770      	bx	lr

08003538 <RELAY_voidInit>:


RELAY_status RELAY_voidInit(Node_t * Node_relay_prt)
{
	RELAY_status ret = RELAY_ERROR;
		if (Node_relay_prt != NULL) {
 8003538:	b138      	cbz	r0, 800354a <RELAY_voidInit+0x12>
			Node_relay_prt->NodeType = "NA";
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <RELAY_voidInit+0x18>)
 800353c:	6003      	str	r3, [r0, #0]
			Node_relay_prt->NodeID = 0x50;
 800353e:	2350      	movs	r3, #80	; 0x50
 8003540:	7103      	strb	r3, [r0, #4]
			Node_relay_prt->Data = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	80c3      	strh	r3, [r0, #6]
			ret = RELAY_OK;
 8003546:	4618      	mov	r0, r3
 8003548:	4770      	bx	lr
	RELAY_status ret = RELAY_ERROR;
 800354a:	2001      	movs	r0, #1
		}
		return ret;
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	08006f97 	.word	0x08006f97

08003554 <RELAY_voidSetPin>:

RELAY_status RELAY_voidSetPin(Node_t * Node_relay_prt)
{
 8003554:	b508      	push	{r3, lr}
	RELAY_status ret = RELAY_ERROR;
			if (Node_relay_prt != NULL) {
 8003556:	b138      	cbz	r0, 8003568 <RELAY_voidSetPin+0x14>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, Node_relay_prt->Data);
 8003558:	7982      	ldrb	r2, [r0, #6]
 800355a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800355e:	4803      	ldr	r0, [pc, #12]	; (800356c <RELAY_voidSetPin+0x18>)
 8003560:	f7ff f8ae 	bl	80026c0 <HAL_GPIO_WritePin>
				ret = RELAY_OK;
 8003564:	2000      	movs	r0, #0
			}
			return ret;
}
 8003566:	bd08      	pop	{r3, pc}
	RELAY_status ret = RELAY_ERROR;
 8003568:	2001      	movs	r0, #1
 800356a:	e7fc      	b.n	8003566 <RELAY_voidSetPin+0x12>
 800356c:	40010800 	.word	0x40010800

08003570 <RELAY_voidDeInit>:

RELAY_status RELAY_voidDeInit(Node_t * Node_relay_prt)
{
	RELAY_status ret = RELAY_ERROR;
		if (Node_relay_prt != NULL) {
 8003570:	b130      	cbz	r0, 8003580 <RELAY_voidDeInit+0x10>
			Node_relay_prt->NodeType = NULL;
 8003572:	2300      	movs	r3, #0
			Node_relay_prt->NodeID = 0x50;
 8003574:	2250      	movs	r2, #80	; 0x50
			Node_relay_prt->NodeType = NULL;
 8003576:	6003      	str	r3, [r0, #0]
			Node_relay_prt->NodeID = 0x50;
 8003578:	7102      	strb	r2, [r0, #4]
			Node_relay_prt->Data = NULL;
 800357a:	80c3      	strh	r3, [r0, #6]
			ret = RELAY_OK;
 800357c:	4618      	mov	r0, r3
 800357e:	4770      	bx	lr
	RELAY_status ret = RELAY_ERROR;
 8003580:	2001      	movs	r0, #1
		}
		return ret;
}
 8003582:	4770      	bx	lr

08003584 <atoi>:
 8003584:	220a      	movs	r2, #10
 8003586:	2100      	movs	r1, #0
 8003588:	f000 bf96 	b.w	80044b8 <strtol>

0800358c <malloc>:
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <malloc+0xc>)
 800358e:	4601      	mov	r1, r0
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	f000 b82b 	b.w	80035ec <_malloc_r>
 8003596:	bf00      	nop
 8003598:	200001dc 	.word	0x200001dc

0800359c <free>:
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <free+0xc>)
 800359e:	4601      	mov	r1, r0
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	f001 b9bb 	b.w	800491c <_free_r>
 80035a6:	bf00      	nop
 80035a8:	200001dc 	.word	0x200001dc

080035ac <sbrk_aligned>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4e0e      	ldr	r6, [pc, #56]	; (80035e8 <sbrk_aligned+0x3c>)
 80035b0:	460c      	mov	r4, r1
 80035b2:	6831      	ldr	r1, [r6, #0]
 80035b4:	4605      	mov	r5, r0
 80035b6:	b911      	cbnz	r1, 80035be <sbrk_aligned+0x12>
 80035b8:	f001 f944 	bl	8004844 <_sbrk_r>
 80035bc:	6030      	str	r0, [r6, #0]
 80035be:	4621      	mov	r1, r4
 80035c0:	4628      	mov	r0, r5
 80035c2:	f001 f93f 	bl	8004844 <_sbrk_r>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d00a      	beq.n	80035e0 <sbrk_aligned+0x34>
 80035ca:	1cc4      	adds	r4, r0, #3
 80035cc:	f024 0403 	bic.w	r4, r4, #3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d007      	beq.n	80035e4 <sbrk_aligned+0x38>
 80035d4:	1a21      	subs	r1, r4, r0
 80035d6:	4628      	mov	r0, r5
 80035d8:	f001 f934 	bl	8004844 <_sbrk_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d101      	bne.n	80035e4 <sbrk_aligned+0x38>
 80035e0:	f04f 34ff 	mov.w	r4, #4294967295
 80035e4:	4620      	mov	r0, r4
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	20000308 	.word	0x20000308

080035ec <_malloc_r>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	1ccd      	adds	r5, r1, #3
 80035f2:	f025 0503 	bic.w	r5, r5, #3
 80035f6:	3508      	adds	r5, #8
 80035f8:	2d0c      	cmp	r5, #12
 80035fa:	bf38      	it	cc
 80035fc:	250c      	movcc	r5, #12
 80035fe:	2d00      	cmp	r5, #0
 8003600:	4607      	mov	r7, r0
 8003602:	db01      	blt.n	8003608 <_malloc_r+0x1c>
 8003604:	42a9      	cmp	r1, r5
 8003606:	d905      	bls.n	8003614 <_malloc_r+0x28>
 8003608:	230c      	movs	r3, #12
 800360a:	2600      	movs	r6, #0
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4630      	mov	r0, r6
 8003610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036e8 <_malloc_r+0xfc>
 8003618:	f000 f868 	bl	80036ec <__malloc_lock>
 800361c:	f8d8 3000 	ldr.w	r3, [r8]
 8003620:	461c      	mov	r4, r3
 8003622:	bb5c      	cbnz	r4, 800367c <_malloc_r+0x90>
 8003624:	4629      	mov	r1, r5
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff ffc0 	bl	80035ac <sbrk_aligned>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	4604      	mov	r4, r0
 8003630:	d155      	bne.n	80036de <_malloc_r+0xf2>
 8003632:	f8d8 4000 	ldr.w	r4, [r8]
 8003636:	4626      	mov	r6, r4
 8003638:	2e00      	cmp	r6, #0
 800363a:	d145      	bne.n	80036c8 <_malloc_r+0xdc>
 800363c:	2c00      	cmp	r4, #0
 800363e:	d048      	beq.n	80036d2 <_malloc_r+0xe6>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	4631      	mov	r1, r6
 8003644:	4638      	mov	r0, r7
 8003646:	eb04 0903 	add.w	r9, r4, r3
 800364a:	f001 f8fb 	bl	8004844 <_sbrk_r>
 800364e:	4581      	cmp	r9, r0
 8003650:	d13f      	bne.n	80036d2 <_malloc_r+0xe6>
 8003652:	6821      	ldr	r1, [r4, #0]
 8003654:	4638      	mov	r0, r7
 8003656:	1a6d      	subs	r5, r5, r1
 8003658:	4629      	mov	r1, r5
 800365a:	f7ff ffa7 	bl	80035ac <sbrk_aligned>
 800365e:	3001      	adds	r0, #1
 8003660:	d037      	beq.n	80036d2 <_malloc_r+0xe6>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	442b      	add	r3, r5
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d038      	beq.n	80036e2 <_malloc_r+0xf6>
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	42a2      	cmp	r2, r4
 8003674:	d12b      	bne.n	80036ce <_malloc_r+0xe2>
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e00f      	b.n	800369c <_malloc_r+0xb0>
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	1b52      	subs	r2, r2, r5
 8003680:	d41f      	bmi.n	80036c2 <_malloc_r+0xd6>
 8003682:	2a0b      	cmp	r2, #11
 8003684:	d917      	bls.n	80036b6 <_malloc_r+0xca>
 8003686:	1961      	adds	r1, r4, r5
 8003688:	42a3      	cmp	r3, r4
 800368a:	6025      	str	r5, [r4, #0]
 800368c:	bf18      	it	ne
 800368e:	6059      	strne	r1, [r3, #4]
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	bf08      	it	eq
 8003694:	f8c8 1000 	streq.w	r1, [r8]
 8003698:	5162      	str	r2, [r4, r5]
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	4638      	mov	r0, r7
 800369e:	f104 060b 	add.w	r6, r4, #11
 80036a2:	f000 f829 	bl	80036f8 <__malloc_unlock>
 80036a6:	f026 0607 	bic.w	r6, r6, #7
 80036aa:	1d23      	adds	r3, r4, #4
 80036ac:	1af2      	subs	r2, r6, r3
 80036ae:	d0ae      	beq.n	800360e <_malloc_r+0x22>
 80036b0:	1b9b      	subs	r3, r3, r6
 80036b2:	50a3      	str	r3, [r4, r2]
 80036b4:	e7ab      	b.n	800360e <_malloc_r+0x22>
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	6862      	ldr	r2, [r4, #4]
 80036ba:	d1dd      	bne.n	8003678 <_malloc_r+0x8c>
 80036bc:	f8c8 2000 	str.w	r2, [r8]
 80036c0:	e7ec      	b.n	800369c <_malloc_r+0xb0>
 80036c2:	4623      	mov	r3, r4
 80036c4:	6864      	ldr	r4, [r4, #4]
 80036c6:	e7ac      	b.n	8003622 <_malloc_r+0x36>
 80036c8:	4634      	mov	r4, r6
 80036ca:	6876      	ldr	r6, [r6, #4]
 80036cc:	e7b4      	b.n	8003638 <_malloc_r+0x4c>
 80036ce:	4613      	mov	r3, r2
 80036d0:	e7cc      	b.n	800366c <_malloc_r+0x80>
 80036d2:	230c      	movs	r3, #12
 80036d4:	4638      	mov	r0, r7
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	f000 f80e 	bl	80036f8 <__malloc_unlock>
 80036dc:	e797      	b.n	800360e <_malloc_r+0x22>
 80036de:	6025      	str	r5, [r4, #0]
 80036e0:	e7dc      	b.n	800369c <_malloc_r+0xb0>
 80036e2:	605b      	str	r3, [r3, #4]
 80036e4:	deff      	udf	#255	; 0xff
 80036e6:	bf00      	nop
 80036e8:	20000304 	.word	0x20000304

080036ec <__malloc_lock>:
 80036ec:	4801      	ldr	r0, [pc, #4]	; (80036f4 <__malloc_lock+0x8>)
 80036ee:	f001 b8f6 	b.w	80048de <__retarget_lock_acquire_recursive>
 80036f2:	bf00      	nop
 80036f4:	2000044c 	.word	0x2000044c

080036f8 <__malloc_unlock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_unlock+0x8>)
 80036fa:	f001 b8f1 	b.w	80048e0 <__retarget_lock_release_recursive>
 80036fe:	bf00      	nop
 8003700:	2000044c 	.word	0x2000044c

08003704 <realloc>:
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <realloc+0xc>)
 8003706:	460a      	mov	r2, r1
 8003708:	4601      	mov	r1, r0
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	f000 b802 	b.w	8003714 <_realloc_r>
 8003710:	200001dc 	.word	0x200001dc

08003714 <_realloc_r>:
 8003714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003718:	4680      	mov	r8, r0
 800371a:	4614      	mov	r4, r2
 800371c:	460e      	mov	r6, r1
 800371e:	b921      	cbnz	r1, 800372a <_realloc_r+0x16>
 8003720:	4611      	mov	r1, r2
 8003722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003726:	f7ff bf61 	b.w	80035ec <_malloc_r>
 800372a:	b92a      	cbnz	r2, 8003738 <_realloc_r+0x24>
 800372c:	f001 f8f6 	bl	800491c <_free_r>
 8003730:	4625      	mov	r5, r4
 8003732:	4628      	mov	r0, r5
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003738:	f002 f940 	bl	80059bc <_malloc_usable_size_r>
 800373c:	4284      	cmp	r4, r0
 800373e:	4607      	mov	r7, r0
 8003740:	d802      	bhi.n	8003748 <_realloc_r+0x34>
 8003742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003746:	d812      	bhi.n	800376e <_realloc_r+0x5a>
 8003748:	4621      	mov	r1, r4
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff ff4e 	bl	80035ec <_malloc_r>
 8003750:	4605      	mov	r5, r0
 8003752:	2800      	cmp	r0, #0
 8003754:	d0ed      	beq.n	8003732 <_realloc_r+0x1e>
 8003756:	42bc      	cmp	r4, r7
 8003758:	4622      	mov	r2, r4
 800375a:	4631      	mov	r1, r6
 800375c:	bf28      	it	cs
 800375e:	463a      	movcs	r2, r7
 8003760:	f001 f8c7 	bl	80048f2 <memcpy>
 8003764:	4631      	mov	r1, r6
 8003766:	4640      	mov	r0, r8
 8003768:	f001 f8d8 	bl	800491c <_free_r>
 800376c:	e7e1      	b.n	8003732 <_realloc_r+0x1e>
 800376e:	4635      	mov	r5, r6
 8003770:	e7df      	b.n	8003732 <_realloc_r+0x1e>

08003772 <sulp>:
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	460f      	mov	r7, r1
 8003778:	4690      	mov	r8, r2
 800377a:	f001 ffef 	bl	800575c <__ulp>
 800377e:	4604      	mov	r4, r0
 8003780:	460d      	mov	r5, r1
 8003782:	f1b8 0f00 	cmp.w	r8, #0
 8003786:	d011      	beq.n	80037ac <sulp+0x3a>
 8003788:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800378c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003790:	2b00      	cmp	r3, #0
 8003792:	dd0b      	ble.n	80037ac <sulp+0x3a>
 8003794:	2400      	movs	r4, #0
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800379c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80037a0:	4622      	mov	r2, r4
 80037a2:	462b      	mov	r3, r5
 80037a4:	f7fc fea2 	bl	80004ec <__aeabi_dmul>
 80037a8:	4604      	mov	r4, r0
 80037aa:	460d      	mov	r5, r1
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037b4:	0000      	movs	r0, r0
	...

080037b8 <_strtod_l>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b09f      	sub	sp, #124	; 0x7c
 80037be:	9217      	str	r2, [sp, #92]	; 0x5c
 80037c0:	2200      	movs	r2, #0
 80037c2:	4604      	mov	r4, r0
 80037c4:	921a      	str	r2, [sp, #104]	; 0x68
 80037c6:	460d      	mov	r5, r1
 80037c8:	f04f 0800 	mov.w	r8, #0
 80037cc:	f04f 0900 	mov.w	r9, #0
 80037d0:	460a      	mov	r2, r1
 80037d2:	9219      	str	r2, [sp, #100]	; 0x64
 80037d4:	7811      	ldrb	r1, [r2, #0]
 80037d6:	292b      	cmp	r1, #43	; 0x2b
 80037d8:	d04a      	beq.n	8003870 <_strtod_l+0xb8>
 80037da:	d838      	bhi.n	800384e <_strtod_l+0x96>
 80037dc:	290d      	cmp	r1, #13
 80037de:	d832      	bhi.n	8003846 <_strtod_l+0x8e>
 80037e0:	2908      	cmp	r1, #8
 80037e2:	d832      	bhi.n	800384a <_strtod_l+0x92>
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d03b      	beq.n	8003860 <_strtod_l+0xa8>
 80037e8:	2200      	movs	r2, #0
 80037ea:	920e      	str	r2, [sp, #56]	; 0x38
 80037ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80037ee:	7832      	ldrb	r2, [r6, #0]
 80037f0:	2a30      	cmp	r2, #48	; 0x30
 80037f2:	f040 80b2 	bne.w	800395a <_strtod_l+0x1a2>
 80037f6:	7872      	ldrb	r2, [r6, #1]
 80037f8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80037fc:	2a58      	cmp	r2, #88	; 0x58
 80037fe:	d16e      	bne.n	80038de <_strtod_l+0x126>
 8003800:	9302      	str	r3, [sp, #8]
 8003802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003804:	4620      	mov	r0, r4
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	ab1a      	add	r3, sp, #104	; 0x68
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4a8c      	ldr	r2, [pc, #560]	; (8003a40 <_strtod_l+0x288>)
 800380e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003810:	a919      	add	r1, sp, #100	; 0x64
 8003812:	f001 f933 	bl	8004a7c <__gethex>
 8003816:	f010 070f 	ands.w	r7, r0, #15
 800381a:	4605      	mov	r5, r0
 800381c:	d005      	beq.n	800382a <_strtod_l+0x72>
 800381e:	2f06      	cmp	r7, #6
 8003820:	d128      	bne.n	8003874 <_strtod_l+0xbc>
 8003822:	2300      	movs	r3, #0
 8003824:	3601      	adds	r6, #1
 8003826:	9619      	str	r6, [sp, #100]	; 0x64
 8003828:	930e      	str	r3, [sp, #56]	; 0x38
 800382a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 85a0 	bne.w	8004372 <_strtod_l+0xbba>
 8003832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003834:	b1cb      	cbz	r3, 800386a <_strtod_l+0xb2>
 8003836:	4642      	mov	r2, r8
 8003838:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	b01f      	add	sp, #124	; 0x7c
 8003842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003846:	2920      	cmp	r1, #32
 8003848:	d1ce      	bne.n	80037e8 <_strtod_l+0x30>
 800384a:	3201      	adds	r2, #1
 800384c:	e7c1      	b.n	80037d2 <_strtod_l+0x1a>
 800384e:	292d      	cmp	r1, #45	; 0x2d
 8003850:	d1ca      	bne.n	80037e8 <_strtod_l+0x30>
 8003852:	2101      	movs	r1, #1
 8003854:	910e      	str	r1, [sp, #56]	; 0x38
 8003856:	1c51      	adds	r1, r2, #1
 8003858:	9119      	str	r1, [sp, #100]	; 0x64
 800385a:	7852      	ldrb	r2, [r2, #1]
 800385c:	2a00      	cmp	r2, #0
 800385e:	d1c5      	bne.n	80037ec <_strtod_l+0x34>
 8003860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003862:	9519      	str	r5, [sp, #100]	; 0x64
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8582 	bne.w	800436e <_strtod_l+0xbb6>
 800386a:	4642      	mov	r2, r8
 800386c:	464b      	mov	r3, r9
 800386e:	e7e5      	b.n	800383c <_strtod_l+0x84>
 8003870:	2100      	movs	r1, #0
 8003872:	e7ef      	b.n	8003854 <_strtod_l+0x9c>
 8003874:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003876:	b13a      	cbz	r2, 8003888 <_strtod_l+0xd0>
 8003878:	2135      	movs	r1, #53	; 0x35
 800387a:	a81c      	add	r0, sp, #112	; 0x70
 800387c:	f002 f85a 	bl	8005934 <__copybits>
 8003880:	4620      	mov	r0, r4
 8003882:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003884:	f001 fc3e 	bl	8005104 <_Bfree>
 8003888:	3f01      	subs	r7, #1
 800388a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800388c:	2f04      	cmp	r7, #4
 800388e:	d806      	bhi.n	800389e <_strtod_l+0xe6>
 8003890:	e8df f007 	tbb	[pc, r7]
 8003894:	201d0314 	.word	0x201d0314
 8003898:	14          	.byte	0x14
 8003899:	00          	.byte	0x00
 800389a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800389e:	05e9      	lsls	r1, r5, #23
 80038a0:	bf48      	it	mi
 80038a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80038a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80038aa:	0d1b      	lsrs	r3, r3, #20
 80038ac:	051b      	lsls	r3, r3, #20
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1bb      	bne.n	800382a <_strtod_l+0x72>
 80038b2:	f000 ffe9 	bl	8004888 <__errno>
 80038b6:	2322      	movs	r3, #34	; 0x22
 80038b8:	6003      	str	r3, [r0, #0]
 80038ba:	e7b6      	b.n	800382a <_strtod_l+0x72>
 80038bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80038c0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80038c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80038cc:	e7e7      	b.n	800389e <_strtod_l+0xe6>
 80038ce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8003a44 <_strtod_l+0x28c>
 80038d2:	e7e4      	b.n	800389e <_strtod_l+0xe6>
 80038d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80038d8:	f04f 38ff 	mov.w	r8, #4294967295
 80038dc:	e7df      	b.n	800389e <_strtod_l+0xe6>
 80038de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	9219      	str	r2, [sp, #100]	; 0x64
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d0f9      	beq.n	80038de <_strtod_l+0x126>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d09d      	beq.n	800382a <_strtod_l+0x72>
 80038ee:	2301      	movs	r3, #1
 80038f0:	f04f 0a00 	mov.w	sl, #0
 80038f4:	220a      	movs	r2, #10
 80038f6:	46d3      	mov	fp, sl
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038fc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8003900:	930b      	str	r3, [sp, #44]	; 0x2c
 8003902:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003904:	7806      	ldrb	r6, [r0, #0]
 8003906:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800390a:	b2d9      	uxtb	r1, r3
 800390c:	2909      	cmp	r1, #9
 800390e:	d926      	bls.n	800395e <_strtod_l+0x1a6>
 8003910:	2201      	movs	r2, #1
 8003912:	494d      	ldr	r1, [pc, #308]	; (8003a48 <_strtod_l+0x290>)
 8003914:	f000 ff4f 	bl	80047b6 <strncmp>
 8003918:	2800      	cmp	r0, #0
 800391a:	d030      	beq.n	800397e <_strtod_l+0x1c6>
 800391c:	2000      	movs	r0, #0
 800391e:	4632      	mov	r2, r6
 8003920:	4603      	mov	r3, r0
 8003922:	465e      	mov	r6, fp
 8003924:	9008      	str	r0, [sp, #32]
 8003926:	2a65      	cmp	r2, #101	; 0x65
 8003928:	d001      	beq.n	800392e <_strtod_l+0x176>
 800392a:	2a45      	cmp	r2, #69	; 0x45
 800392c:	d113      	bne.n	8003956 <_strtod_l+0x19e>
 800392e:	b91e      	cbnz	r6, 8003938 <_strtod_l+0x180>
 8003930:	9a05      	ldr	r2, [sp, #20]
 8003932:	4302      	orrs	r2, r0
 8003934:	d094      	beq.n	8003860 <_strtod_l+0xa8>
 8003936:	2600      	movs	r6, #0
 8003938:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800393a:	1c6a      	adds	r2, r5, #1
 800393c:	9219      	str	r2, [sp, #100]	; 0x64
 800393e:	786a      	ldrb	r2, [r5, #1]
 8003940:	2a2b      	cmp	r2, #43	; 0x2b
 8003942:	d074      	beq.n	8003a2e <_strtod_l+0x276>
 8003944:	2a2d      	cmp	r2, #45	; 0x2d
 8003946:	d078      	beq.n	8003a3a <_strtod_l+0x282>
 8003948:	f04f 0c00 	mov.w	ip, #0
 800394c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003950:	2909      	cmp	r1, #9
 8003952:	d97f      	bls.n	8003a54 <_strtod_l+0x29c>
 8003954:	9519      	str	r5, [sp, #100]	; 0x64
 8003956:	2700      	movs	r7, #0
 8003958:	e09e      	b.n	8003a98 <_strtod_l+0x2e0>
 800395a:	2300      	movs	r3, #0
 800395c:	e7c8      	b.n	80038f0 <_strtod_l+0x138>
 800395e:	f1bb 0f08 	cmp.w	fp, #8
 8003962:	bfd8      	it	le
 8003964:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8003966:	f100 0001 	add.w	r0, r0, #1
 800396a:	bfd6      	itet	le
 800396c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003970:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8003974:	930a      	strle	r3, [sp, #40]	; 0x28
 8003976:	f10b 0b01 	add.w	fp, fp, #1
 800397a:	9019      	str	r0, [sp, #100]	; 0x64
 800397c:	e7c1      	b.n	8003902 <_strtod_l+0x14a>
 800397e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	9219      	str	r2, [sp, #100]	; 0x64
 8003984:	785a      	ldrb	r2, [r3, #1]
 8003986:	f1bb 0f00 	cmp.w	fp, #0
 800398a:	d037      	beq.n	80039fc <_strtod_l+0x244>
 800398c:	465e      	mov	r6, fp
 800398e:	9008      	str	r0, [sp, #32]
 8003990:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003994:	2b09      	cmp	r3, #9
 8003996:	d912      	bls.n	80039be <_strtod_l+0x206>
 8003998:	2301      	movs	r3, #1
 800399a:	e7c4      	b.n	8003926 <_strtod_l+0x16e>
 800399c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800399e:	3001      	adds	r0, #1
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	9219      	str	r2, [sp, #100]	; 0x64
 80039a4:	785a      	ldrb	r2, [r3, #1]
 80039a6:	2a30      	cmp	r2, #48	; 0x30
 80039a8:	d0f8      	beq.n	800399c <_strtod_l+0x1e4>
 80039aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	f200 84e4 	bhi.w	800437c <_strtod_l+0xbc4>
 80039b4:	9008      	str	r0, [sp, #32]
 80039b6:	2000      	movs	r0, #0
 80039b8:	4606      	mov	r6, r0
 80039ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80039be:	3a30      	subs	r2, #48	; 0x30
 80039c0:	f100 0301 	add.w	r3, r0, #1
 80039c4:	d014      	beq.n	80039f0 <_strtod_l+0x238>
 80039c6:	9908      	ldr	r1, [sp, #32]
 80039c8:	eb00 0c06 	add.w	ip, r0, r6
 80039cc:	4419      	add	r1, r3
 80039ce:	9108      	str	r1, [sp, #32]
 80039d0:	4633      	mov	r3, r6
 80039d2:	210a      	movs	r1, #10
 80039d4:	4563      	cmp	r3, ip
 80039d6:	d113      	bne.n	8003a00 <_strtod_l+0x248>
 80039d8:	1833      	adds	r3, r6, r0
 80039da:	2b08      	cmp	r3, #8
 80039dc:	f106 0601 	add.w	r6, r6, #1
 80039e0:	4406      	add	r6, r0
 80039e2:	dc1a      	bgt.n	8003a1a <_strtod_l+0x262>
 80039e4:	230a      	movs	r3, #10
 80039e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80039e8:	fb03 2301 	mla	r3, r3, r1, r2
 80039ec:	930a      	str	r3, [sp, #40]	; 0x28
 80039ee:	2300      	movs	r3, #0
 80039f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80039f2:	4618      	mov	r0, r3
 80039f4:	1c51      	adds	r1, r2, #1
 80039f6:	9119      	str	r1, [sp, #100]	; 0x64
 80039f8:	7852      	ldrb	r2, [r2, #1]
 80039fa:	e7c9      	b.n	8003990 <_strtod_l+0x1d8>
 80039fc:	4658      	mov	r0, fp
 80039fe:	e7d2      	b.n	80039a6 <_strtod_l+0x1ee>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	f103 0301 	add.w	r3, r3, #1
 8003a06:	dc03      	bgt.n	8003a10 <_strtod_l+0x258>
 8003a08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003a0a:	434f      	muls	r7, r1
 8003a0c:	970a      	str	r7, [sp, #40]	; 0x28
 8003a0e:	e7e1      	b.n	80039d4 <_strtod_l+0x21c>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	bfd8      	it	le
 8003a14:	fb01 fa0a 	mulle.w	sl, r1, sl
 8003a18:	e7dc      	b.n	80039d4 <_strtod_l+0x21c>
 8003a1a:	2e10      	cmp	r6, #16
 8003a1c:	bfdc      	itt	le
 8003a1e:	230a      	movle	r3, #10
 8003a20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8003a24:	e7e3      	b.n	80039ee <_strtod_l+0x236>
 8003a26:	2300      	movs	r3, #0
 8003a28:	9308      	str	r3, [sp, #32]
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e780      	b.n	8003930 <_strtod_l+0x178>
 8003a2e:	f04f 0c00 	mov.w	ip, #0
 8003a32:	1caa      	adds	r2, r5, #2
 8003a34:	9219      	str	r2, [sp, #100]	; 0x64
 8003a36:	78aa      	ldrb	r2, [r5, #2]
 8003a38:	e788      	b.n	800394c <_strtod_l+0x194>
 8003a3a:	f04f 0c01 	mov.w	ip, #1
 8003a3e:	e7f8      	b.n	8003a32 <_strtod_l+0x27a>
 8003a40:	08007058 	.word	0x08007058
 8003a44:	7ff00000 	.word	0x7ff00000
 8003a48:	08007047 	.word	0x08007047
 8003a4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a4e:	1c51      	adds	r1, r2, #1
 8003a50:	9119      	str	r1, [sp, #100]	; 0x64
 8003a52:	7852      	ldrb	r2, [r2, #1]
 8003a54:	2a30      	cmp	r2, #48	; 0x30
 8003a56:	d0f9      	beq.n	8003a4c <_strtod_l+0x294>
 8003a58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003a5c:	2908      	cmp	r1, #8
 8003a5e:	f63f af7a 	bhi.w	8003956 <_strtod_l+0x19e>
 8003a62:	3a30      	subs	r2, #48	; 0x30
 8003a64:	9209      	str	r2, [sp, #36]	; 0x24
 8003a66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a68:	920c      	str	r2, [sp, #48]	; 0x30
 8003a6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a6c:	1c57      	adds	r7, r2, #1
 8003a6e:	9719      	str	r7, [sp, #100]	; 0x64
 8003a70:	7852      	ldrb	r2, [r2, #1]
 8003a72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003a76:	f1be 0f09 	cmp.w	lr, #9
 8003a7a:	d938      	bls.n	8003aee <_strtod_l+0x336>
 8003a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a7e:	1a7f      	subs	r7, r7, r1
 8003a80:	2f08      	cmp	r7, #8
 8003a82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003a86:	dc03      	bgt.n	8003a90 <_strtod_l+0x2d8>
 8003a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a8a:	428f      	cmp	r7, r1
 8003a8c:	bfa8      	it	ge
 8003a8e:	460f      	movge	r7, r1
 8003a90:	f1bc 0f00 	cmp.w	ip, #0
 8003a94:	d000      	beq.n	8003a98 <_strtod_l+0x2e0>
 8003a96:	427f      	negs	r7, r7
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	d14f      	bne.n	8003b3c <_strtod_l+0x384>
 8003a9c:	9905      	ldr	r1, [sp, #20]
 8003a9e:	4301      	orrs	r1, r0
 8003aa0:	f47f aec3 	bne.w	800382a <_strtod_l+0x72>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f aedb 	bne.w	8003860 <_strtod_l+0xa8>
 8003aaa:	2a69      	cmp	r2, #105	; 0x69
 8003aac:	d029      	beq.n	8003b02 <_strtod_l+0x34a>
 8003aae:	dc26      	bgt.n	8003afe <_strtod_l+0x346>
 8003ab0:	2a49      	cmp	r2, #73	; 0x49
 8003ab2:	d026      	beq.n	8003b02 <_strtod_l+0x34a>
 8003ab4:	2a4e      	cmp	r2, #78	; 0x4e
 8003ab6:	f47f aed3 	bne.w	8003860 <_strtod_l+0xa8>
 8003aba:	499a      	ldr	r1, [pc, #616]	; (8003d24 <_strtod_l+0x56c>)
 8003abc:	a819      	add	r0, sp, #100	; 0x64
 8003abe:	f001 fa1f 	bl	8004f00 <__match>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f43f aecc 	beq.w	8003860 <_strtod_l+0xa8>
 8003ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b28      	cmp	r3, #40	; 0x28
 8003ace:	d12f      	bne.n	8003b30 <_strtod_l+0x378>
 8003ad0:	4995      	ldr	r1, [pc, #596]	; (8003d28 <_strtod_l+0x570>)
 8003ad2:	aa1c      	add	r2, sp, #112	; 0x70
 8003ad4:	a819      	add	r0, sp, #100	; 0x64
 8003ad6:	f001 fa27 	bl	8004f28 <__hexnan>
 8003ada:	2805      	cmp	r0, #5
 8003adc:	d128      	bne.n	8003b30 <_strtod_l+0x378>
 8003ade:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ae0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003ae4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ae8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003aec:	e69d      	b.n	800382a <_strtod_l+0x72>
 8003aee:	210a      	movs	r1, #10
 8003af0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003af2:	fb01 2107 	mla	r1, r1, r7, r2
 8003af6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003afa:	9209      	str	r2, [sp, #36]	; 0x24
 8003afc:	e7b5      	b.n	8003a6a <_strtod_l+0x2b2>
 8003afe:	2a6e      	cmp	r2, #110	; 0x6e
 8003b00:	e7d9      	b.n	8003ab6 <_strtod_l+0x2fe>
 8003b02:	498a      	ldr	r1, [pc, #552]	; (8003d2c <_strtod_l+0x574>)
 8003b04:	a819      	add	r0, sp, #100	; 0x64
 8003b06:	f001 f9fb 	bl	8004f00 <__match>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f43f aea8 	beq.w	8003860 <_strtod_l+0xa8>
 8003b10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b12:	4987      	ldr	r1, [pc, #540]	; (8003d30 <_strtod_l+0x578>)
 8003b14:	3b01      	subs	r3, #1
 8003b16:	a819      	add	r0, sp, #100	; 0x64
 8003b18:	9319      	str	r3, [sp, #100]	; 0x64
 8003b1a:	f001 f9f1 	bl	8004f00 <__match>
 8003b1e:	b910      	cbnz	r0, 8003b26 <_strtod_l+0x36e>
 8003b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b22:	3301      	adds	r3, #1
 8003b24:	9319      	str	r3, [sp, #100]	; 0x64
 8003b26:	f04f 0800 	mov.w	r8, #0
 8003b2a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8003d34 <_strtod_l+0x57c>
 8003b2e:	e67c      	b.n	800382a <_strtod_l+0x72>
 8003b30:	4881      	ldr	r0, [pc, #516]	; (8003d38 <_strtod_l+0x580>)
 8003b32:	f000 feed 	bl	8004910 <nan>
 8003b36:	4680      	mov	r8, r0
 8003b38:	4689      	mov	r9, r1
 8003b3a:	e676      	b.n	800382a <_strtod_l+0x72>
 8003b3c:	9b08      	ldr	r3, [sp, #32]
 8003b3e:	f1bb 0f00 	cmp.w	fp, #0
 8003b42:	bf08      	it	eq
 8003b44:	46b3      	moveq	fp, r6
 8003b46:	1afb      	subs	r3, r7, r3
 8003b48:	2e10      	cmp	r6, #16
 8003b4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b4c:	4635      	mov	r5, r6
 8003b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b50:	bfa8      	it	ge
 8003b52:	2510      	movge	r5, #16
 8003b54:	f7fc fc50 	bl	80003f8 <__aeabi_ui2d>
 8003b58:	2e09      	cmp	r6, #9
 8003b5a:	4680      	mov	r8, r0
 8003b5c:	4689      	mov	r9, r1
 8003b5e:	dd13      	ble.n	8003b88 <_strtod_l+0x3d0>
 8003b60:	4b76      	ldr	r3, [pc, #472]	; (8003d3c <_strtod_l+0x584>)
 8003b62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003b66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003b6a:	f7fc fcbf 	bl	80004ec <__aeabi_dmul>
 8003b6e:	4680      	mov	r8, r0
 8003b70:	4650      	mov	r0, sl
 8003b72:	4689      	mov	r9, r1
 8003b74:	f7fc fc40 	bl	80003f8 <__aeabi_ui2d>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	4649      	mov	r1, r9
 8003b80:	f7fc fafe 	bl	8000180 <__adddf3>
 8003b84:	4680      	mov	r8, r0
 8003b86:	4689      	mov	r9, r1
 8003b88:	2e0f      	cmp	r6, #15
 8003b8a:	dc36      	bgt.n	8003bfa <_strtod_l+0x442>
 8003b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f43f ae4b 	beq.w	800382a <_strtod_l+0x72>
 8003b94:	dd22      	ble.n	8003bdc <_strtod_l+0x424>
 8003b96:	2b16      	cmp	r3, #22
 8003b98:	dc09      	bgt.n	8003bae <_strtod_l+0x3f6>
 8003b9a:	4968      	ldr	r1, [pc, #416]	; (8003d3c <_strtod_l+0x584>)
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ba8:	f7fc fca0 	bl	80004ec <__aeabi_dmul>
 8003bac:	e7c3      	b.n	8003b36 <_strtod_l+0x37e>
 8003bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bb0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	db20      	blt.n	8003bfa <_strtod_l+0x442>
 8003bb8:	4c60      	ldr	r4, [pc, #384]	; (8003d3c <_strtod_l+0x584>)
 8003bba:	f1c6 060f 	rsb	r6, r6, #15
 8003bbe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc8:	464b      	mov	r3, r9
 8003bca:	f7fc fc8f 	bl	80004ec <__aeabi_dmul>
 8003bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd0:	1b9e      	subs	r6, r3, r6
 8003bd2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8003bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003bda:	e7e5      	b.n	8003ba8 <_strtod_l+0x3f0>
 8003bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bde:	3316      	adds	r3, #22
 8003be0:	db0b      	blt.n	8003bfa <_strtod_l+0x442>
 8003be2:	9b08      	ldr	r3, [sp, #32]
 8003be4:	4640      	mov	r0, r8
 8003be6:	1bdf      	subs	r7, r3, r7
 8003be8:	4b54      	ldr	r3, [pc, #336]	; (8003d3c <_strtod_l+0x584>)
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf4:	f7fc fda4 	bl	8000740 <__aeabi_ddiv>
 8003bf8:	e79d      	b.n	8003b36 <_strtod_l+0x37e>
 8003bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfc:	1b75      	subs	r5, r6, r5
 8003bfe:	441d      	add	r5, r3
 8003c00:	2d00      	cmp	r5, #0
 8003c02:	dd70      	ble.n	8003ce6 <_strtod_l+0x52e>
 8003c04:	f015 030f 	ands.w	r3, r5, #15
 8003c08:	d00a      	beq.n	8003c20 <_strtod_l+0x468>
 8003c0a:	494c      	ldr	r1, [pc, #304]	; (8003d3c <_strtod_l+0x584>)
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c16:	464b      	mov	r3, r9
 8003c18:	f7fc fc68 	bl	80004ec <__aeabi_dmul>
 8003c1c:	4680      	mov	r8, r0
 8003c1e:	4689      	mov	r9, r1
 8003c20:	f035 050f 	bics.w	r5, r5, #15
 8003c24:	d04d      	beq.n	8003cc2 <_strtod_l+0x50a>
 8003c26:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8003c2a:	dd22      	ble.n	8003c72 <_strtod_l+0x4ba>
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	46b3      	mov	fp, r6
 8003c30:	960b      	str	r6, [sp, #44]	; 0x2c
 8003c32:	9608      	str	r6, [sp, #32]
 8003c34:	2322      	movs	r3, #34	; 0x22
 8003c36:	f04f 0800 	mov.w	r8, #0
 8003c3a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003d34 <_strtod_l+0x57c>
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f43f adf1 	beq.w	800382a <_strtod_l+0x72>
 8003c48:	4620      	mov	r0, r4
 8003c4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c4c:	f001 fa5a 	bl	8005104 <_Bfree>
 8003c50:	4620      	mov	r0, r4
 8003c52:	9908      	ldr	r1, [sp, #32]
 8003c54:	f001 fa56 	bl	8005104 <_Bfree>
 8003c58:	4659      	mov	r1, fp
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f001 fa52 	bl	8005104 <_Bfree>
 8003c60:	4620      	mov	r0, r4
 8003c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c64:	f001 fa4e 	bl	8005104 <_Bfree>
 8003c68:	4631      	mov	r1, r6
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f001 fa4a 	bl	8005104 <_Bfree>
 8003c70:	e5db      	b.n	800382a <_strtod_l+0x72>
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <_strtod_l+0x588>)
 8003c74:	4640      	mov	r0, r8
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	112d      	asrs	r5, r5, #4
 8003c80:	2d01      	cmp	r5, #1
 8003c82:	dc21      	bgt.n	8003cc8 <_strtod_l+0x510>
 8003c84:	b10b      	cbz	r3, 8003c8a <_strtod_l+0x4d2>
 8003c86:	4680      	mov	r8, r0
 8003c88:	4689      	mov	r9, r1
 8003c8a:	492d      	ldr	r1, [pc, #180]	; (8003d40 <_strtod_l+0x588>)
 8003c8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003c90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003c94:	4642      	mov	r2, r8
 8003c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	f7fc fc26 	bl	80004ec <__aeabi_dmul>
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <_strtod_l+0x57c>)
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	4927      	ldr	r1, [pc, #156]	; (8003d44 <_strtod_l+0x58c>)
 8003ca8:	4680      	mov	r8, r0
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d8be      	bhi.n	8003c2c <_strtod_l+0x474>
 8003cae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	bf86      	itte	hi
 8003cb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8003cba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8003d48 <_strtod_l+0x590>
 8003cbe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	e07b      	b.n	8003dc0 <_strtod_l+0x608>
 8003cc8:	07ea      	lsls	r2, r5, #31
 8003cca:	d505      	bpl.n	8003cd8 <_strtod_l+0x520>
 8003ccc:	9b05      	ldr	r3, [sp, #20]
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fc0b 	bl	80004ec <__aeabi_dmul>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	9a05      	ldr	r2, [sp, #20]
 8003cda:	f10a 0a01 	add.w	sl, sl, #1
 8003cde:	3208      	adds	r2, #8
 8003ce0:	106d      	asrs	r5, r5, #1
 8003ce2:	9205      	str	r2, [sp, #20]
 8003ce4:	e7cc      	b.n	8003c80 <_strtod_l+0x4c8>
 8003ce6:	d0ec      	beq.n	8003cc2 <_strtod_l+0x50a>
 8003ce8:	426d      	negs	r5, r5
 8003cea:	f015 020f 	ands.w	r2, r5, #15
 8003cee:	d00a      	beq.n	8003d06 <_strtod_l+0x54e>
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <_strtod_l+0x584>)
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fd1f 	bl	8000740 <__aeabi_ddiv>
 8003d02:	4680      	mov	r8, r0
 8003d04:	4689      	mov	r9, r1
 8003d06:	112d      	asrs	r5, r5, #4
 8003d08:	d0db      	beq.n	8003cc2 <_strtod_l+0x50a>
 8003d0a:	2d1f      	cmp	r5, #31
 8003d0c:	dd1e      	ble.n	8003d4c <_strtod_l+0x594>
 8003d0e:	2600      	movs	r6, #0
 8003d10:	46b3      	mov	fp, r6
 8003d12:	960b      	str	r6, [sp, #44]	; 0x2c
 8003d14:	9608      	str	r6, [sp, #32]
 8003d16:	2322      	movs	r3, #34	; 0x22
 8003d18:	f04f 0800 	mov.w	r8, #0
 8003d1c:	f04f 0900 	mov.w	r9, #0
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e78d      	b.n	8003c40 <_strtod_l+0x488>
 8003d24:	08007052 	.word	0x08007052
 8003d28:	0800706c 	.word	0x0800706c
 8003d2c:	08007049 	.word	0x08007049
 8003d30:	0800704c 	.word	0x0800704c
 8003d34:	7ff00000 	.word	0x7ff00000
 8003d38:	08007415 	.word	0x08007415
 8003d3c:	080072b8 	.word	0x080072b8
 8003d40:	08007290 	.word	0x08007290
 8003d44:	7ca00000 	.word	0x7ca00000
 8003d48:	7fefffff 	.word	0x7fefffff
 8003d4c:	f015 0310 	ands.w	r3, r5, #16
 8003d50:	bf18      	it	ne
 8003d52:	236a      	movne	r3, #106	; 0x6a
 8003d54:	4640      	mov	r0, r8
 8003d56:	9305      	str	r3, [sp, #20]
 8003d58:	4649      	mov	r1, r9
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8004028 <_strtod_l+0x870>
 8003d60:	07ea      	lsls	r2, r5, #31
 8003d62:	d504      	bpl.n	8003d6e <_strtod_l+0x5b6>
 8003d64:	e9da 2300 	ldrd	r2, r3, [sl]
 8003d68:	f7fc fbc0 	bl	80004ec <__aeabi_dmul>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	106d      	asrs	r5, r5, #1
 8003d70:	f10a 0a08 	add.w	sl, sl, #8
 8003d74:	d1f4      	bne.n	8003d60 <_strtod_l+0x5a8>
 8003d76:	b10b      	cbz	r3, 8003d7c <_strtod_l+0x5c4>
 8003d78:	4680      	mov	r8, r0
 8003d7a:	4689      	mov	r9, r1
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	b1bb      	cbz	r3, 8003db0 <_strtod_l+0x5f8>
 8003d80:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003d84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	dd10      	ble.n	8003db0 <_strtod_l+0x5f8>
 8003d8e:	2b1f      	cmp	r3, #31
 8003d90:	f340 8128 	ble.w	8003fe4 <_strtod_l+0x82c>
 8003d94:	2b34      	cmp	r3, #52	; 0x34
 8003d96:	bfd8      	it	le
 8003d98:	f04f 33ff 	movle.w	r3, #4294967295
 8003d9c:	f04f 0800 	mov.w	r8, #0
 8003da0:	bfcf      	iteee	gt
 8003da2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003da6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003daa:	4093      	lslle	r3, r2
 8003dac:	ea03 0901 	andle.w	r9, r3, r1
 8003db0:	2200      	movs	r2, #0
 8003db2:	2300      	movs	r3, #0
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc fe00 	bl	80009bc <__aeabi_dcmpeq>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d1a6      	bne.n	8003d0e <_strtod_l+0x556>
 8003dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc2:	465a      	mov	r2, fp
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4633      	mov	r3, r6
 8003dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dcc:	f001 fa02 	bl	80051d4 <__s2b>
 8003dd0:	900b      	str	r0, [sp, #44]	; 0x2c
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f43f af2a 	beq.w	8003c2c <_strtod_l+0x474>
 8003dd8:	2600      	movs	r6, #0
 8003dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ddc:	9b08      	ldr	r3, [sp, #32]
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	eba3 0307 	sub.w	r3, r3, r7
 8003de4:	bfa8      	it	ge
 8003de6:	2300      	movge	r3, #0
 8003de8:	46b3      	mov	fp, r6
 8003dea:	9312      	str	r3, [sp, #72]	; 0x48
 8003dec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003df0:	9316      	str	r3, [sp, #88]	; 0x58
 8003df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003df4:	4620      	mov	r0, r4
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	f001 f944 	bl	8005084 <_Balloc>
 8003dfc:	9008      	str	r0, [sp, #32]
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f43f af18 	beq.w	8003c34 <_strtod_l+0x47c>
 8003e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e06:	300c      	adds	r0, #12
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	f103 010c 	add.w	r1, r3, #12
 8003e0e:	3202      	adds	r2, #2
 8003e10:	0092      	lsls	r2, r2, #2
 8003e12:	f000 fd6e 	bl	80048f2 <memcpy>
 8003e16:	ab1c      	add	r3, sp, #112	; 0x70
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	4642      	mov	r2, r8
 8003e20:	464b      	mov	r3, r9
 8003e22:	4620      	mov	r0, r4
 8003e24:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003e28:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8003e2c:	f001 fcfe 	bl	800582c <__d2b>
 8003e30:	901a      	str	r0, [sp, #104]	; 0x68
 8003e32:	2800      	cmp	r0, #0
 8003e34:	f43f aefe 	beq.w	8003c34 <_strtod_l+0x47c>
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f001 fa62 	bl	8005304 <__i2b>
 8003e40:	4683      	mov	fp, r0
 8003e42:	2800      	cmp	r0, #0
 8003e44:	f43f aef6 	beq.w	8003c34 <_strtod_l+0x47c>
 8003e48:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003e4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	bfab      	itete	ge
 8003e50:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8003e52:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003e54:	eb07 0a03 	addge.w	sl, r7, r3
 8003e58:	1bdd      	sublt	r5, r3, r7
 8003e5a:	9b05      	ldr	r3, [sp, #20]
 8003e5c:	bfa8      	it	ge
 8003e5e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8003e60:	eba7 0703 	sub.w	r7, r7, r3
 8003e64:	4417      	add	r7, r2
 8003e66:	4b71      	ldr	r3, [pc, #452]	; (800402c <_strtod_l+0x874>)
 8003e68:	f107 37ff 	add.w	r7, r7, #4294967295
 8003e6c:	bfb8      	it	lt
 8003e6e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8003e72:	429f      	cmp	r7, r3
 8003e74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003e78:	f280 80c7 	bge.w	800400a <_strtod_l+0x852>
 8003e7c:	1bdb      	subs	r3, r3, r7
 8003e7e:	2b1f      	cmp	r3, #31
 8003e80:	f04f 0101 	mov.w	r1, #1
 8003e84:	eba2 0203 	sub.w	r2, r2, r3
 8003e88:	f300 80b3 	bgt.w	8003ff2 <_strtod_l+0x83a>
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e92:	2300      	movs	r3, #0
 8003e94:	9310      	str	r3, [sp, #64]	; 0x40
 8003e96:	eb0a 0702 	add.w	r7, sl, r2
 8003e9a:	9b05      	ldr	r3, [sp, #20]
 8003e9c:	45ba      	cmp	sl, r7
 8003e9e:	4415      	add	r5, r2
 8003ea0:	441d      	add	r5, r3
 8003ea2:	4653      	mov	r3, sl
 8003ea4:	bfa8      	it	ge
 8003ea6:	463b      	movge	r3, r7
 8003ea8:	42ab      	cmp	r3, r5
 8003eaa:	bfa8      	it	ge
 8003eac:	462b      	movge	r3, r5
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfc2      	ittt	gt
 8003eb2:	1aff      	subgt	r7, r7, r3
 8003eb4:	1aed      	subgt	r5, r5, r3
 8003eb6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8003eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd17      	ble.n	8003ef0 <_strtod_l+0x738>
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f001 fadb 	bl	8005480 <__pow5mult>
 8003eca:	4683      	mov	fp, r0
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f43f aeb1 	beq.w	8003c34 <_strtod_l+0x47c>
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f001 fa2a 	bl	8005330 <__multiply>
 8003edc:	900a      	str	r0, [sp, #40]	; 0x28
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f43f aea8 	beq.w	8003c34 <_strtod_l+0x47c>
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003ee8:	f001 f90c 	bl	8005104 <_Bfree>
 8003eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f300 808f 	bgt.w	8004014 <_strtod_l+0x85c>
 8003ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dd08      	ble.n	8003f0e <_strtod_l+0x756>
 8003efc:	4620      	mov	r0, r4
 8003efe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003f00:	9908      	ldr	r1, [sp, #32]
 8003f02:	f001 fabd 	bl	8005480 <__pow5mult>
 8003f06:	9008      	str	r0, [sp, #32]
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f43f ae93 	beq.w	8003c34 <_strtod_l+0x47c>
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	dd08      	ble.n	8003f24 <_strtod_l+0x76c>
 8003f12:	462a      	mov	r2, r5
 8003f14:	4620      	mov	r0, r4
 8003f16:	9908      	ldr	r1, [sp, #32]
 8003f18:	f001 fb0c 	bl	8005534 <__lshift>
 8003f1c:	9008      	str	r0, [sp, #32]
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f ae88 	beq.w	8003c34 <_strtod_l+0x47c>
 8003f24:	f1ba 0f00 	cmp.w	sl, #0
 8003f28:	dd08      	ble.n	8003f3c <_strtod_l+0x784>
 8003f2a:	4659      	mov	r1, fp
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f001 fb00 	bl	8005534 <__lshift>
 8003f34:	4683      	mov	fp, r0
 8003f36:	2800      	cmp	r0, #0
 8003f38:	f43f ae7c 	beq.w	8003c34 <_strtod_l+0x47c>
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	9a08      	ldr	r2, [sp, #32]
 8003f40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f42:	f001 fb7f 	bl	8005644 <__mdiff>
 8003f46:	4606      	mov	r6, r0
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f43f ae73 	beq.w	8003c34 <_strtod_l+0x47c>
 8003f4e:	2500      	movs	r5, #0
 8003f50:	68c3      	ldr	r3, [r0, #12]
 8003f52:	4659      	mov	r1, fp
 8003f54:	60c5      	str	r5, [r0, #12]
 8003f56:	930a      	str	r3, [sp, #40]	; 0x28
 8003f58:	f001 fb58 	bl	800560c <__mcmp>
 8003f5c:	42a8      	cmp	r0, r5
 8003f5e:	da6b      	bge.n	8004038 <_strtod_l+0x880>
 8003f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f62:	ea53 0308 	orrs.w	r3, r3, r8
 8003f66:	f040 808f 	bne.w	8004088 <_strtod_l+0x8d0>
 8003f6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 808a 	bne.w	8004088 <_strtod_l+0x8d0>
 8003f74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f78:	0d1b      	lsrs	r3, r3, #20
 8003f7a:	051b      	lsls	r3, r3, #20
 8003f7c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003f80:	f240 8082 	bls.w	8004088 <_strtod_l+0x8d0>
 8003f84:	6973      	ldr	r3, [r6, #20]
 8003f86:	b913      	cbnz	r3, 8003f8e <_strtod_l+0x7d6>
 8003f88:	6933      	ldr	r3, [r6, #16]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	dd7c      	ble.n	8004088 <_strtod_l+0x8d0>
 8003f8e:	4631      	mov	r1, r6
 8003f90:	2201      	movs	r2, #1
 8003f92:	4620      	mov	r0, r4
 8003f94:	f001 face 	bl	8005534 <__lshift>
 8003f98:	4659      	mov	r1, fp
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	f001 fb36 	bl	800560c <__mcmp>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	dd71      	ble.n	8004088 <_strtod_l+0x8d0>
 8003fa4:	9905      	ldr	r1, [sp, #20]
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <_strtod_l+0x878>)
 8003faa:	2900      	cmp	r1, #0
 8003fac:	f000 808d 	beq.w	80040ca <_strtod_l+0x912>
 8003fb0:	ea02 0109 	and.w	r1, r2, r9
 8003fb4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003fb8:	f300 8087 	bgt.w	80040ca <_strtod_l+0x912>
 8003fbc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003fc0:	f77f aea9 	ble.w	8003d16 <_strtod_l+0x55e>
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <_strtod_l+0x87c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f7fc fa8e 	bl	80004ec <__aeabi_dmul>
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <_strtod_l+0x878>)
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	4689      	mov	r9, r1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f ae35 	bne.w	8003c48 <_strtod_l+0x490>
 8003fde:	2322      	movs	r3, #34	; 0x22
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	e631      	b.n	8003c48 <_strtod_l+0x490>
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	ea03 0808 	and.w	r8, r3, r8
 8003ff0:	e6de      	b.n	8003db0 <_strtod_l+0x5f8>
 8003ff2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8003ff6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8003ffa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8003ffe:	37e2      	adds	r7, #226	; 0xe2
 8004000:	fa01 f307 	lsl.w	r3, r1, r7
 8004004:	9310      	str	r3, [sp, #64]	; 0x40
 8004006:	9113      	str	r1, [sp, #76]	; 0x4c
 8004008:	e745      	b.n	8003e96 <_strtod_l+0x6de>
 800400a:	2300      	movs	r3, #0
 800400c:	9310      	str	r3, [sp, #64]	; 0x40
 800400e:	2301      	movs	r3, #1
 8004010:	9313      	str	r3, [sp, #76]	; 0x4c
 8004012:	e740      	b.n	8003e96 <_strtod_l+0x6de>
 8004014:	463a      	mov	r2, r7
 8004016:	4620      	mov	r0, r4
 8004018:	991a      	ldr	r1, [sp, #104]	; 0x68
 800401a:	f001 fa8b 	bl	8005534 <__lshift>
 800401e:	901a      	str	r0, [sp, #104]	; 0x68
 8004020:	2800      	cmp	r0, #0
 8004022:	f47f af68 	bne.w	8003ef6 <_strtod_l+0x73e>
 8004026:	e605      	b.n	8003c34 <_strtod_l+0x47c>
 8004028:	08007080 	.word	0x08007080
 800402c:	fffffc02 	.word	0xfffffc02
 8004030:	7ff00000 	.word	0x7ff00000
 8004034:	39500000 	.word	0x39500000
 8004038:	46ca      	mov	sl, r9
 800403a:	d165      	bne.n	8004108 <_strtod_l+0x950>
 800403c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800403e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004042:	b352      	cbz	r2, 800409a <_strtod_l+0x8e2>
 8004044:	4a9e      	ldr	r2, [pc, #632]	; (80042c0 <_strtod_l+0xb08>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d12a      	bne.n	80040a0 <_strtod_l+0x8e8>
 800404a:	9b05      	ldr	r3, [sp, #20]
 800404c:	4641      	mov	r1, r8
 800404e:	b1fb      	cbz	r3, 8004090 <_strtod_l+0x8d8>
 8004050:	4b9c      	ldr	r3, [pc, #624]	; (80042c4 <_strtod_l+0xb0c>)
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	ea09 0303 	and.w	r3, r9, r3
 800405a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800405e:	d81a      	bhi.n	8004096 <_strtod_l+0x8de>
 8004060:	0d1b      	lsrs	r3, r3, #20
 8004062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	4299      	cmp	r1, r3
 800406c:	d118      	bne.n	80040a0 <_strtod_l+0x8e8>
 800406e:	4b96      	ldr	r3, [pc, #600]	; (80042c8 <_strtod_l+0xb10>)
 8004070:	459a      	cmp	sl, r3
 8004072:	d102      	bne.n	800407a <_strtod_l+0x8c2>
 8004074:	3101      	adds	r1, #1
 8004076:	f43f addd 	beq.w	8003c34 <_strtod_l+0x47c>
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	4b91      	ldr	r3, [pc, #580]	; (80042c4 <_strtod_l+0xb0c>)
 8004080:	ea0a 0303 	and.w	r3, sl, r3
 8004084:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004088:	9b05      	ldr	r3, [sp, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d19a      	bne.n	8003fc4 <_strtod_l+0x80c>
 800408e:	e5db      	b.n	8003c48 <_strtod_l+0x490>
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	e7e9      	b.n	800406a <_strtod_l+0x8b2>
 8004096:	4613      	mov	r3, r2
 8004098:	e7e7      	b.n	800406a <_strtod_l+0x8b2>
 800409a:	ea53 0308 	orrs.w	r3, r3, r8
 800409e:	d081      	beq.n	8003fa4 <_strtod_l+0x7ec>
 80040a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040a2:	b1e3      	cbz	r3, 80040de <_strtod_l+0x926>
 80040a4:	ea13 0f0a 	tst.w	r3, sl
 80040a8:	d0ee      	beq.n	8004088 <_strtod_l+0x8d0>
 80040aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ac:	4640      	mov	r0, r8
 80040ae:	4649      	mov	r1, r9
 80040b0:	9a05      	ldr	r2, [sp, #20]
 80040b2:	b1c3      	cbz	r3, 80040e6 <_strtod_l+0x92e>
 80040b4:	f7ff fb5d 	bl	8003772 <sulp>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80040be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80040c0:	f7fc f85e 	bl	8000180 <__adddf3>
 80040c4:	4680      	mov	r8, r0
 80040c6:	4689      	mov	r9, r1
 80040c8:	e7de      	b.n	8004088 <_strtod_l+0x8d0>
 80040ca:	4013      	ands	r3, r2
 80040cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80040d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80040d4:	f04f 38ff 	mov.w	r8, #4294967295
 80040d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80040dc:	e7d4      	b.n	8004088 <_strtod_l+0x8d0>
 80040de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040e0:	ea13 0f08 	tst.w	r3, r8
 80040e4:	e7e0      	b.n	80040a8 <_strtod_l+0x8f0>
 80040e6:	f7ff fb44 	bl	8003772 <sulp>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80040f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80040f2:	f7fc f843 	bl	800017c <__aeabi_dsub>
 80040f6:	2200      	movs	r2, #0
 80040f8:	2300      	movs	r3, #0
 80040fa:	4680      	mov	r8, r0
 80040fc:	4689      	mov	r9, r1
 80040fe:	f7fc fc5d 	bl	80009bc <__aeabi_dcmpeq>
 8004102:	2800      	cmp	r0, #0
 8004104:	d0c0      	beq.n	8004088 <_strtod_l+0x8d0>
 8004106:	e606      	b.n	8003d16 <_strtod_l+0x55e>
 8004108:	4659      	mov	r1, fp
 800410a:	4630      	mov	r0, r6
 800410c:	f001 fbe4 	bl	80058d8 <__ratio>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004118:	2200      	movs	r2, #0
 800411a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800411e:	f7fc fc61 	bl	80009e4 <__aeabi_dcmple>
 8004122:	2800      	cmp	r0, #0
 8004124:	d06f      	beq.n	8004206 <_strtod_l+0xa4e>
 8004126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d17c      	bne.n	8004226 <_strtod_l+0xa6e>
 800412c:	f1b8 0f00 	cmp.w	r8, #0
 8004130:	d159      	bne.n	80041e6 <_strtod_l+0xa2e>
 8004132:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004136:	2b00      	cmp	r3, #0
 8004138:	d17b      	bne.n	8004232 <_strtod_l+0xa7a>
 800413a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800413e:	2200      	movs	r2, #0
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <_strtod_l+0xb14>)
 8004142:	f7fc fc45 	bl	80009d0 <__aeabi_dcmplt>
 8004146:	2800      	cmp	r0, #0
 8004148:	d15a      	bne.n	8004200 <_strtod_l+0xa48>
 800414a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800414e:	2200      	movs	r2, #0
 8004150:	4b5f      	ldr	r3, [pc, #380]	; (80042d0 <_strtod_l+0xb18>)
 8004152:	f7fc f9cb 	bl	80004ec <__aeabi_dmul>
 8004156:	4605      	mov	r5, r0
 8004158:	460f      	mov	r7, r1
 800415a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800415e:	9506      	str	r5, [sp, #24]
 8004160:	9307      	str	r3, [sp, #28]
 8004162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004166:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800416a:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <_strtod_l+0xb0c>)
 800416c:	4a55      	ldr	r2, [pc, #340]	; (80042c4 <_strtod_l+0xb0c>)
 800416e:	ea0a 0303 	and.w	r3, sl, r3
 8004172:	9313      	str	r3, [sp, #76]	; 0x4c
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <_strtod_l+0xb1c>)
 8004176:	ea0a 0202 	and.w	r2, sl, r2
 800417a:	429a      	cmp	r2, r3
 800417c:	f040 80b0 	bne.w	80042e0 <_strtod_l+0xb28>
 8004180:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f001 fae8 	bl	800575c <__ulp>
 800418c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004190:	f7fc f9ac 	bl	80004ec <__aeabi_dmul>
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f7fb fff2 	bl	8000180 <__adddf3>
 800419c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80042c4 <_strtod_l+0xb0c>
 80041a0:	4a4d      	ldr	r2, [pc, #308]	; (80042d8 <_strtod_l+0xb20>)
 80041a2:	ea01 0a0a 	and.w	sl, r1, sl
 80041a6:	4592      	cmp	sl, r2
 80041a8:	4680      	mov	r8, r0
 80041aa:	d948      	bls.n	800423e <_strtod_l+0xa86>
 80041ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <_strtod_l+0xb10>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d103      	bne.n	80041bc <_strtod_l+0xa04>
 80041b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041b6:	3301      	adds	r3, #1
 80041b8:	f43f ad3c 	beq.w	8003c34 <_strtod_l+0x47c>
 80041bc:	f04f 38ff 	mov.w	r8, #4294967295
 80041c0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80042c8 <_strtod_l+0xb10>
 80041c4:	4620      	mov	r0, r4
 80041c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80041c8:	f000 ff9c 	bl	8005104 <_Bfree>
 80041cc:	4620      	mov	r0, r4
 80041ce:	9908      	ldr	r1, [sp, #32]
 80041d0:	f000 ff98 	bl	8005104 <_Bfree>
 80041d4:	4659      	mov	r1, fp
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 ff94 	bl	8005104 <_Bfree>
 80041dc:	4631      	mov	r1, r6
 80041de:	4620      	mov	r0, r4
 80041e0:	f000 ff90 	bl	8005104 <_Bfree>
 80041e4:	e605      	b.n	8003df2 <_strtod_l+0x63a>
 80041e6:	f1b8 0f01 	cmp.w	r8, #1
 80041ea:	d103      	bne.n	80041f4 <_strtod_l+0xa3c>
 80041ec:	f1b9 0f00 	cmp.w	r9, #0
 80041f0:	f43f ad91 	beq.w	8003d16 <_strtod_l+0x55e>
 80041f4:	2200      	movs	r2, #0
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <_strtod_l+0xb24>)
 80041f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80041fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041fe:	e016      	b.n	800422e <_strtod_l+0xa76>
 8004200:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004202:	4f33      	ldr	r7, [pc, #204]	; (80042d0 <_strtod_l+0xb18>)
 8004204:	e7a9      	b.n	800415a <_strtod_l+0x9a2>
 8004206:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <_strtod_l+0xb18>)
 8004208:	2200      	movs	r2, #0
 800420a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800420e:	f7fc f96d 	bl	80004ec <__aeabi_dmul>
 8004212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004214:	4605      	mov	r5, r0
 8004216:	460f      	mov	r7, r1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d09e      	beq.n	800415a <_strtod_l+0x9a2>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004224:	e79d      	b.n	8004162 <_strtod_l+0x9aa>
 8004226:	2200      	movs	r2, #0
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <_strtod_l+0xb14>)
 800422a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800422e:	4f27      	ldr	r7, [pc, #156]	; (80042cc <_strtod_l+0xb14>)
 8004230:	e797      	b.n	8004162 <_strtod_l+0x9aa>
 8004232:	2200      	movs	r2, #0
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <_strtod_l+0xb24>)
 8004236:	4645      	mov	r5, r8
 8004238:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800423c:	e7f7      	b.n	800422e <_strtod_l+0xa76>
 800423e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8004242:	9b05      	ldr	r3, [sp, #20]
 8004244:	46ca      	mov	sl, r9
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1bc      	bne.n	80041c4 <_strtod_l+0xa0c>
 800424a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800424e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	429a      	cmp	r2, r3
 8004256:	d1b5      	bne.n	80041c4 <_strtod_l+0xa0c>
 8004258:	4628      	mov	r0, r5
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc fc3e 	bl	8000adc <__aeabi_d2lz>
 8004260:	f7fc f916 	bl	8000490 <__aeabi_l2d>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4628      	mov	r0, r5
 800426a:	4639      	mov	r1, r7
 800426c:	f7fb ff86 	bl	800017c <__aeabi_dsub>
 8004270:	460b      	mov	r3, r1
 8004272:	4602      	mov	r2, r0
 8004274:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8004278:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800427c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427e:	ea4a 0a08 	orr.w	sl, sl, r8
 8004282:	ea5a 0a03 	orrs.w	sl, sl, r3
 8004286:	d06c      	beq.n	8004362 <_strtod_l+0xbaa>
 8004288:	a309      	add	r3, pc, #36	; (adr r3, 80042b0 <_strtod_l+0xaf8>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc fb9f 	bl	80009d0 <__aeabi_dcmplt>
 8004292:	2800      	cmp	r0, #0
 8004294:	f47f acd8 	bne.w	8003c48 <_strtod_l+0x490>
 8004298:	a307      	add	r3, pc, #28	; (adr r3, 80042b8 <_strtod_l+0xb00>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042a2:	f7fc fbb3 	bl	8000a0c <__aeabi_dcmpgt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d08c      	beq.n	80041c4 <_strtod_l+0xa0c>
 80042aa:	e4cd      	b.n	8003c48 <_strtod_l+0x490>
 80042ac:	f3af 8000 	nop.w
 80042b0:	94a03595 	.word	0x94a03595
 80042b4:	3fdfffff 	.word	0x3fdfffff
 80042b8:	35afe535 	.word	0x35afe535
 80042bc:	3fe00000 	.word	0x3fe00000
 80042c0:	000fffff 	.word	0x000fffff
 80042c4:	7ff00000 	.word	0x7ff00000
 80042c8:	7fefffff 	.word	0x7fefffff
 80042cc:	3ff00000 	.word	0x3ff00000
 80042d0:	3fe00000 	.word	0x3fe00000
 80042d4:	7fe00000 	.word	0x7fe00000
 80042d8:	7c9fffff 	.word	0x7c9fffff
 80042dc:	bff00000 	.word	0xbff00000
 80042e0:	9b05      	ldr	r3, [sp, #20]
 80042e2:	b333      	cbz	r3, 8004332 <_strtod_l+0xb7a>
 80042e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80042e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80042ea:	d822      	bhi.n	8004332 <_strtod_l+0xb7a>
 80042ec:	a328      	add	r3, pc, #160	; (adr r3, 8004390 <_strtod_l+0xbd8>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	4628      	mov	r0, r5
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fc fb75 	bl	80009e4 <__aeabi_dcmple>
 80042fa:	b1a0      	cbz	r0, 8004326 <_strtod_l+0xb6e>
 80042fc:	4639      	mov	r1, r7
 80042fe:	4628      	mov	r0, r5
 8004300:	f7fc fbcc 	bl	8000a9c <__aeabi_d2uiz>
 8004304:	2801      	cmp	r0, #1
 8004306:	bf38      	it	cc
 8004308:	2001      	movcc	r0, #1
 800430a:	f7fc f875 	bl	80003f8 <__aeabi_ui2d>
 800430e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004310:	4605      	mov	r5, r0
 8004312:	460f      	mov	r7, r1
 8004314:	bb03      	cbnz	r3, 8004358 <_strtod_l+0xba0>
 8004316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800431a:	9014      	str	r0, [sp, #80]	; 0x50
 800431c:	9315      	str	r3, [sp, #84]	; 0x54
 800431e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004322:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800432a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	9311      	str	r3, [sp, #68]	; 0x44
 8004332:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004334:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004336:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800433a:	f001 fa0f 	bl	800575c <__ulp>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4640      	mov	r0, r8
 8004344:	4649      	mov	r1, r9
 8004346:	f7fc f8d1 	bl	80004ec <__aeabi_dmul>
 800434a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800434c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800434e:	f7fb ff17 	bl	8000180 <__adddf3>
 8004352:	4680      	mov	r8, r0
 8004354:	4689      	mov	r9, r1
 8004356:	e774      	b.n	8004242 <_strtod_l+0xa8a>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004360:	e7dd      	b.n	800431e <_strtod_l+0xb66>
 8004362:	a30d      	add	r3, pc, #52	; (adr r3, 8004398 <_strtod_l+0xbe0>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc fb32 	bl	80009d0 <__aeabi_dcmplt>
 800436c:	e79b      	b.n	80042a6 <_strtod_l+0xaee>
 800436e:	2300      	movs	r3, #0
 8004370:	930e      	str	r3, [sp, #56]	; 0x38
 8004372:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004374:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	f7ff ba5b 	b.w	8003832 <_strtod_l+0x7a>
 800437c:	2a65      	cmp	r2, #101	; 0x65
 800437e:	f43f ab52 	beq.w	8003a26 <_strtod_l+0x26e>
 8004382:	2a45      	cmp	r2, #69	; 0x45
 8004384:	f43f ab4f 	beq.w	8003a26 <_strtod_l+0x26e>
 8004388:	2301      	movs	r3, #1
 800438a:	f7ff bb87 	b.w	8003a9c <_strtod_l+0x2e4>
 800438e:	bf00      	nop
 8004390:	ffc00000 	.word	0xffc00000
 8004394:	41dfffff 	.word	0x41dfffff
 8004398:	94a03595 	.word	0x94a03595
 800439c:	3fcfffff 	.word	0x3fcfffff

080043a0 <strtod>:
 80043a0:	460a      	mov	r2, r1
 80043a2:	4601      	mov	r1, r0
 80043a4:	4802      	ldr	r0, [pc, #8]	; (80043b0 <strtod+0x10>)
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <strtod+0x14>)
 80043a8:	6800      	ldr	r0, [r0, #0]
 80043aa:	f7ff ba05 	b.w	80037b8 <_strtod_l>
 80043ae:	bf00      	nop
 80043b0:	200001dc 	.word	0x200001dc
 80043b4:	20000024 	.word	0x20000024

080043b8 <_strtol_l.constprop.0>:
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043be:	4686      	mov	lr, r0
 80043c0:	4690      	mov	r8, r2
 80043c2:	d001      	beq.n	80043c8 <_strtol_l.constprop.0+0x10>
 80043c4:	2b24      	cmp	r3, #36	; 0x24
 80043c6:	d906      	bls.n	80043d6 <_strtol_l.constprop.0+0x1e>
 80043c8:	f000 fa5e 	bl	8004888 <__errno>
 80043cc:	2316      	movs	r3, #22
 80043ce:	6003      	str	r3, [r0, #0]
 80043d0:	2000      	movs	r0, #0
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	460d      	mov	r5, r1
 80043d8:	4835      	ldr	r0, [pc, #212]	; (80044b0 <_strtol_l.constprop.0+0xf8>)
 80043da:	462a      	mov	r2, r5
 80043dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043e0:	5d06      	ldrb	r6, [r0, r4]
 80043e2:	f016 0608 	ands.w	r6, r6, #8
 80043e6:	d1f8      	bne.n	80043da <_strtol_l.constprop.0+0x22>
 80043e8:	2c2d      	cmp	r4, #45	; 0x2d
 80043ea:	d12e      	bne.n	800444a <_strtol_l.constprop.0+0x92>
 80043ec:	2601      	movs	r6, #1
 80043ee:	782c      	ldrb	r4, [r5, #0]
 80043f0:	1c95      	adds	r5, r2, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d057      	beq.n	80044a6 <_strtol_l.constprop.0+0xee>
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d109      	bne.n	800440e <_strtol_l.constprop.0+0x56>
 80043fa:	2c30      	cmp	r4, #48	; 0x30
 80043fc:	d107      	bne.n	800440e <_strtol_l.constprop.0+0x56>
 80043fe:	782a      	ldrb	r2, [r5, #0]
 8004400:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004404:	2a58      	cmp	r2, #88	; 0x58
 8004406:	d149      	bne.n	800449c <_strtol_l.constprop.0+0xe4>
 8004408:	2310      	movs	r3, #16
 800440a:	786c      	ldrb	r4, [r5, #1]
 800440c:	3502      	adds	r5, #2
 800440e:	2200      	movs	r2, #0
 8004410:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004414:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004418:	fbbc f9f3 	udiv	r9, ip, r3
 800441c:	4610      	mov	r0, r2
 800441e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004422:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004426:	2f09      	cmp	r7, #9
 8004428:	d814      	bhi.n	8004454 <_strtol_l.constprop.0+0x9c>
 800442a:	463c      	mov	r4, r7
 800442c:	42a3      	cmp	r3, r4
 800442e:	dd20      	ble.n	8004472 <_strtol_l.constprop.0+0xba>
 8004430:	1c57      	adds	r7, r2, #1
 8004432:	d007      	beq.n	8004444 <_strtol_l.constprop.0+0x8c>
 8004434:	4581      	cmp	r9, r0
 8004436:	d319      	bcc.n	800446c <_strtol_l.constprop.0+0xb4>
 8004438:	d101      	bne.n	800443e <_strtol_l.constprop.0+0x86>
 800443a:	45a2      	cmp	sl, r4
 800443c:	db16      	blt.n	800446c <_strtol_l.constprop.0+0xb4>
 800443e:	2201      	movs	r2, #1
 8004440:	fb00 4003 	mla	r0, r0, r3, r4
 8004444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004448:	e7eb      	b.n	8004422 <_strtol_l.constprop.0+0x6a>
 800444a:	2c2b      	cmp	r4, #43	; 0x2b
 800444c:	bf04      	itt	eq
 800444e:	782c      	ldrbeq	r4, [r5, #0]
 8004450:	1c95      	addeq	r5, r2, #2
 8004452:	e7ce      	b.n	80043f2 <_strtol_l.constprop.0+0x3a>
 8004454:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004458:	2f19      	cmp	r7, #25
 800445a:	d801      	bhi.n	8004460 <_strtol_l.constprop.0+0xa8>
 800445c:	3c37      	subs	r4, #55	; 0x37
 800445e:	e7e5      	b.n	800442c <_strtol_l.constprop.0+0x74>
 8004460:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004464:	2f19      	cmp	r7, #25
 8004466:	d804      	bhi.n	8004472 <_strtol_l.constprop.0+0xba>
 8004468:	3c57      	subs	r4, #87	; 0x57
 800446a:	e7df      	b.n	800442c <_strtol_l.constprop.0+0x74>
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	e7e8      	b.n	8004444 <_strtol_l.constprop.0+0x8c>
 8004472:	1c53      	adds	r3, r2, #1
 8004474:	d108      	bne.n	8004488 <_strtol_l.constprop.0+0xd0>
 8004476:	2322      	movs	r3, #34	; 0x22
 8004478:	4660      	mov	r0, ip
 800447a:	f8ce 3000 	str.w	r3, [lr]
 800447e:	f1b8 0f00 	cmp.w	r8, #0
 8004482:	d0a6      	beq.n	80043d2 <_strtol_l.constprop.0+0x1a>
 8004484:	1e69      	subs	r1, r5, #1
 8004486:	e006      	b.n	8004496 <_strtol_l.constprop.0+0xde>
 8004488:	b106      	cbz	r6, 800448c <_strtol_l.constprop.0+0xd4>
 800448a:	4240      	negs	r0, r0
 800448c:	f1b8 0f00 	cmp.w	r8, #0
 8004490:	d09f      	beq.n	80043d2 <_strtol_l.constprop.0+0x1a>
 8004492:	2a00      	cmp	r2, #0
 8004494:	d1f6      	bne.n	8004484 <_strtol_l.constprop.0+0xcc>
 8004496:	f8c8 1000 	str.w	r1, [r8]
 800449a:	e79a      	b.n	80043d2 <_strtol_l.constprop.0+0x1a>
 800449c:	2430      	movs	r4, #48	; 0x30
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1b5      	bne.n	800440e <_strtol_l.constprop.0+0x56>
 80044a2:	2308      	movs	r3, #8
 80044a4:	e7b3      	b.n	800440e <_strtol_l.constprop.0+0x56>
 80044a6:	2c30      	cmp	r4, #48	; 0x30
 80044a8:	d0a9      	beq.n	80043fe <_strtol_l.constprop.0+0x46>
 80044aa:	230a      	movs	r3, #10
 80044ac:	e7af      	b.n	800440e <_strtol_l.constprop.0+0x56>
 80044ae:	bf00      	nop
 80044b0:	080070a9 	.word	0x080070a9

080044b4 <_strtol_r>:
 80044b4:	f7ff bf80 	b.w	80043b8 <_strtol_l.constprop.0>

080044b8 <strtol>:
 80044b8:	4613      	mov	r3, r2
 80044ba:	460a      	mov	r2, r1
 80044bc:	4601      	mov	r1, r0
 80044be:	4802      	ldr	r0, [pc, #8]	; (80044c8 <strtol+0x10>)
 80044c0:	6800      	ldr	r0, [r0, #0]
 80044c2:	f7ff bf79 	b.w	80043b8 <_strtol_l.constprop.0>
 80044c6:	bf00      	nop
 80044c8:	200001dc 	.word	0x200001dc

080044cc <std>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	e9c0 3300 	strd	r3, r3, [r0]
 80044d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044da:	6083      	str	r3, [r0, #8]
 80044dc:	8181      	strh	r1, [r0, #12]
 80044de:	6643      	str	r3, [r0, #100]	; 0x64
 80044e0:	81c2      	strh	r2, [r0, #14]
 80044e2:	6183      	str	r3, [r0, #24]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	305c      	adds	r0, #92	; 0x5c
 80044ea:	f000 f940 	bl	800476e <memset>
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <std+0x58>)
 80044f0:	6224      	str	r4, [r4, #32]
 80044f2:	6263      	str	r3, [r4, #36]	; 0x24
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <std+0x5c>)
 80044f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <std+0x60>)
 80044fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <std+0x64>)
 80044fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <std+0x68>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d006      	beq.n	8004514 <std+0x48>
 8004506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800450a:	4294      	cmp	r4, r2
 800450c:	d002      	beq.n	8004514 <std+0x48>
 800450e:	33d0      	adds	r3, #208	; 0xd0
 8004510:	429c      	cmp	r4, r3
 8004512:	d105      	bne.n	8004520 <std+0x54>
 8004514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f000 b9de 	b.w	80048dc <__retarget_lock_init_recursive>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	bf00      	nop
 8004524:	080046e5 	.word	0x080046e5
 8004528:	0800470b 	.word	0x0800470b
 800452c:	08004743 	.word	0x08004743
 8004530:	08004767 	.word	0x08004767
 8004534:	2000030c 	.word	0x2000030c

08004538 <stdio_exit_handler>:
 8004538:	4a02      	ldr	r2, [pc, #8]	; (8004544 <stdio_exit_handler+0xc>)
 800453a:	4903      	ldr	r1, [pc, #12]	; (8004548 <stdio_exit_handler+0x10>)
 800453c:	4803      	ldr	r0, [pc, #12]	; (800454c <stdio_exit_handler+0x14>)
 800453e:	f000 b869 	b.w	8004614 <_fwalk_sglue>
 8004542:	bf00      	nop
 8004544:	20000018 	.word	0x20000018
 8004548:	08006701 	.word	0x08006701
 800454c:	20000190 	.word	0x20000190

08004550 <cleanup_stdio>:
 8004550:	6841      	ldr	r1, [r0, #4]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <cleanup_stdio+0x34>)
 8004554:	b510      	push	{r4, lr}
 8004556:	4299      	cmp	r1, r3
 8004558:	4604      	mov	r4, r0
 800455a:	d001      	beq.n	8004560 <cleanup_stdio+0x10>
 800455c:	f002 f8d0 	bl	8006700 <_fflush_r>
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <cleanup_stdio+0x38>)
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <cleanup_stdio+0x1e>
 8004568:	4620      	mov	r0, r4
 800456a:	f002 f8c9 	bl	8006700 <_fflush_r>
 800456e:	68e1      	ldr	r1, [r4, #12]
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <cleanup_stdio+0x3c>)
 8004572:	4299      	cmp	r1, r3
 8004574:	d004      	beq.n	8004580 <cleanup_stdio+0x30>
 8004576:	4620      	mov	r0, r4
 8004578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457c:	f002 b8c0 	b.w	8006700 <_fflush_r>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	2000030c 	.word	0x2000030c
 8004588:	20000374 	.word	0x20000374
 800458c:	200003dc 	.word	0x200003dc

08004590 <global_stdio_init.part.0>:
 8004590:	b510      	push	{r4, lr}
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <global_stdio_init.part.0+0x30>)
 8004594:	4c0b      	ldr	r4, [pc, #44]	; (80045c4 <global_stdio_init.part.0+0x34>)
 8004596:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <global_stdio_init.part.0+0x38>)
 8004598:	4620      	mov	r0, r4
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	2104      	movs	r1, #4
 800459e:	2200      	movs	r2, #0
 80045a0:	f7ff ff94 	bl	80044cc <std>
 80045a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80045a8:	2201      	movs	r2, #1
 80045aa:	2109      	movs	r1, #9
 80045ac:	f7ff ff8e 	bl	80044cc <std>
 80045b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80045b4:	2202      	movs	r2, #2
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ba:	2112      	movs	r1, #18
 80045bc:	f7ff bf86 	b.w	80044cc <std>
 80045c0:	20000444 	.word	0x20000444
 80045c4:	2000030c 	.word	0x2000030c
 80045c8:	08004539 	.word	0x08004539

080045cc <__sfp_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__sfp_lock_acquire+0x8>)
 80045ce:	f000 b986 	b.w	80048de <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	2000044d 	.word	0x2000044d

080045d8 <__sfp_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__sfp_lock_release+0x8>)
 80045da:	f000 b981 	b.w	80048e0 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	2000044d 	.word	0x2000044d

080045e4 <__sinit>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	f7ff fff0 	bl	80045cc <__sfp_lock_acquire>
 80045ec:	6a23      	ldr	r3, [r4, #32]
 80045ee:	b11b      	cbz	r3, 80045f8 <__sinit+0x14>
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f7ff bff0 	b.w	80045d8 <__sfp_lock_release>
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <__sinit+0x28>)
 80045fa:	6223      	str	r3, [r4, #32]
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__sinit+0x2c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f5      	bne.n	80045f0 <__sinit+0xc>
 8004604:	f7ff ffc4 	bl	8004590 <global_stdio_init.part.0>
 8004608:	e7f2      	b.n	80045f0 <__sinit+0xc>
 800460a:	bf00      	nop
 800460c:	08004551 	.word	0x08004551
 8004610:	20000444 	.word	0x20000444

08004614 <_fwalk_sglue>:
 8004614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004618:	4607      	mov	r7, r0
 800461a:	4688      	mov	r8, r1
 800461c:	4614      	mov	r4, r2
 800461e:	2600      	movs	r6, #0
 8004620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004624:	f1b9 0901 	subs.w	r9, r9, #1
 8004628:	d505      	bpl.n	8004636 <_fwalk_sglue+0x22>
 800462a:	6824      	ldr	r4, [r4, #0]
 800462c:	2c00      	cmp	r4, #0
 800462e:	d1f7      	bne.n	8004620 <_fwalk_sglue+0xc>
 8004630:	4630      	mov	r0, r6
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d907      	bls.n	800464c <_fwalk_sglue+0x38>
 800463c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004640:	3301      	adds	r3, #1
 8004642:	d003      	beq.n	800464c <_fwalk_sglue+0x38>
 8004644:	4629      	mov	r1, r5
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	4306      	orrs	r6, r0
 800464c:	3568      	adds	r5, #104	; 0x68
 800464e:	e7e9      	b.n	8004624 <_fwalk_sglue+0x10>

08004650 <siprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004656:	b500      	push	{lr}
 8004658:	b09c      	sub	sp, #112	; 0x70
 800465a:	ab1d      	add	r3, sp, #116	; 0x74
 800465c:	9002      	str	r0, [sp, #8]
 800465e:	9006      	str	r0, [sp, #24]
 8004660:	9107      	str	r1, [sp, #28]
 8004662:	9104      	str	r1, [sp, #16]
 8004664:	4808      	ldr	r0, [pc, #32]	; (8004688 <siprintf+0x38>)
 8004666:	4909      	ldr	r1, [pc, #36]	; (800468c <siprintf+0x3c>)
 8004668:	f853 2b04 	ldr.w	r2, [r3], #4
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	a902      	add	r1, sp, #8
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	f001 fa12 	bl	8005a9c <_svfiprintf_r>
 8004678:	2200      	movs	r2, #0
 800467a:	9b02      	ldr	r3, [sp, #8]
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	b01c      	add	sp, #112	; 0x70
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b003      	add	sp, #12
 8004686:	4770      	bx	lr
 8004688:	200001dc 	.word	0x200001dc
 800468c:	ffff0208 	.word	0xffff0208

08004690 <siscanf>:
 8004690:	b40e      	push	{r1, r2, r3}
 8004692:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004696:	b530      	push	{r4, r5, lr}
 8004698:	b09c      	sub	sp, #112	; 0x70
 800469a:	ac1f      	add	r4, sp, #124	; 0x7c
 800469c:	f854 5b04 	ldr.w	r5, [r4], #4
 80046a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	9006      	str	r0, [sp, #24]
 80046a8:	f7fb fd5c 	bl	8000164 <strlen>
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <siscanf+0x4c>)
 80046ae:	9003      	str	r0, [sp, #12]
 80046b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b2:	2300      	movs	r3, #0
 80046b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80046b6:	9314      	str	r3, [sp, #80]	; 0x50
 80046b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046bc:	9007      	str	r0, [sp, #28]
 80046be:	4808      	ldr	r0, [pc, #32]	; (80046e0 <siscanf+0x50>)
 80046c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046c4:	462a      	mov	r2, r5
 80046c6:	4623      	mov	r3, r4
 80046c8:	a902      	add	r1, sp, #8
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	9401      	str	r4, [sp, #4]
 80046ce:	f001 fb3d 	bl	8005d4c <__ssvfiscanf_r>
 80046d2:	b01c      	add	sp, #112	; 0x70
 80046d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d8:	b003      	add	sp, #12
 80046da:	4770      	bx	lr
 80046dc:	08004707 	.word	0x08004707
 80046e0:	200001dc 	.word	0x200001dc

080046e4 <__sread>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	f000 f898 	bl	8004820 <_read_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	bfab      	itete	ge
 80046f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046f6:	89a3      	ldrhlt	r3, [r4, #12]
 80046f8:	181b      	addge	r3, r3, r0
 80046fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046fe:	bfac      	ite	ge
 8004700:	6563      	strge	r3, [r4, #84]	; 0x54
 8004702:	81a3      	strhlt	r3, [r4, #12]
 8004704:	bd10      	pop	{r4, pc}

08004706 <__seofread>:
 8004706:	2000      	movs	r0, #0
 8004708:	4770      	bx	lr

0800470a <__swrite>:
 800470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	461f      	mov	r7, r3
 8004710:	898b      	ldrh	r3, [r1, #12]
 8004712:	4605      	mov	r5, r0
 8004714:	05db      	lsls	r3, r3, #23
 8004716:	460c      	mov	r4, r1
 8004718:	4616      	mov	r6, r2
 800471a:	d505      	bpl.n	8004728 <__swrite+0x1e>
 800471c:	2302      	movs	r3, #2
 800471e:	2200      	movs	r2, #0
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f86a 	bl	80047fc <_lseek_r>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	4632      	mov	r2, r6
 800472c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	4628      	mov	r0, r5
 8004734:	463b      	mov	r3, r7
 8004736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	f000 b891 	b.w	8004864 <_write_r>

08004742 <__sseek>:
 8004742:	b510      	push	{r4, lr}
 8004744:	460c      	mov	r4, r1
 8004746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474a:	f000 f857 	bl	80047fc <_lseek_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	bf15      	itete	ne
 8004754:	6560      	strne	r0, [r4, #84]	; 0x54
 8004756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800475a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800475e:	81a3      	strheq	r3, [r4, #12]
 8004760:	bf18      	it	ne
 8004762:	81a3      	strhne	r3, [r4, #12]
 8004764:	bd10      	pop	{r4, pc}

08004766 <__sclose>:
 8004766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476a:	f000 b837 	b.w	80047dc <_close_r>

0800476e <memset>:
 800476e:	4603      	mov	r3, r0
 8004770:	4402      	add	r2, r0
 8004772:	4293      	cmp	r3, r2
 8004774:	d100      	bne.n	8004778 <memset+0xa>
 8004776:	4770      	bx	lr
 8004778:	f803 1b01 	strb.w	r1, [r3], #1
 800477c:	e7f9      	b.n	8004772 <memset+0x4>
	...

08004780 <strdup>:
 8004780:	4b02      	ldr	r3, [pc, #8]	; (800478c <strdup+0xc>)
 8004782:	4601      	mov	r1, r0
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	f000 b803 	b.w	8004790 <_strdup_r>
 800478a:	bf00      	nop
 800478c:	200001dc 	.word	0x200001dc

08004790 <_strdup_r>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	460d      	mov	r5, r1
 8004798:	f7fb fce4 	bl	8000164 <strlen>
 800479c:	1c46      	adds	r6, r0, #1
 800479e:	4631      	mov	r1, r6
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7fe ff23 	bl	80035ec <_malloc_r>
 80047a6:	4604      	mov	r4, r0
 80047a8:	b118      	cbz	r0, 80047b2 <_strdup_r+0x22>
 80047aa:	4632      	mov	r2, r6
 80047ac:	4629      	mov	r1, r5
 80047ae:	f000 f8a0 	bl	80048f2 <memcpy>
 80047b2:	4620      	mov	r0, r4
 80047b4:	bd70      	pop	{r4, r5, r6, pc}

080047b6 <strncmp>:
 80047b6:	b510      	push	{r4, lr}
 80047b8:	b16a      	cbz	r2, 80047d6 <strncmp+0x20>
 80047ba:	3901      	subs	r1, #1
 80047bc:	1884      	adds	r4, r0, r2
 80047be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d103      	bne.n	80047d2 <strncmp+0x1c>
 80047ca:	42a0      	cmp	r0, r4
 80047cc:	d001      	beq.n	80047d2 <strncmp+0x1c>
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1f5      	bne.n	80047be <strncmp+0x8>
 80047d2:	1ad0      	subs	r0, r2, r3
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	4610      	mov	r0, r2
 80047d8:	e7fc      	b.n	80047d4 <strncmp+0x1e>
	...

080047dc <_close_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	2300      	movs	r3, #0
 80047e0:	4d05      	ldr	r5, [pc, #20]	; (80047f8 <_close_r+0x1c>)
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fd fb68 	bl	8001ebc <_close>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_close_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_close_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000448 	.word	0x20000448

080047fc <_lseek_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	2200      	movs	r2, #0
 8004806:	4d05      	ldr	r5, [pc, #20]	; (800481c <_lseek_r+0x20>)
 8004808:	602a      	str	r2, [r5, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	f7fd fb60 	bl	8001ed0 <_lseek>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_lseek_r+0x1e>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_lseek_r+0x1e>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000448 	.word	0x20000448

08004820 <_read_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4604      	mov	r4, r0
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	2200      	movs	r2, #0
 800482a:	4d05      	ldr	r5, [pc, #20]	; (8004840 <_read_r+0x20>)
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fd fb28 	bl	8001e84 <_read>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_read_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_read_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000448 	.word	0x20000448

08004844 <_sbrk_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	2300      	movs	r3, #0
 8004848:	4d05      	ldr	r5, [pc, #20]	; (8004860 <_sbrk_r+0x1c>)
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fd fb40 	bl	8001ed4 <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_sbrk_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_sbrk_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20000448 	.word	0x20000448

08004864 <_write_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	4611      	mov	r1, r2
 800486c:	2200      	movs	r2, #0
 800486e:	4d05      	ldr	r5, [pc, #20]	; (8004884 <_write_r+0x20>)
 8004870:	602a      	str	r2, [r5, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f7fd fb14 	bl	8001ea0 <_write>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_write_r+0x1e>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_write_r+0x1e>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	20000448 	.word	0x20000448

08004888 <__errno>:
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <__errno+0x8>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	200001dc 	.word	0x200001dc

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	2600      	movs	r6, #0
 8004898:	4d0c      	ldr	r5, [pc, #48]	; (80048cc <__libc_init_array+0x38>)
 800489a:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	f002 fb4c 	bl	8006f40 <_init>
 80048a8:	2600      	movs	r6, #0
 80048aa:	4d0a      	ldr	r5, [pc, #40]	; (80048d4 <__libc_init_array+0x40>)
 80048ac:	4c0a      	ldr	r4, [pc, #40]	; (80048d8 <__libc_init_array+0x44>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08007418 	.word	0x08007418
 80048d0:	08007418 	.word	0x08007418
 80048d4:	08007418 	.word	0x08007418
 80048d8:	0800741c 	.word	0x0800741c

080048dc <__retarget_lock_init_recursive>:
 80048dc:	4770      	bx	lr

080048de <__retarget_lock_acquire_recursive>:
 80048de:	4770      	bx	lr

080048e0 <__retarget_lock_release_recursive>:
 80048e0:	4770      	bx	lr

080048e2 <strcpy>:
 80048e2:	4603      	mov	r3, r0
 80048e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048e8:	f803 2b01 	strb.w	r2, [r3], #1
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d1f9      	bne.n	80048e4 <strcpy+0x2>
 80048f0:	4770      	bx	lr

080048f2 <memcpy>:
 80048f2:	440a      	add	r2, r1
 80048f4:	4291      	cmp	r1, r2
 80048f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80048fa:	d100      	bne.n	80048fe <memcpy+0xc>
 80048fc:	4770      	bx	lr
 80048fe:	b510      	push	{r4, lr}
 8004900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004904:	4291      	cmp	r1, r2
 8004906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800490a:	d1f9      	bne.n	8004900 <memcpy+0xe>
 800490c:	bd10      	pop	{r4, pc}
	...

08004910 <nan>:
 8004910:	2000      	movs	r0, #0
 8004912:	4901      	ldr	r1, [pc, #4]	; (8004918 <nan+0x8>)
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	7ff80000 	.word	0x7ff80000

0800491c <_free_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4605      	mov	r5, r0
 8004920:	2900      	cmp	r1, #0
 8004922:	d040      	beq.n	80049a6 <_free_r+0x8a>
 8004924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004928:	1f0c      	subs	r4, r1, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfb8      	it	lt
 800492e:	18e4      	addlt	r4, r4, r3
 8004930:	f7fe fedc 	bl	80036ec <__malloc_lock>
 8004934:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <_free_r+0x8c>)
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	b933      	cbnz	r3, 8004948 <_free_r+0x2c>
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6014      	str	r4, [r2, #0]
 800493e:	4628      	mov	r0, r5
 8004940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004944:	f7fe bed8 	b.w	80036f8 <__malloc_unlock>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d908      	bls.n	800495e <_free_r+0x42>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	e7ed      	b.n	800493a <_free_r+0x1e>
 800495e:	461a      	mov	r2, r3
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b10b      	cbz	r3, 8004968 <_free_r+0x4c>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d9fa      	bls.n	800495e <_free_r+0x42>
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	1850      	adds	r0, r2, r1
 800496c:	42a0      	cmp	r0, r4
 800496e:	d10b      	bne.n	8004988 <_free_r+0x6c>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	4401      	add	r1, r0
 8004974:	1850      	adds	r0, r2, r1
 8004976:	4283      	cmp	r3, r0
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	d1e0      	bne.n	800493e <_free_r+0x22>
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4408      	add	r0, r1
 8004982:	6010      	str	r0, [r2, #0]
 8004984:	6053      	str	r3, [r2, #4]
 8004986:	e7da      	b.n	800493e <_free_r+0x22>
 8004988:	d902      	bls.n	8004990 <_free_r+0x74>
 800498a:	230c      	movs	r3, #12
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	e7d6      	b.n	800493e <_free_r+0x22>
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	1821      	adds	r1, r4, r0
 8004994:	428b      	cmp	r3, r1
 8004996:	bf01      	itttt	eq
 8004998:	6819      	ldreq	r1, [r3, #0]
 800499a:	685b      	ldreq	r3, [r3, #4]
 800499c:	1809      	addeq	r1, r1, r0
 800499e:	6021      	streq	r1, [r4, #0]
 80049a0:	6063      	str	r3, [r4, #4]
 80049a2:	6054      	str	r4, [r2, #4]
 80049a4:	e7cb      	b.n	800493e <_free_r+0x22>
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	20000304 	.word	0x20000304

080049ac <rshift>:
 80049ac:	6903      	ldr	r3, [r0, #16]
 80049ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80049b6:	f100 0414 	add.w	r4, r0, #20
 80049ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80049be:	dd46      	ble.n	8004a4e <rshift+0xa2>
 80049c0:	f011 011f 	ands.w	r1, r1, #31
 80049c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80049c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80049cc:	d10c      	bne.n	80049e8 <rshift+0x3c>
 80049ce:	4629      	mov	r1, r5
 80049d0:	f100 0710 	add.w	r7, r0, #16
 80049d4:	42b1      	cmp	r1, r6
 80049d6:	d335      	bcc.n	8004a44 <rshift+0x98>
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	1eea      	subs	r2, r5, #3
 80049de:	4296      	cmp	r6, r2
 80049e0:	bf38      	it	cc
 80049e2:	2300      	movcc	r3, #0
 80049e4:	4423      	add	r3, r4
 80049e6:	e015      	b.n	8004a14 <rshift+0x68>
 80049e8:	46a1      	mov	r9, r4
 80049ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80049ee:	f1c1 0820 	rsb	r8, r1, #32
 80049f2:	40cf      	lsrs	r7, r1
 80049f4:	f105 0e04 	add.w	lr, r5, #4
 80049f8:	4576      	cmp	r6, lr
 80049fa:	46f4      	mov	ip, lr
 80049fc:	d816      	bhi.n	8004a2c <rshift+0x80>
 80049fe:	1a9a      	subs	r2, r3, r2
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	3a04      	subs	r2, #4
 8004a04:	3501      	adds	r5, #1
 8004a06:	42ae      	cmp	r6, r5
 8004a08:	bf38      	it	cc
 8004a0a:	2200      	movcc	r2, #0
 8004a0c:	18a3      	adds	r3, r4, r2
 8004a0e:	50a7      	str	r7, [r4, r2]
 8004a10:	b107      	cbz	r7, 8004a14 <rshift+0x68>
 8004a12:	3304      	adds	r3, #4
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	eba3 0204 	sub.w	r2, r3, r4
 8004a1a:	bf08      	it	eq
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004a22:	6102      	str	r2, [r0, #16]
 8004a24:	bf08      	it	eq
 8004a26:	6143      	streq	r3, [r0, #20]
 8004a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a2c:	f8dc c000 	ldr.w	ip, [ip]
 8004a30:	fa0c fc08 	lsl.w	ip, ip, r8
 8004a34:	ea4c 0707 	orr.w	r7, ip, r7
 8004a38:	f849 7b04 	str.w	r7, [r9], #4
 8004a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a40:	40cf      	lsrs	r7, r1
 8004a42:	e7d9      	b.n	80049f8 <rshift+0x4c>
 8004a44:	f851 cb04 	ldr.w	ip, [r1], #4
 8004a48:	f847 cf04 	str.w	ip, [r7, #4]!
 8004a4c:	e7c2      	b.n	80049d4 <rshift+0x28>
 8004a4e:	4623      	mov	r3, r4
 8004a50:	e7e0      	b.n	8004a14 <rshift+0x68>

08004a52 <__hexdig_fun>:
 8004a52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004a56:	2b09      	cmp	r3, #9
 8004a58:	d802      	bhi.n	8004a60 <__hexdig_fun+0xe>
 8004a5a:	3820      	subs	r0, #32
 8004a5c:	b2c0      	uxtb	r0, r0
 8004a5e:	4770      	bx	lr
 8004a60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d801      	bhi.n	8004a6c <__hexdig_fun+0x1a>
 8004a68:	3847      	subs	r0, #71	; 0x47
 8004a6a:	e7f7      	b.n	8004a5c <__hexdig_fun+0xa>
 8004a6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004a70:	2b05      	cmp	r3, #5
 8004a72:	d801      	bhi.n	8004a78 <__hexdig_fun+0x26>
 8004a74:	3827      	subs	r0, #39	; 0x27
 8004a76:	e7f1      	b.n	8004a5c <__hexdig_fun+0xa>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	4770      	bx	lr

08004a7c <__gethex>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	4681      	mov	r9, r0
 8004a82:	468a      	mov	sl, r1
 8004a84:	4617      	mov	r7, r2
 8004a86:	680a      	ldr	r2, [r1, #0]
 8004a88:	b085      	sub	sp, #20
 8004a8a:	f102 0b02 	add.w	fp, r2, #2
 8004a8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004a92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	32fe      	adds	r2, #254	; 0xfe
 8004a9a:	eb02 030b 	add.w	r3, r2, fp
 8004a9e:	46d8      	mov	r8, fp
 8004aa0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	2830      	cmp	r0, #48	; 0x30
 8004aa8:	d0f7      	beq.n	8004a9a <__gethex+0x1e>
 8004aaa:	f7ff ffd2 	bl	8004a52 <__hexdig_fun>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d138      	bne.n	8004b26 <__gethex+0xaa>
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	49a7      	ldr	r1, [pc, #668]	; (8004d58 <__gethex+0x2dc>)
 8004aba:	f7ff fe7c 	bl	80047b6 <strncmp>
 8004abe:	4606      	mov	r6, r0
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d169      	bne.n	8004b98 <__gethex+0x11c>
 8004ac4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004ac8:	465d      	mov	r5, fp
 8004aca:	f7ff ffc2 	bl	8004a52 <__hexdig_fun>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d064      	beq.n	8004b9c <__gethex+0x120>
 8004ad2:	465a      	mov	r2, fp
 8004ad4:	7810      	ldrb	r0, [r2, #0]
 8004ad6:	4690      	mov	r8, r2
 8004ad8:	2830      	cmp	r0, #48	; 0x30
 8004ada:	f102 0201 	add.w	r2, r2, #1
 8004ade:	d0f9      	beq.n	8004ad4 <__gethex+0x58>
 8004ae0:	f7ff ffb7 	bl	8004a52 <__hexdig_fun>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	fab0 f480 	clz	r4, r0
 8004aea:	465e      	mov	r6, fp
 8004aec:	0964      	lsrs	r4, r4, #5
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	4642      	mov	r2, r8
 8004af2:	4615      	mov	r5, r2
 8004af4:	7828      	ldrb	r0, [r5, #0]
 8004af6:	3201      	adds	r2, #1
 8004af8:	f7ff ffab 	bl	8004a52 <__hexdig_fun>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d1f8      	bne.n	8004af2 <__gethex+0x76>
 8004b00:	2201      	movs	r2, #1
 8004b02:	4628      	mov	r0, r5
 8004b04:	4994      	ldr	r1, [pc, #592]	; (8004d58 <__gethex+0x2dc>)
 8004b06:	f7ff fe56 	bl	80047b6 <strncmp>
 8004b0a:	b978      	cbnz	r0, 8004b2c <__gethex+0xb0>
 8004b0c:	b946      	cbnz	r6, 8004b20 <__gethex+0xa4>
 8004b0e:	1c6e      	adds	r6, r5, #1
 8004b10:	4632      	mov	r2, r6
 8004b12:	4615      	mov	r5, r2
 8004b14:	7828      	ldrb	r0, [r5, #0]
 8004b16:	3201      	adds	r2, #1
 8004b18:	f7ff ff9b 	bl	8004a52 <__hexdig_fun>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d1f8      	bne.n	8004b12 <__gethex+0x96>
 8004b20:	1b73      	subs	r3, r6, r5
 8004b22:	009e      	lsls	r6, r3, #2
 8004b24:	e004      	b.n	8004b30 <__gethex+0xb4>
 8004b26:	2400      	movs	r4, #0
 8004b28:	4626      	mov	r6, r4
 8004b2a:	e7e1      	b.n	8004af0 <__gethex+0x74>
 8004b2c:	2e00      	cmp	r6, #0
 8004b2e:	d1f7      	bne.n	8004b20 <__gethex+0xa4>
 8004b30:	782b      	ldrb	r3, [r5, #0]
 8004b32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b36:	2b50      	cmp	r3, #80	; 0x50
 8004b38:	d13d      	bne.n	8004bb6 <__gethex+0x13a>
 8004b3a:	786b      	ldrb	r3, [r5, #1]
 8004b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8004b3e:	d02f      	beq.n	8004ba0 <__gethex+0x124>
 8004b40:	2b2d      	cmp	r3, #45	; 0x2d
 8004b42:	d031      	beq.n	8004ba8 <__gethex+0x12c>
 8004b44:	f04f 0b00 	mov.w	fp, #0
 8004b48:	1c69      	adds	r1, r5, #1
 8004b4a:	7808      	ldrb	r0, [r1, #0]
 8004b4c:	f7ff ff81 	bl	8004a52 <__hexdig_fun>
 8004b50:	1e42      	subs	r2, r0, #1
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	2a18      	cmp	r2, #24
 8004b56:	d82e      	bhi.n	8004bb6 <__gethex+0x13a>
 8004b58:	f1a0 0210 	sub.w	r2, r0, #16
 8004b5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004b60:	f7ff ff77 	bl	8004a52 <__hexdig_fun>
 8004b64:	f100 3cff 	add.w	ip, r0, #4294967295
 8004b68:	fa5f fc8c 	uxtb.w	ip, ip
 8004b6c:	f1bc 0f18 	cmp.w	ip, #24
 8004b70:	d91d      	bls.n	8004bae <__gethex+0x132>
 8004b72:	f1bb 0f00 	cmp.w	fp, #0
 8004b76:	d000      	beq.n	8004b7a <__gethex+0xfe>
 8004b78:	4252      	negs	r2, r2
 8004b7a:	4416      	add	r6, r2
 8004b7c:	f8ca 1000 	str.w	r1, [sl]
 8004b80:	b1dc      	cbz	r4, 8004bba <__gethex+0x13e>
 8004b82:	9b01      	ldr	r3, [sp, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	f04f 0800 	movne.w	r8, #0
 8004b8c:	f04f 0806 	moveq.w	r8, #6
 8004b90:	4640      	mov	r0, r8
 8004b92:	b005      	add	sp, #20
 8004b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b98:	4645      	mov	r5, r8
 8004b9a:	4626      	mov	r6, r4
 8004b9c:	2401      	movs	r4, #1
 8004b9e:	e7c7      	b.n	8004b30 <__gethex+0xb4>
 8004ba0:	f04f 0b00 	mov.w	fp, #0
 8004ba4:	1ca9      	adds	r1, r5, #2
 8004ba6:	e7d0      	b.n	8004b4a <__gethex+0xce>
 8004ba8:	f04f 0b01 	mov.w	fp, #1
 8004bac:	e7fa      	b.n	8004ba4 <__gethex+0x128>
 8004bae:	230a      	movs	r3, #10
 8004bb0:	fb03 0002 	mla	r0, r3, r2, r0
 8004bb4:	e7d0      	b.n	8004b58 <__gethex+0xdc>
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	e7e0      	b.n	8004b7c <__gethex+0x100>
 8004bba:	4621      	mov	r1, r4
 8004bbc:	eba5 0308 	sub.w	r3, r5, r8
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	dc0a      	bgt.n	8004bdc <__gethex+0x160>
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f000 fa5c 	bl	8005084 <_Balloc>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	b940      	cbnz	r0, 8004be2 <__gethex+0x166>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	21e4      	movs	r1, #228	; 0xe4
 8004bd4:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <__gethex+0x2e0>)
 8004bd6:	4862      	ldr	r0, [pc, #392]	; (8004d60 <__gethex+0x2e4>)
 8004bd8:	f001 fe54 	bl	8006884 <__assert_func>
 8004bdc:	3101      	adds	r1, #1
 8004bde:	105b      	asrs	r3, r3, #1
 8004be0:	e7ef      	b.n	8004bc2 <__gethex+0x146>
 8004be2:	2300      	movs	r3, #0
 8004be4:	469b      	mov	fp, r3
 8004be6:	f100 0a14 	add.w	sl, r0, #20
 8004bea:	f8cd a004 	str.w	sl, [sp, #4]
 8004bee:	45a8      	cmp	r8, r5
 8004bf0:	d344      	bcc.n	8004c7c <__gethex+0x200>
 8004bf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004bf6:	4658      	mov	r0, fp
 8004bf8:	f848 bb04 	str.w	fp, [r8], #4
 8004bfc:	eba8 080a 	sub.w	r8, r8, sl
 8004c00:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8004c04:	6122      	str	r2, [r4, #16]
 8004c06:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004c0a:	f000 fb2d 	bl	8005268 <__hi0bits>
 8004c0e:	683d      	ldr	r5, [r7, #0]
 8004c10:	eba8 0800 	sub.w	r8, r8, r0
 8004c14:	45a8      	cmp	r8, r5
 8004c16:	dd59      	ble.n	8004ccc <__gethex+0x250>
 8004c18:	eba8 0805 	sub.w	r8, r8, r5
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 feab 	bl	800597a <__any_on>
 8004c24:	4683      	mov	fp, r0
 8004c26:	b1b8      	cbz	r0, 8004c58 <__gethex+0x1dc>
 8004c28:	f04f 0b01 	mov.w	fp, #1
 8004c2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004c30:	1159      	asrs	r1, r3, #5
 8004c32:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004c36:	f003 021f 	and.w	r2, r3, #31
 8004c3a:	fa0b f202 	lsl.w	r2, fp, r2
 8004c3e:	420a      	tst	r2, r1
 8004c40:	d00a      	beq.n	8004c58 <__gethex+0x1dc>
 8004c42:	455b      	cmp	r3, fp
 8004c44:	dd06      	ble.n	8004c54 <__gethex+0x1d8>
 8004c46:	4620      	mov	r0, r4
 8004c48:	f1a8 0102 	sub.w	r1, r8, #2
 8004c4c:	f000 fe95 	bl	800597a <__any_on>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d138      	bne.n	8004cc6 <__gethex+0x24a>
 8004c54:	f04f 0b02 	mov.w	fp, #2
 8004c58:	4641      	mov	r1, r8
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff fea6 	bl	80049ac <rshift>
 8004c60:	4446      	add	r6, r8
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	42b3      	cmp	r3, r6
 8004c66:	da41      	bge.n	8004cec <__gethex+0x270>
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4648      	mov	r0, r9
 8004c6c:	f000 fa4a 	bl	8005104 <_Bfree>
 8004c70:	2300      	movs	r3, #0
 8004c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c74:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e789      	b.n	8004b90 <__gethex+0x114>
 8004c7c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8004c80:	2a2e      	cmp	r2, #46	; 0x2e
 8004c82:	d014      	beq.n	8004cae <__gethex+0x232>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d106      	bne.n	8004c96 <__gethex+0x21a>
 8004c88:	9b01      	ldr	r3, [sp, #4]
 8004c8a:	f843 bb04 	str.w	fp, [r3], #4
 8004c8e:	f04f 0b00 	mov.w	fp, #0
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	465b      	mov	r3, fp
 8004c96:	7828      	ldrb	r0, [r5, #0]
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	f7ff feda 	bl	8004a52 <__hexdig_fun>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	f000 000f 	and.w	r0, r0, #15
 8004ca4:	4098      	lsls	r0, r3
 8004ca6:	ea4b 0b00 	orr.w	fp, fp, r0
 8004caa:	3304      	adds	r3, #4
 8004cac:	e79f      	b.n	8004bee <__gethex+0x172>
 8004cae:	45a8      	cmp	r8, r5
 8004cb0:	d8e8      	bhi.n	8004c84 <__gethex+0x208>
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	4928      	ldr	r1, [pc, #160]	; (8004d58 <__gethex+0x2dc>)
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	f7ff fd7c 	bl	80047b6 <strncmp>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d1df      	bne.n	8004c84 <__gethex+0x208>
 8004cc4:	e793      	b.n	8004bee <__gethex+0x172>
 8004cc6:	f04f 0b03 	mov.w	fp, #3
 8004cca:	e7c5      	b.n	8004c58 <__gethex+0x1dc>
 8004ccc:	da0b      	bge.n	8004ce6 <__gethex+0x26a>
 8004cce:	eba5 0808 	sub.w	r8, r5, r8
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	4648      	mov	r0, r9
 8004cd8:	f000 fc2c 	bl	8005534 <__lshift>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	eba6 0608 	sub.w	r6, r6, r8
 8004ce2:	f100 0a14 	add.w	sl, r0, #20
 8004ce6:	f04f 0b00 	mov.w	fp, #0
 8004cea:	e7ba      	b.n	8004c62 <__gethex+0x1e6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	42b3      	cmp	r3, r6
 8004cf0:	dd74      	ble.n	8004ddc <__gethex+0x360>
 8004cf2:	1b9e      	subs	r6, r3, r6
 8004cf4:	42b5      	cmp	r5, r6
 8004cf6:	dc35      	bgt.n	8004d64 <__gethex+0x2e8>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d023      	beq.n	8004d46 <__gethex+0x2ca>
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d025      	beq.n	8004d4e <__gethex+0x2d2>
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d115      	bne.n	8004d32 <__gethex+0x2b6>
 8004d06:	42b5      	cmp	r5, r6
 8004d08:	d113      	bne.n	8004d32 <__gethex+0x2b6>
 8004d0a:	2d01      	cmp	r5, #1
 8004d0c:	d10b      	bne.n	8004d26 <__gethex+0x2aa>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	9a02      	ldr	r2, [sp, #8]
 8004d12:	f04f 0862 	mov.w	r8, #98	; 0x62
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	2301      	movs	r3, #1
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	f8ca 3000 	str.w	r3, [sl]
 8004d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d22:	601c      	str	r4, [r3, #0]
 8004d24:	e734      	b.n	8004b90 <__gethex+0x114>
 8004d26:	4620      	mov	r0, r4
 8004d28:	1e69      	subs	r1, r5, #1
 8004d2a:	f000 fe26 	bl	800597a <__any_on>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d1ed      	bne.n	8004d0e <__gethex+0x292>
 8004d32:	4621      	mov	r1, r4
 8004d34:	4648      	mov	r0, r9
 8004d36:	f000 f9e5 	bl	8005104 <_Bfree>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d3e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e724      	b.n	8004b90 <__gethex+0x114>
 8004d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f2      	bne.n	8004d32 <__gethex+0x2b6>
 8004d4c:	e7df      	b.n	8004d0e <__gethex+0x292>
 8004d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1dc      	bne.n	8004d0e <__gethex+0x292>
 8004d54:	e7ed      	b.n	8004d32 <__gethex+0x2b6>
 8004d56:	bf00      	nop
 8004d58:	08007047 	.word	0x08007047
 8004d5c:	080071af 	.word	0x080071af
 8004d60:	080071c0 	.word	0x080071c0
 8004d64:	f106 38ff 	add.w	r8, r6, #4294967295
 8004d68:	f1bb 0f00 	cmp.w	fp, #0
 8004d6c:	d133      	bne.n	8004dd6 <__gethex+0x35a>
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	d004      	beq.n	8004d7e <__gethex+0x302>
 8004d74:	4641      	mov	r1, r8
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 fdff 	bl	800597a <__any_on>
 8004d7c:	4683      	mov	fp, r0
 8004d7e:	2301      	movs	r3, #1
 8004d80:	ea4f 1268 	mov.w	r2, r8, asr #5
 8004d84:	f008 081f 	and.w	r8, r8, #31
 8004d88:	fa03 f308 	lsl.w	r3, r3, r8
 8004d8c:	f04f 0802 	mov.w	r8, #2
 8004d90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004d94:	4631      	mov	r1, r6
 8004d96:	4213      	tst	r3, r2
 8004d98:	4620      	mov	r0, r4
 8004d9a:	bf18      	it	ne
 8004d9c:	f04b 0b02 	orrne.w	fp, fp, #2
 8004da0:	1bad      	subs	r5, r5, r6
 8004da2:	f7ff fe03 	bl	80049ac <rshift>
 8004da6:	687e      	ldr	r6, [r7, #4]
 8004da8:	f1bb 0f00 	cmp.w	fp, #0
 8004dac:	d04a      	beq.n	8004e44 <__gethex+0x3c8>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d016      	beq.n	8004de2 <__gethex+0x366>
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d018      	beq.n	8004dea <__gethex+0x36e>
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d109      	bne.n	8004dd0 <__gethex+0x354>
 8004dbc:	f01b 0f02 	tst.w	fp, #2
 8004dc0:	d006      	beq.n	8004dd0 <__gethex+0x354>
 8004dc2:	f8da 3000 	ldr.w	r3, [sl]
 8004dc6:	ea4b 0b03 	orr.w	fp, fp, r3
 8004dca:	f01b 0f01 	tst.w	fp, #1
 8004dce:	d10f      	bne.n	8004df0 <__gethex+0x374>
 8004dd0:	f048 0810 	orr.w	r8, r8, #16
 8004dd4:	e036      	b.n	8004e44 <__gethex+0x3c8>
 8004dd6:	f04f 0b01 	mov.w	fp, #1
 8004dda:	e7d0      	b.n	8004d7e <__gethex+0x302>
 8004ddc:	f04f 0801 	mov.w	r8, #1
 8004de0:	e7e2      	b.n	8004da8 <__gethex+0x32c>
 8004de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004de4:	f1c3 0301 	rsb	r3, r3, #1
 8004de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <__gethex+0x354>
 8004df0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004df4:	f104 0214 	add.w	r2, r4, #20
 8004df8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8004e04:	4694      	mov	ip, r2
 8004e06:	f852 1b04 	ldr.w	r1, [r2], #4
 8004e0a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004e0e:	d01e      	beq.n	8004e4e <__gethex+0x3d2>
 8004e10:	3101      	adds	r1, #1
 8004e12:	f8cc 1000 	str.w	r1, [ip]
 8004e16:	f1b8 0f02 	cmp.w	r8, #2
 8004e1a:	f104 0214 	add.w	r2, r4, #20
 8004e1e:	d13d      	bne.n	8004e9c <__gethex+0x420>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	d10b      	bne.n	8004e40 <__gethex+0x3c4>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	1169      	asrs	r1, r5, #5
 8004e2c:	f005 051f 	and.w	r5, r5, #31
 8004e30:	fa03 f505 	lsl.w	r5, r3, r5
 8004e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e38:	421d      	tst	r5, r3
 8004e3a:	bf18      	it	ne
 8004e3c:	f04f 0801 	movne.w	r8, #1
 8004e40:	f048 0820 	orr.w	r8, r8, #32
 8004e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e46:	601c      	str	r4, [r3, #0]
 8004e48:	9b02      	ldr	r3, [sp, #8]
 8004e4a:	601e      	str	r6, [r3, #0]
 8004e4c:	e6a0      	b.n	8004b90 <__gethex+0x114>
 8004e4e:	4290      	cmp	r0, r2
 8004e50:	f842 3c04 	str.w	r3, [r2, #-4]
 8004e54:	d8d6      	bhi.n	8004e04 <__gethex+0x388>
 8004e56:	68a2      	ldr	r2, [r4, #8]
 8004e58:	4593      	cmp	fp, r2
 8004e5a:	db17      	blt.n	8004e8c <__gethex+0x410>
 8004e5c:	6861      	ldr	r1, [r4, #4]
 8004e5e:	4648      	mov	r0, r9
 8004e60:	3101      	adds	r1, #1
 8004e62:	f000 f90f 	bl	8005084 <_Balloc>
 8004e66:	4682      	mov	sl, r0
 8004e68:	b918      	cbnz	r0, 8004e72 <__gethex+0x3f6>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	2184      	movs	r1, #132	; 0x84
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <__gethex+0x45c>)
 8004e70:	e6b1      	b.n	8004bd6 <__gethex+0x15a>
 8004e72:	6922      	ldr	r2, [r4, #16]
 8004e74:	f104 010c 	add.w	r1, r4, #12
 8004e78:	3202      	adds	r2, #2
 8004e7a:	0092      	lsls	r2, r2, #2
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	f7ff fd38 	bl	80048f2 <memcpy>
 8004e82:	4621      	mov	r1, r4
 8004e84:	4648      	mov	r0, r9
 8004e86:	f000 f93d 	bl	8005104 <_Bfree>
 8004e8a:	4654      	mov	r4, sl
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	1c51      	adds	r1, r2, #1
 8004e90:	6121      	str	r1, [r4, #16]
 8004e92:	2101      	movs	r1, #1
 8004e94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004e98:	6151      	str	r1, [r2, #20]
 8004e9a:	e7bc      	b.n	8004e16 <__gethex+0x39a>
 8004e9c:	6921      	ldr	r1, [r4, #16]
 8004e9e:	4559      	cmp	r1, fp
 8004ea0:	dd0b      	ble.n	8004eba <__gethex+0x43e>
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff fd81 	bl	80049ac <rshift>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3601      	adds	r6, #1
 8004eae:	42b3      	cmp	r3, r6
 8004eb0:	f6ff aeda 	blt.w	8004c68 <__gethex+0x1ec>
 8004eb4:	f04f 0801 	mov.w	r8, #1
 8004eb8:	e7c2      	b.n	8004e40 <__gethex+0x3c4>
 8004eba:	f015 051f 	ands.w	r5, r5, #31
 8004ebe:	d0f9      	beq.n	8004eb4 <__gethex+0x438>
 8004ec0:	9b01      	ldr	r3, [sp, #4]
 8004ec2:	f1c5 0520 	rsb	r5, r5, #32
 8004ec6:	441a      	add	r2, r3
 8004ec8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004ecc:	f000 f9cc 	bl	8005268 <__hi0bits>
 8004ed0:	42a8      	cmp	r0, r5
 8004ed2:	dbe6      	blt.n	8004ea2 <__gethex+0x426>
 8004ed4:	e7ee      	b.n	8004eb4 <__gethex+0x438>
 8004ed6:	bf00      	nop
 8004ed8:	080071af 	.word	0x080071af

08004edc <L_shift>:
 8004edc:	f1c2 0208 	rsb	r2, r2, #8
 8004ee0:	0092      	lsls	r2, r2, #2
 8004ee2:	b570      	push	{r4, r5, r6, lr}
 8004ee4:	f1c2 0620 	rsb	r6, r2, #32
 8004ee8:	6843      	ldr	r3, [r0, #4]
 8004eea:	6804      	ldr	r4, [r0, #0]
 8004eec:	fa03 f506 	lsl.w	r5, r3, r6
 8004ef0:	432c      	orrs	r4, r5
 8004ef2:	40d3      	lsrs	r3, r2
 8004ef4:	6004      	str	r4, [r0, #0]
 8004ef6:	f840 3f04 	str.w	r3, [r0, #4]!
 8004efa:	4288      	cmp	r0, r1
 8004efc:	d3f4      	bcc.n	8004ee8 <L_shift+0xc>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}

08004f00 <__match>:
 8004f00:	b530      	push	{r4, r5, lr}
 8004f02:	6803      	ldr	r3, [r0, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0a:	b914      	cbnz	r4, 8004f12 <__match+0x12>
 8004f0c:	6003      	str	r3, [r0, #0]
 8004f0e:	2001      	movs	r0, #1
 8004f10:	bd30      	pop	{r4, r5, pc}
 8004f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004f1a:	2d19      	cmp	r5, #25
 8004f1c:	bf98      	it	ls
 8004f1e:	3220      	addls	r2, #32
 8004f20:	42a2      	cmp	r2, r4
 8004f22:	d0f0      	beq.n	8004f06 <__match+0x6>
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7f3      	b.n	8004f10 <__match+0x10>

08004f28 <__hexnan>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	680b      	ldr	r3, [r1, #0]
 8004f30:	4682      	mov	sl, r0
 8004f32:	115e      	asrs	r6, r3, #5
 8004f34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f38:	f013 031f 	ands.w	r3, r3, #31
 8004f3c:	bf18      	it	ne
 8004f3e:	3604      	addne	r6, #4
 8004f40:	1f37      	subs	r7, r6, #4
 8004f42:	4690      	mov	r8, r2
 8004f44:	46b9      	mov	r9, r7
 8004f46:	463c      	mov	r4, r7
 8004f48:	46ab      	mov	fp, r5
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	6801      	ldr	r1, [r0, #0]
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f846 5c04 	str.w	r5, [r6, #-4]
 8004f54:	9502      	str	r5, [sp, #8]
 8004f56:	784a      	ldrb	r2, [r1, #1]
 8004f58:	1c4b      	adds	r3, r1, #1
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	b342      	cbz	r2, 8004fb0 <__hexnan+0x88>
 8004f5e:	4610      	mov	r0, r2
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	9204      	str	r2, [sp, #16]
 8004f64:	f7ff fd75 	bl	8004a52 <__hexdig_fun>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d14f      	bne.n	800500c <__hexnan+0xe4>
 8004f6c:	9a04      	ldr	r2, [sp, #16]
 8004f6e:	9905      	ldr	r1, [sp, #20]
 8004f70:	2a20      	cmp	r2, #32
 8004f72:	d818      	bhi.n	8004fa6 <__hexnan+0x7e>
 8004f74:	9b02      	ldr	r3, [sp, #8]
 8004f76:	459b      	cmp	fp, r3
 8004f78:	dd13      	ble.n	8004fa2 <__hexnan+0x7a>
 8004f7a:	454c      	cmp	r4, r9
 8004f7c:	d206      	bcs.n	8004f8c <__hexnan+0x64>
 8004f7e:	2d07      	cmp	r5, #7
 8004f80:	dc04      	bgt.n	8004f8c <__hexnan+0x64>
 8004f82:	462a      	mov	r2, r5
 8004f84:	4649      	mov	r1, r9
 8004f86:	4620      	mov	r0, r4
 8004f88:	f7ff ffa8 	bl	8004edc <L_shift>
 8004f8c:	4544      	cmp	r4, r8
 8004f8e:	d950      	bls.n	8005032 <__hexnan+0x10a>
 8004f90:	2300      	movs	r3, #0
 8004f92:	f1a4 0904 	sub.w	r9, r4, #4
 8004f96:	f844 3c04 	str.w	r3, [r4, #-4]
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	464c      	mov	r4, r9
 8004f9e:	f8cd b008 	str.w	fp, [sp, #8]
 8004fa2:	9903      	ldr	r1, [sp, #12]
 8004fa4:	e7d7      	b.n	8004f56 <__hexnan+0x2e>
 8004fa6:	2a29      	cmp	r2, #41	; 0x29
 8004fa8:	d155      	bne.n	8005056 <__hexnan+0x12e>
 8004faa:	3102      	adds	r1, #2
 8004fac:	f8ca 1000 	str.w	r1, [sl]
 8004fb0:	f1bb 0f00 	cmp.w	fp, #0
 8004fb4:	d04f      	beq.n	8005056 <__hexnan+0x12e>
 8004fb6:	454c      	cmp	r4, r9
 8004fb8:	d206      	bcs.n	8004fc8 <__hexnan+0xa0>
 8004fba:	2d07      	cmp	r5, #7
 8004fbc:	dc04      	bgt.n	8004fc8 <__hexnan+0xa0>
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff ff8a 	bl	8004edc <L_shift>
 8004fc8:	4544      	cmp	r4, r8
 8004fca:	d934      	bls.n	8005036 <__hexnan+0x10e>
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f1a8 0204 	sub.w	r2, r8, #4
 8004fd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8004fd6:	429f      	cmp	r7, r3
 8004fd8:	f842 1f04 	str.w	r1, [r2, #4]!
 8004fdc:	d2f9      	bcs.n	8004fd2 <__hexnan+0xaa>
 8004fde:	1b3b      	subs	r3, r7, r4
 8004fe0:	f023 0303 	bic.w	r3, r3, #3
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	3e03      	subs	r6, #3
 8004fe8:	3401      	adds	r4, #1
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	bf38      	it	cc
 8004fee:	2304      	movcc	r3, #4
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4443      	add	r3, r8
 8004ff4:	f843 2b04 	str.w	r2, [r3], #4
 8004ff8:	429f      	cmp	r7, r3
 8004ffa:	d2fb      	bcs.n	8004ff4 <__hexnan+0xcc>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b91b      	cbnz	r3, 8005008 <__hexnan+0xe0>
 8005000:	4547      	cmp	r7, r8
 8005002:	d126      	bne.n	8005052 <__hexnan+0x12a>
 8005004:	2301      	movs	r3, #1
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	2005      	movs	r0, #5
 800500a:	e025      	b.n	8005058 <__hexnan+0x130>
 800500c:	3501      	adds	r5, #1
 800500e:	2d08      	cmp	r5, #8
 8005010:	f10b 0b01 	add.w	fp, fp, #1
 8005014:	dd06      	ble.n	8005024 <__hexnan+0xfc>
 8005016:	4544      	cmp	r4, r8
 8005018:	d9c3      	bls.n	8004fa2 <__hexnan+0x7a>
 800501a:	2300      	movs	r3, #0
 800501c:	2501      	movs	r5, #1
 800501e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005022:	3c04      	subs	r4, #4
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	f000 000f 	and.w	r0, r0, #15
 800502a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	e7b7      	b.n	8004fa2 <__hexnan+0x7a>
 8005032:	2508      	movs	r5, #8
 8005034:	e7b5      	b.n	8004fa2 <__hexnan+0x7a>
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0df      	beq.n	8004ffc <__hexnan+0xd4>
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	f1c3 0320 	rsb	r3, r3, #32
 8005044:	40da      	lsrs	r2, r3
 8005046:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800504a:	4013      	ands	r3, r2
 800504c:	f846 3c04 	str.w	r3, [r6, #-4]
 8005050:	e7d4      	b.n	8004ffc <__hexnan+0xd4>
 8005052:	3f04      	subs	r7, #4
 8005054:	e7d2      	b.n	8004ffc <__hexnan+0xd4>
 8005056:	2004      	movs	r0, #4
 8005058:	b007      	add	sp, #28
 800505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800505e <__ascii_mbtowc>:
 800505e:	b082      	sub	sp, #8
 8005060:	b901      	cbnz	r1, 8005064 <__ascii_mbtowc+0x6>
 8005062:	a901      	add	r1, sp, #4
 8005064:	b142      	cbz	r2, 8005078 <__ascii_mbtowc+0x1a>
 8005066:	b14b      	cbz	r3, 800507c <__ascii_mbtowc+0x1e>
 8005068:	7813      	ldrb	r3, [r2, #0]
 800506a:	600b      	str	r3, [r1, #0]
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	1e10      	subs	r0, r2, #0
 8005070:	bf18      	it	ne
 8005072:	2001      	movne	r0, #1
 8005074:	b002      	add	sp, #8
 8005076:	4770      	bx	lr
 8005078:	4610      	mov	r0, r2
 800507a:	e7fb      	b.n	8005074 <__ascii_mbtowc+0x16>
 800507c:	f06f 0001 	mvn.w	r0, #1
 8005080:	e7f8      	b.n	8005074 <__ascii_mbtowc+0x16>
	...

08005084 <_Balloc>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	69c6      	ldr	r6, [r0, #28]
 8005088:	4604      	mov	r4, r0
 800508a:	460d      	mov	r5, r1
 800508c:	b976      	cbnz	r6, 80050ac <_Balloc+0x28>
 800508e:	2010      	movs	r0, #16
 8005090:	f7fe fa7c 	bl	800358c <malloc>
 8005094:	4602      	mov	r2, r0
 8005096:	61e0      	str	r0, [r4, #28]
 8005098:	b920      	cbnz	r0, 80050a4 <_Balloc+0x20>
 800509a:	216b      	movs	r1, #107	; 0x6b
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <_Balloc+0x78>)
 800509e:	4818      	ldr	r0, [pc, #96]	; (8005100 <_Balloc+0x7c>)
 80050a0:	f001 fbf0 	bl	8006884 <__assert_func>
 80050a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050a8:	6006      	str	r6, [r0, #0]
 80050aa:	60c6      	str	r6, [r0, #12]
 80050ac:	69e6      	ldr	r6, [r4, #28]
 80050ae:	68f3      	ldr	r3, [r6, #12]
 80050b0:	b183      	cbz	r3, 80050d4 <_Balloc+0x50>
 80050b2:	69e3      	ldr	r3, [r4, #28]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050ba:	b9b8      	cbnz	r0, 80050ec <_Balloc+0x68>
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f605 	lsl.w	r6, r1, r5
 80050c2:	1d72      	adds	r2, r6, #5
 80050c4:	4620      	mov	r0, r4
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	f001 fbfa 	bl	80068c0 <_calloc_r>
 80050cc:	b160      	cbz	r0, 80050e8 <_Balloc+0x64>
 80050ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050d2:	e00e      	b.n	80050f2 <_Balloc+0x6e>
 80050d4:	2221      	movs	r2, #33	; 0x21
 80050d6:	2104      	movs	r1, #4
 80050d8:	4620      	mov	r0, r4
 80050da:	f001 fbf1 	bl	80068c0 <_calloc_r>
 80050de:	69e3      	ldr	r3, [r4, #28]
 80050e0:	60f0      	str	r0, [r6, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e4      	bne.n	80050b2 <_Balloc+0x2e>
 80050e8:	2000      	movs	r0, #0
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	6802      	ldr	r2, [r0, #0]
 80050ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050f2:	2300      	movs	r3, #0
 80050f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050f8:	e7f7      	b.n	80050ea <_Balloc+0x66>
 80050fa:	bf00      	nop
 80050fc:	08007220 	.word	0x08007220
 8005100:	08007237 	.word	0x08007237

08005104 <_Bfree>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	69c6      	ldr	r6, [r0, #28]
 8005108:	4605      	mov	r5, r0
 800510a:	460c      	mov	r4, r1
 800510c:	b976      	cbnz	r6, 800512c <_Bfree+0x28>
 800510e:	2010      	movs	r0, #16
 8005110:	f7fe fa3c 	bl	800358c <malloc>
 8005114:	4602      	mov	r2, r0
 8005116:	61e8      	str	r0, [r5, #28]
 8005118:	b920      	cbnz	r0, 8005124 <_Bfree+0x20>
 800511a:	218f      	movs	r1, #143	; 0x8f
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <_Bfree+0x3c>)
 800511e:	4809      	ldr	r0, [pc, #36]	; (8005144 <_Bfree+0x40>)
 8005120:	f001 fbb0 	bl	8006884 <__assert_func>
 8005124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005128:	6006      	str	r6, [r0, #0]
 800512a:	60c6      	str	r6, [r0, #12]
 800512c:	b13c      	cbz	r4, 800513e <_Bfree+0x3a>
 800512e:	69eb      	ldr	r3, [r5, #28]
 8005130:	6862      	ldr	r2, [r4, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005138:	6021      	str	r1, [r4, #0]
 800513a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	08007220 	.word	0x08007220
 8005144:	08007237 	.word	0x08007237

08005148 <__multadd>:
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	4607      	mov	r7, r0
 800514e:	460c      	mov	r4, r1
 8005150:	461e      	mov	r6, r3
 8005152:	2000      	movs	r0, #0
 8005154:	690d      	ldr	r5, [r1, #16]
 8005156:	f101 0c14 	add.w	ip, r1, #20
 800515a:	f8dc 3000 	ldr.w	r3, [ip]
 800515e:	3001      	adds	r0, #1
 8005160:	b299      	uxth	r1, r3
 8005162:	fb02 6101 	mla	r1, r2, r1, r6
 8005166:	0c1e      	lsrs	r6, r3, #16
 8005168:	0c0b      	lsrs	r3, r1, #16
 800516a:	fb02 3306 	mla	r3, r2, r6, r3
 800516e:	b289      	uxth	r1, r1
 8005170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005174:	4285      	cmp	r5, r0
 8005176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800517a:	f84c 1b04 	str.w	r1, [ip], #4
 800517e:	dcec      	bgt.n	800515a <__multadd+0x12>
 8005180:	b30e      	cbz	r6, 80051c6 <__multadd+0x7e>
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	42ab      	cmp	r3, r5
 8005186:	dc19      	bgt.n	80051bc <__multadd+0x74>
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	4638      	mov	r0, r7
 800518c:	3101      	adds	r1, #1
 800518e:	f7ff ff79 	bl	8005084 <_Balloc>
 8005192:	4680      	mov	r8, r0
 8005194:	b928      	cbnz	r0, 80051a2 <__multadd+0x5a>
 8005196:	4602      	mov	r2, r0
 8005198:	21ba      	movs	r1, #186	; 0xba
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <__multadd+0x84>)
 800519c:	480c      	ldr	r0, [pc, #48]	; (80051d0 <__multadd+0x88>)
 800519e:	f001 fb71 	bl	8006884 <__assert_func>
 80051a2:	6922      	ldr	r2, [r4, #16]
 80051a4:	f104 010c 	add.w	r1, r4, #12
 80051a8:	3202      	adds	r2, #2
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	300c      	adds	r0, #12
 80051ae:	f7ff fba0 	bl	80048f2 <memcpy>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4638      	mov	r0, r7
 80051b6:	f7ff ffa5 	bl	8005104 <_Bfree>
 80051ba:	4644      	mov	r4, r8
 80051bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051c0:	3501      	adds	r5, #1
 80051c2:	615e      	str	r6, [r3, #20]
 80051c4:	6125      	str	r5, [r4, #16]
 80051c6:	4620      	mov	r0, r4
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051cc:	080071af 	.word	0x080071af
 80051d0:	08007237 	.word	0x08007237

080051d4 <__s2b>:
 80051d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d8:	4615      	mov	r5, r2
 80051da:	2209      	movs	r2, #9
 80051dc:	461f      	mov	r7, r3
 80051de:	3308      	adds	r3, #8
 80051e0:	460c      	mov	r4, r1
 80051e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80051e6:	4606      	mov	r6, r0
 80051e8:	2201      	movs	r2, #1
 80051ea:	2100      	movs	r1, #0
 80051ec:	429a      	cmp	r2, r3
 80051ee:	db09      	blt.n	8005204 <__s2b+0x30>
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ff47 	bl	8005084 <_Balloc>
 80051f6:	b940      	cbnz	r0, 800520a <__s2b+0x36>
 80051f8:	4602      	mov	r2, r0
 80051fa:	21d3      	movs	r1, #211	; 0xd3
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <__s2b+0x8c>)
 80051fe:	4819      	ldr	r0, [pc, #100]	; (8005264 <__s2b+0x90>)
 8005200:	f001 fb40 	bl	8006884 <__assert_func>
 8005204:	0052      	lsls	r2, r2, #1
 8005206:	3101      	adds	r1, #1
 8005208:	e7f0      	b.n	80051ec <__s2b+0x18>
 800520a:	9b08      	ldr	r3, [sp, #32]
 800520c:	2d09      	cmp	r5, #9
 800520e:	6143      	str	r3, [r0, #20]
 8005210:	f04f 0301 	mov.w	r3, #1
 8005214:	6103      	str	r3, [r0, #16]
 8005216:	dd16      	ble.n	8005246 <__s2b+0x72>
 8005218:	f104 0909 	add.w	r9, r4, #9
 800521c:	46c8      	mov	r8, r9
 800521e:	442c      	add	r4, r5
 8005220:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005224:	4601      	mov	r1, r0
 8005226:	220a      	movs	r2, #10
 8005228:	4630      	mov	r0, r6
 800522a:	3b30      	subs	r3, #48	; 0x30
 800522c:	f7ff ff8c 	bl	8005148 <__multadd>
 8005230:	45a0      	cmp	r8, r4
 8005232:	d1f5      	bne.n	8005220 <__s2b+0x4c>
 8005234:	f1a5 0408 	sub.w	r4, r5, #8
 8005238:	444c      	add	r4, r9
 800523a:	1b2d      	subs	r5, r5, r4
 800523c:	1963      	adds	r3, r4, r5
 800523e:	42bb      	cmp	r3, r7
 8005240:	db04      	blt.n	800524c <__s2b+0x78>
 8005242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005246:	2509      	movs	r5, #9
 8005248:	340a      	adds	r4, #10
 800524a:	e7f6      	b.n	800523a <__s2b+0x66>
 800524c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005250:	4601      	mov	r1, r0
 8005252:	220a      	movs	r2, #10
 8005254:	4630      	mov	r0, r6
 8005256:	3b30      	subs	r3, #48	; 0x30
 8005258:	f7ff ff76 	bl	8005148 <__multadd>
 800525c:	e7ee      	b.n	800523c <__s2b+0x68>
 800525e:	bf00      	nop
 8005260:	080071af 	.word	0x080071af
 8005264:	08007237 	.word	0x08007237

08005268 <__hi0bits>:
 8005268:	0c02      	lsrs	r2, r0, #16
 800526a:	0412      	lsls	r2, r2, #16
 800526c:	4603      	mov	r3, r0
 800526e:	b9ca      	cbnz	r2, 80052a4 <__hi0bits+0x3c>
 8005270:	0403      	lsls	r3, r0, #16
 8005272:	2010      	movs	r0, #16
 8005274:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005278:	bf04      	itt	eq
 800527a:	021b      	lsleq	r3, r3, #8
 800527c:	3008      	addeq	r0, #8
 800527e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005282:	bf04      	itt	eq
 8005284:	011b      	lsleq	r3, r3, #4
 8005286:	3004      	addeq	r0, #4
 8005288:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800528c:	bf04      	itt	eq
 800528e:	009b      	lsleq	r3, r3, #2
 8005290:	3002      	addeq	r0, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	db05      	blt.n	80052a2 <__hi0bits+0x3a>
 8005296:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800529a:	f100 0001 	add.w	r0, r0, #1
 800529e:	bf08      	it	eq
 80052a0:	2020      	moveq	r0, #32
 80052a2:	4770      	bx	lr
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7e5      	b.n	8005274 <__hi0bits+0xc>

080052a8 <__lo0bits>:
 80052a8:	6803      	ldr	r3, [r0, #0]
 80052aa:	4602      	mov	r2, r0
 80052ac:	f013 0007 	ands.w	r0, r3, #7
 80052b0:	d00b      	beq.n	80052ca <__lo0bits+0x22>
 80052b2:	07d9      	lsls	r1, r3, #31
 80052b4:	d421      	bmi.n	80052fa <__lo0bits+0x52>
 80052b6:	0798      	lsls	r0, r3, #30
 80052b8:	bf49      	itett	mi
 80052ba:	085b      	lsrmi	r3, r3, #1
 80052bc:	089b      	lsrpl	r3, r3, #2
 80052be:	2001      	movmi	r0, #1
 80052c0:	6013      	strmi	r3, [r2, #0]
 80052c2:	bf5c      	itt	pl
 80052c4:	2002      	movpl	r0, #2
 80052c6:	6013      	strpl	r3, [r2, #0]
 80052c8:	4770      	bx	lr
 80052ca:	b299      	uxth	r1, r3
 80052cc:	b909      	cbnz	r1, 80052d2 <__lo0bits+0x2a>
 80052ce:	2010      	movs	r0, #16
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	b2d9      	uxtb	r1, r3
 80052d4:	b909      	cbnz	r1, 80052da <__lo0bits+0x32>
 80052d6:	3008      	adds	r0, #8
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	0719      	lsls	r1, r3, #28
 80052dc:	bf04      	itt	eq
 80052de:	091b      	lsreq	r3, r3, #4
 80052e0:	3004      	addeq	r0, #4
 80052e2:	0799      	lsls	r1, r3, #30
 80052e4:	bf04      	itt	eq
 80052e6:	089b      	lsreq	r3, r3, #2
 80052e8:	3002      	addeq	r0, #2
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d403      	bmi.n	80052f6 <__lo0bits+0x4e>
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	f100 0001 	add.w	r0, r0, #1
 80052f4:	d003      	beq.n	80052fe <__lo0bits+0x56>
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4770      	bx	lr
 80052fa:	2000      	movs	r0, #0
 80052fc:	4770      	bx	lr
 80052fe:	2020      	movs	r0, #32
 8005300:	4770      	bx	lr
	...

08005304 <__i2b>:
 8005304:	b510      	push	{r4, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	2101      	movs	r1, #1
 800530a:	f7ff febb 	bl	8005084 <_Balloc>
 800530e:	4602      	mov	r2, r0
 8005310:	b928      	cbnz	r0, 800531e <__i2b+0x1a>
 8005312:	f240 1145 	movw	r1, #325	; 0x145
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <__i2b+0x24>)
 8005318:	4804      	ldr	r0, [pc, #16]	; (800532c <__i2b+0x28>)
 800531a:	f001 fab3 	bl	8006884 <__assert_func>
 800531e:	2301      	movs	r3, #1
 8005320:	6144      	str	r4, [r0, #20]
 8005322:	6103      	str	r3, [r0, #16]
 8005324:	bd10      	pop	{r4, pc}
 8005326:	bf00      	nop
 8005328:	080071af 	.word	0x080071af
 800532c:	08007237 	.word	0x08007237

08005330 <__multiply>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	4691      	mov	r9, r2
 8005336:	690a      	ldr	r2, [r1, #16]
 8005338:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800533c:	460c      	mov	r4, r1
 800533e:	429a      	cmp	r2, r3
 8005340:	bfbe      	ittt	lt
 8005342:	460b      	movlt	r3, r1
 8005344:	464c      	movlt	r4, r9
 8005346:	4699      	movlt	r9, r3
 8005348:	6927      	ldr	r7, [r4, #16]
 800534a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	6861      	ldr	r1, [r4, #4]
 8005352:	eb07 060a 	add.w	r6, r7, sl
 8005356:	42b3      	cmp	r3, r6
 8005358:	b085      	sub	sp, #20
 800535a:	bfb8      	it	lt
 800535c:	3101      	addlt	r1, #1
 800535e:	f7ff fe91 	bl	8005084 <_Balloc>
 8005362:	b930      	cbnz	r0, 8005372 <__multiply+0x42>
 8005364:	4602      	mov	r2, r0
 8005366:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800536a:	4b43      	ldr	r3, [pc, #268]	; (8005478 <__multiply+0x148>)
 800536c:	4843      	ldr	r0, [pc, #268]	; (800547c <__multiply+0x14c>)
 800536e:	f001 fa89 	bl	8006884 <__assert_func>
 8005372:	f100 0514 	add.w	r5, r0, #20
 8005376:	462b      	mov	r3, r5
 8005378:	2200      	movs	r2, #0
 800537a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800537e:	4543      	cmp	r3, r8
 8005380:	d321      	bcc.n	80053c6 <__multiply+0x96>
 8005382:	f104 0314 	add.w	r3, r4, #20
 8005386:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800538a:	f109 0314 	add.w	r3, r9, #20
 800538e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005392:	9202      	str	r2, [sp, #8]
 8005394:	1b3a      	subs	r2, r7, r4
 8005396:	3a15      	subs	r2, #21
 8005398:	f022 0203 	bic.w	r2, r2, #3
 800539c:	3204      	adds	r2, #4
 800539e:	f104 0115 	add.w	r1, r4, #21
 80053a2:	428f      	cmp	r7, r1
 80053a4:	bf38      	it	cc
 80053a6:	2204      	movcc	r2, #4
 80053a8:	9201      	str	r2, [sp, #4]
 80053aa:	9a02      	ldr	r2, [sp, #8]
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d80c      	bhi.n	80053cc <__multiply+0x9c>
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	dd03      	ble.n	80053be <__multiply+0x8e>
 80053b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d05a      	beq.n	8005474 <__multiply+0x144>
 80053be:	6106      	str	r6, [r0, #16]
 80053c0:	b005      	add	sp, #20
 80053c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c6:	f843 2b04 	str.w	r2, [r3], #4
 80053ca:	e7d8      	b.n	800537e <__multiply+0x4e>
 80053cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d023      	beq.n	800541e <__multiply+0xee>
 80053d6:	46a9      	mov	r9, r5
 80053d8:	f04f 0c00 	mov.w	ip, #0
 80053dc:	f104 0e14 	add.w	lr, r4, #20
 80053e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053e4:	f8d9 1000 	ldr.w	r1, [r9]
 80053e8:	fa1f fb82 	uxth.w	fp, r2
 80053ec:	b289      	uxth	r1, r1
 80053ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80053f2:	4461      	add	r1, ip
 80053f4:	f8d9 c000 	ldr.w	ip, [r9]
 80053f8:	0c12      	lsrs	r2, r2, #16
 80053fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80053fe:	fb0a c202 	mla	r2, sl, r2, ip
 8005402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005406:	b289      	uxth	r1, r1
 8005408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800540c:	4577      	cmp	r7, lr
 800540e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005412:	f849 1b04 	str.w	r1, [r9], #4
 8005416:	d8e3      	bhi.n	80053e0 <__multiply+0xb0>
 8005418:	9a01      	ldr	r2, [sp, #4]
 800541a:	f845 c002 	str.w	ip, [r5, r2]
 800541e:	9a03      	ldr	r2, [sp, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005426:	f1b9 0f00 	cmp.w	r9, #0
 800542a:	d021      	beq.n	8005470 <__multiply+0x140>
 800542c:	46ae      	mov	lr, r5
 800542e:	f04f 0a00 	mov.w	sl, #0
 8005432:	6829      	ldr	r1, [r5, #0]
 8005434:	f104 0c14 	add.w	ip, r4, #20
 8005438:	f8bc b000 	ldrh.w	fp, [ip]
 800543c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005440:	b289      	uxth	r1, r1
 8005442:	fb09 220b 	mla	r2, r9, fp, r2
 8005446:	4452      	add	r2, sl
 8005448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800544c:	f84e 1b04 	str.w	r1, [lr], #4
 8005450:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005458:	f8be 1000 	ldrh.w	r1, [lr]
 800545c:	4567      	cmp	r7, ip
 800545e:	fb09 110a 	mla	r1, r9, sl, r1
 8005462:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005466:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800546a:	d8e5      	bhi.n	8005438 <__multiply+0x108>
 800546c:	9a01      	ldr	r2, [sp, #4]
 800546e:	50a9      	str	r1, [r5, r2]
 8005470:	3504      	adds	r5, #4
 8005472:	e79a      	b.n	80053aa <__multiply+0x7a>
 8005474:	3e01      	subs	r6, #1
 8005476:	e79c      	b.n	80053b2 <__multiply+0x82>
 8005478:	080071af 	.word	0x080071af
 800547c:	08007237 	.word	0x08007237

08005480 <__pow5mult>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	4615      	mov	r5, r2
 8005486:	f012 0203 	ands.w	r2, r2, #3
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	d007      	beq.n	80054a0 <__pow5mult+0x20>
 8005490:	4c25      	ldr	r4, [pc, #148]	; (8005528 <__pow5mult+0xa8>)
 8005492:	3a01      	subs	r2, #1
 8005494:	2300      	movs	r3, #0
 8005496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800549a:	f7ff fe55 	bl	8005148 <__multadd>
 800549e:	4607      	mov	r7, r0
 80054a0:	10ad      	asrs	r5, r5, #2
 80054a2:	d03d      	beq.n	8005520 <__pow5mult+0xa0>
 80054a4:	69f4      	ldr	r4, [r6, #28]
 80054a6:	b97c      	cbnz	r4, 80054c8 <__pow5mult+0x48>
 80054a8:	2010      	movs	r0, #16
 80054aa:	f7fe f86f 	bl	800358c <malloc>
 80054ae:	4602      	mov	r2, r0
 80054b0:	61f0      	str	r0, [r6, #28]
 80054b2:	b928      	cbnz	r0, 80054c0 <__pow5mult+0x40>
 80054b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <__pow5mult+0xac>)
 80054ba:	481d      	ldr	r0, [pc, #116]	; (8005530 <__pow5mult+0xb0>)
 80054bc:	f001 f9e2 	bl	8006884 <__assert_func>
 80054c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054c4:	6004      	str	r4, [r0, #0]
 80054c6:	60c4      	str	r4, [r0, #12]
 80054c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80054cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054d0:	b94c      	cbnz	r4, 80054e6 <__pow5mult+0x66>
 80054d2:	f240 2171 	movw	r1, #625	; 0x271
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ff14 	bl	8005304 <__i2b>
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	f04f 0900 	mov.w	r9, #0
 80054ea:	07eb      	lsls	r3, r5, #31
 80054ec:	d50a      	bpl.n	8005504 <__pow5mult+0x84>
 80054ee:	4639      	mov	r1, r7
 80054f0:	4622      	mov	r2, r4
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff ff1c 	bl	8005330 <__multiply>
 80054f8:	4680      	mov	r8, r0
 80054fa:	4639      	mov	r1, r7
 80054fc:	4630      	mov	r0, r6
 80054fe:	f7ff fe01 	bl	8005104 <_Bfree>
 8005502:	4647      	mov	r7, r8
 8005504:	106d      	asrs	r5, r5, #1
 8005506:	d00b      	beq.n	8005520 <__pow5mult+0xa0>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	b938      	cbnz	r0, 800551c <__pow5mult+0x9c>
 800550c:	4622      	mov	r2, r4
 800550e:	4621      	mov	r1, r4
 8005510:	4630      	mov	r0, r6
 8005512:	f7ff ff0d 	bl	8005330 <__multiply>
 8005516:	6020      	str	r0, [r4, #0]
 8005518:	f8c0 9000 	str.w	r9, [r0]
 800551c:	4604      	mov	r4, r0
 800551e:	e7e4      	b.n	80054ea <__pow5mult+0x6a>
 8005520:	4638      	mov	r0, r7
 8005522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005526:	bf00      	nop
 8005528:	08007380 	.word	0x08007380
 800552c:	08007220 	.word	0x08007220
 8005530:	08007237 	.word	0x08007237

08005534 <__lshift>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	460c      	mov	r4, r1
 800553a:	4607      	mov	r7, r0
 800553c:	4691      	mov	r9, r2
 800553e:	6923      	ldr	r3, [r4, #16]
 8005540:	6849      	ldr	r1, [r1, #4]
 8005542:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800554c:	f108 0601 	add.w	r6, r8, #1
 8005550:	42b3      	cmp	r3, r6
 8005552:	db0b      	blt.n	800556c <__lshift+0x38>
 8005554:	4638      	mov	r0, r7
 8005556:	f7ff fd95 	bl	8005084 <_Balloc>
 800555a:	4605      	mov	r5, r0
 800555c:	b948      	cbnz	r0, 8005572 <__lshift+0x3e>
 800555e:	4602      	mov	r2, r0
 8005560:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <__lshift+0xd0>)
 8005566:	4828      	ldr	r0, [pc, #160]	; (8005608 <__lshift+0xd4>)
 8005568:	f001 f98c 	bl	8006884 <__assert_func>
 800556c:	3101      	adds	r1, #1
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	e7ee      	b.n	8005550 <__lshift+0x1c>
 8005572:	2300      	movs	r3, #0
 8005574:	f100 0114 	add.w	r1, r0, #20
 8005578:	f100 0210 	add.w	r2, r0, #16
 800557c:	4618      	mov	r0, r3
 800557e:	4553      	cmp	r3, sl
 8005580:	db33      	blt.n	80055ea <__lshift+0xb6>
 8005582:	6920      	ldr	r0, [r4, #16]
 8005584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005588:	f104 0314 	add.w	r3, r4, #20
 800558c:	f019 091f 	ands.w	r9, r9, #31
 8005590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005598:	d02b      	beq.n	80055f2 <__lshift+0xbe>
 800559a:	468a      	mov	sl, r1
 800559c:	2200      	movs	r2, #0
 800559e:	f1c9 0e20 	rsb	lr, r9, #32
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	fa00 f009 	lsl.w	r0, r0, r9
 80055a8:	4310      	orrs	r0, r2
 80055aa:	f84a 0b04 	str.w	r0, [sl], #4
 80055ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b2:	459c      	cmp	ip, r3
 80055b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80055b8:	d8f3      	bhi.n	80055a2 <__lshift+0x6e>
 80055ba:	ebac 0304 	sub.w	r3, ip, r4
 80055be:	3b15      	subs	r3, #21
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	3304      	adds	r3, #4
 80055c6:	f104 0015 	add.w	r0, r4, #21
 80055ca:	4584      	cmp	ip, r0
 80055cc:	bf38      	it	cc
 80055ce:	2304      	movcc	r3, #4
 80055d0:	50ca      	str	r2, [r1, r3]
 80055d2:	b10a      	cbz	r2, 80055d8 <__lshift+0xa4>
 80055d4:	f108 0602 	add.w	r6, r8, #2
 80055d8:	3e01      	subs	r6, #1
 80055da:	4638      	mov	r0, r7
 80055dc:	4621      	mov	r1, r4
 80055de:	612e      	str	r6, [r5, #16]
 80055e0:	f7ff fd90 	bl	8005104 <_Bfree>
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80055ee:	3301      	adds	r3, #1
 80055f0:	e7c5      	b.n	800557e <__lshift+0x4a>
 80055f2:	3904      	subs	r1, #4
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	459c      	cmp	ip, r3
 80055fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80055fe:	d8f9      	bhi.n	80055f4 <__lshift+0xc0>
 8005600:	e7ea      	b.n	80055d8 <__lshift+0xa4>
 8005602:	bf00      	nop
 8005604:	080071af 	.word	0x080071af
 8005608:	08007237 	.word	0x08007237

0800560c <__mcmp>:
 800560c:	4603      	mov	r3, r0
 800560e:	690a      	ldr	r2, [r1, #16]
 8005610:	6900      	ldr	r0, [r0, #16]
 8005612:	b530      	push	{r4, r5, lr}
 8005614:	1a80      	subs	r0, r0, r2
 8005616:	d10d      	bne.n	8005634 <__mcmp+0x28>
 8005618:	3314      	adds	r3, #20
 800561a:	3114      	adds	r1, #20
 800561c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005620:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005624:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005628:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800562c:	4295      	cmp	r5, r2
 800562e:	d002      	beq.n	8005636 <__mcmp+0x2a>
 8005630:	d304      	bcc.n	800563c <__mcmp+0x30>
 8005632:	2001      	movs	r0, #1
 8005634:	bd30      	pop	{r4, r5, pc}
 8005636:	42a3      	cmp	r3, r4
 8005638:	d3f4      	bcc.n	8005624 <__mcmp+0x18>
 800563a:	e7fb      	b.n	8005634 <__mcmp+0x28>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e7f8      	b.n	8005634 <__mcmp+0x28>
	...

08005644 <__mdiff>:
 8005644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	460d      	mov	r5, r1
 800564a:	4607      	mov	r7, r0
 800564c:	4611      	mov	r1, r2
 800564e:	4628      	mov	r0, r5
 8005650:	4614      	mov	r4, r2
 8005652:	f7ff ffdb 	bl	800560c <__mcmp>
 8005656:	1e06      	subs	r6, r0, #0
 8005658:	d111      	bne.n	800567e <__mdiff+0x3a>
 800565a:	4631      	mov	r1, r6
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff fd11 	bl	8005084 <_Balloc>
 8005662:	4602      	mov	r2, r0
 8005664:	b928      	cbnz	r0, 8005672 <__mdiff+0x2e>
 8005666:	f240 2137 	movw	r1, #567	; 0x237
 800566a:	4b3a      	ldr	r3, [pc, #232]	; (8005754 <__mdiff+0x110>)
 800566c:	483a      	ldr	r0, [pc, #232]	; (8005758 <__mdiff+0x114>)
 800566e:	f001 f909 	bl	8006884 <__assert_func>
 8005672:	2301      	movs	r3, #1
 8005674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005678:	4610      	mov	r0, r2
 800567a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567e:	bfa4      	itt	ge
 8005680:	4623      	movge	r3, r4
 8005682:	462c      	movge	r4, r5
 8005684:	4638      	mov	r0, r7
 8005686:	6861      	ldr	r1, [r4, #4]
 8005688:	bfa6      	itte	ge
 800568a:	461d      	movge	r5, r3
 800568c:	2600      	movge	r6, #0
 800568e:	2601      	movlt	r6, #1
 8005690:	f7ff fcf8 	bl	8005084 <_Balloc>
 8005694:	4602      	mov	r2, r0
 8005696:	b918      	cbnz	r0, 80056a0 <__mdiff+0x5c>
 8005698:	f240 2145 	movw	r1, #581	; 0x245
 800569c:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <__mdiff+0x110>)
 800569e:	e7e5      	b.n	800566c <__mdiff+0x28>
 80056a0:	f102 0814 	add.w	r8, r2, #20
 80056a4:	46c2      	mov	sl, r8
 80056a6:	f04f 0c00 	mov.w	ip, #0
 80056aa:	6927      	ldr	r7, [r4, #16]
 80056ac:	60c6      	str	r6, [r0, #12]
 80056ae:	692e      	ldr	r6, [r5, #16]
 80056b0:	f104 0014 	add.w	r0, r4, #20
 80056b4:	f105 0914 	add.w	r9, r5, #20
 80056b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80056bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056c0:	3410      	adds	r4, #16
 80056c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80056c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80056ca:	fa1f f18b 	uxth.w	r1, fp
 80056ce:	4461      	add	r1, ip
 80056d0:	fa1f fc83 	uxth.w	ip, r3
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	eba1 010c 	sub.w	r1, r1, ip
 80056da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056e2:	b289      	uxth	r1, r1
 80056e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80056e8:	454e      	cmp	r6, r9
 80056ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056ee:	f84a 1b04 	str.w	r1, [sl], #4
 80056f2:	d8e6      	bhi.n	80056c2 <__mdiff+0x7e>
 80056f4:	1b73      	subs	r3, r6, r5
 80056f6:	3b15      	subs	r3, #21
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	3515      	adds	r5, #21
 80056fe:	3304      	adds	r3, #4
 8005700:	42ae      	cmp	r6, r5
 8005702:	bf38      	it	cc
 8005704:	2304      	movcc	r3, #4
 8005706:	4418      	add	r0, r3
 8005708:	4443      	add	r3, r8
 800570a:	461e      	mov	r6, r3
 800570c:	4605      	mov	r5, r0
 800570e:	4575      	cmp	r5, lr
 8005710:	d30e      	bcc.n	8005730 <__mdiff+0xec>
 8005712:	f10e 0103 	add.w	r1, lr, #3
 8005716:	1a09      	subs	r1, r1, r0
 8005718:	f021 0103 	bic.w	r1, r1, #3
 800571c:	3803      	subs	r0, #3
 800571e:	4586      	cmp	lr, r0
 8005720:	bf38      	it	cc
 8005722:	2100      	movcc	r1, #0
 8005724:	440b      	add	r3, r1
 8005726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800572a:	b189      	cbz	r1, 8005750 <__mdiff+0x10c>
 800572c:	6117      	str	r7, [r2, #16]
 800572e:	e7a3      	b.n	8005678 <__mdiff+0x34>
 8005730:	f855 8b04 	ldr.w	r8, [r5], #4
 8005734:	fa1f f188 	uxth.w	r1, r8
 8005738:	4461      	add	r1, ip
 800573a:	140c      	asrs	r4, r1, #16
 800573c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005740:	b289      	uxth	r1, r1
 8005742:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005746:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800574a:	f846 1b04 	str.w	r1, [r6], #4
 800574e:	e7de      	b.n	800570e <__mdiff+0xca>
 8005750:	3f01      	subs	r7, #1
 8005752:	e7e8      	b.n	8005726 <__mdiff+0xe2>
 8005754:	080071af 	.word	0x080071af
 8005758:	08007237 	.word	0x08007237

0800575c <__ulp>:
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <__ulp+0x3c>)
 800575e:	400b      	ands	r3, r1
 8005760:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005764:	2b00      	cmp	r3, #0
 8005766:	dc08      	bgt.n	800577a <__ulp+0x1e>
 8005768:	425b      	negs	r3, r3
 800576a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800576e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005772:	da04      	bge.n	800577e <__ulp+0x22>
 8005774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005778:	4113      	asrs	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	e008      	b.n	8005790 <__ulp+0x34>
 800577e:	f1a2 0314 	sub.w	r3, r2, #20
 8005782:	2b1e      	cmp	r3, #30
 8005784:	bfd6      	itet	le
 8005786:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800578a:	2201      	movgt	r2, #1
 800578c:	40da      	lsrle	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	7ff00000 	.word	0x7ff00000

0800579c <__b2d>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	6905      	ldr	r5, [r0, #16]
 80057a0:	f100 0714 	add.w	r7, r0, #20
 80057a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80057a8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80057ac:	1f2e      	subs	r6, r5, #4
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7ff fd5a 	bl	8005268 <__hi0bits>
 80057b4:	f1c0 0220 	rsb	r2, r0, #32
 80057b8:	280a      	cmp	r0, #10
 80057ba:	4603      	mov	r3, r0
 80057bc:	f8df c068 	ldr.w	ip, [pc, #104]	; 8005828 <__b2d+0x8c>
 80057c0:	600a      	str	r2, [r1, #0]
 80057c2:	dc12      	bgt.n	80057ea <__b2d+0x4e>
 80057c4:	f1c0 0e0b 	rsb	lr, r0, #11
 80057c8:	fa24 f20e 	lsr.w	r2, r4, lr
 80057cc:	42b7      	cmp	r7, r6
 80057ce:	ea42 010c 	orr.w	r1, r2, ip
 80057d2:	bf2c      	ite	cs
 80057d4:	2200      	movcs	r2, #0
 80057d6:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80057da:	3315      	adds	r3, #21
 80057dc:	fa04 f303 	lsl.w	r3, r4, r3
 80057e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80057e4:	431a      	orrs	r2, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ea:	42b7      	cmp	r7, r6
 80057ec:	bf2e      	itee	cs
 80057ee:	2200      	movcs	r2, #0
 80057f0:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80057f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80057f8:	3b0b      	subs	r3, #11
 80057fa:	d012      	beq.n	8005822 <__b2d+0x86>
 80057fc:	f1c3 0520 	rsb	r5, r3, #32
 8005800:	fa22 f105 	lsr.w	r1, r2, r5
 8005804:	409c      	lsls	r4, r3
 8005806:	430c      	orrs	r4, r1
 8005808:	42be      	cmp	r6, r7
 800580a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800580e:	bf94      	ite	ls
 8005810:	2400      	movls	r4, #0
 8005812:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005816:	409a      	lsls	r2, r3
 8005818:	40ec      	lsrs	r4, r5
 800581a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800581e:	4322      	orrs	r2, r4
 8005820:	e7e1      	b.n	80057e6 <__b2d+0x4a>
 8005822:	ea44 010c 	orr.w	r1, r4, ip
 8005826:	e7de      	b.n	80057e6 <__b2d+0x4a>
 8005828:	3ff00000 	.word	0x3ff00000

0800582c <__d2b>:
 800582c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800582e:	2101      	movs	r1, #1
 8005830:	4617      	mov	r7, r2
 8005832:	461c      	mov	r4, r3
 8005834:	9e08      	ldr	r6, [sp, #32]
 8005836:	f7ff fc25 	bl	8005084 <_Balloc>
 800583a:	4605      	mov	r5, r0
 800583c:	b930      	cbnz	r0, 800584c <__d2b+0x20>
 800583e:	4602      	mov	r2, r0
 8005840:	f240 310f 	movw	r1, #783	; 0x30f
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <__d2b+0xa4>)
 8005846:	4823      	ldr	r0, [pc, #140]	; (80058d4 <__d2b+0xa8>)
 8005848:	f001 f81c 	bl	8006884 <__assert_func>
 800584c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005850:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005854:	bb24      	cbnz	r4, 80058a0 <__d2b+0x74>
 8005856:	2f00      	cmp	r7, #0
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	d026      	beq.n	80058aa <__d2b+0x7e>
 800585c:	4668      	mov	r0, sp
 800585e:	9700      	str	r7, [sp, #0]
 8005860:	f7ff fd22 	bl	80052a8 <__lo0bits>
 8005864:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005868:	b1e8      	cbz	r0, 80058a6 <__d2b+0x7a>
 800586a:	f1c0 0320 	rsb	r3, r0, #32
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	430b      	orrs	r3, r1
 8005874:	40c2      	lsrs	r2, r0
 8005876:	616b      	str	r3, [r5, #20]
 8005878:	9201      	str	r2, [sp, #4]
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf14      	ite	ne
 8005880:	2102      	movne	r1, #2
 8005882:	2101      	moveq	r1, #1
 8005884:	61ab      	str	r3, [r5, #24]
 8005886:	6129      	str	r1, [r5, #16]
 8005888:	b1bc      	cbz	r4, 80058ba <__d2b+0x8e>
 800588a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800588e:	4404      	add	r4, r0
 8005890:	6034      	str	r4, [r6, #0]
 8005892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005898:	6018      	str	r0, [r3, #0]
 800589a:	4628      	mov	r0, r5
 800589c:	b003      	add	sp, #12
 800589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a4:	e7d7      	b.n	8005856 <__d2b+0x2a>
 80058a6:	6169      	str	r1, [r5, #20]
 80058a8:	e7e7      	b.n	800587a <__d2b+0x4e>
 80058aa:	a801      	add	r0, sp, #4
 80058ac:	f7ff fcfc 	bl	80052a8 <__lo0bits>
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	2101      	movs	r1, #1
 80058b4:	616b      	str	r3, [r5, #20]
 80058b6:	3020      	adds	r0, #32
 80058b8:	e7e5      	b.n	8005886 <__d2b+0x5a>
 80058ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058be:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80058c2:	6030      	str	r0, [r6, #0]
 80058c4:	6918      	ldr	r0, [r3, #16]
 80058c6:	f7ff fccf 	bl	8005268 <__hi0bits>
 80058ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80058ce:	e7e2      	b.n	8005896 <__d2b+0x6a>
 80058d0:	080071af 	.word	0x080071af
 80058d4:	08007237 	.word	0x08007237

080058d8 <__ratio>:
 80058d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4688      	mov	r8, r1
 80058de:	4669      	mov	r1, sp
 80058e0:	4681      	mov	r9, r0
 80058e2:	f7ff ff5b 	bl	800579c <__b2d>
 80058e6:	460f      	mov	r7, r1
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	4640      	mov	r0, r8
 80058ee:	a901      	add	r1, sp, #4
 80058f0:	f7ff ff54 	bl	800579c <__b2d>
 80058f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80058fc:	468b      	mov	fp, r1
 80058fe:	eba3 0c02 	sub.w	ip, r3, r2
 8005902:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfd5      	itete	le
 8005910:	460a      	movle	r2, r1
 8005912:	462a      	movgt	r2, r5
 8005914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005918:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800591c:	bfd8      	it	le
 800591e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005922:	465b      	mov	r3, fp
 8005924:	4602      	mov	r2, r0
 8005926:	4639      	mov	r1, r7
 8005928:	4620      	mov	r0, r4
 800592a:	f7fa ff09 	bl	8000740 <__aeabi_ddiv>
 800592e:	b003      	add	sp, #12
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005934 <__copybits>:
 8005934:	3901      	subs	r1, #1
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	1149      	asrs	r1, r1, #5
 800593a:	6914      	ldr	r4, [r2, #16]
 800593c:	3101      	adds	r1, #1
 800593e:	f102 0314 	add.w	r3, r2, #20
 8005942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800594a:	1f05      	subs	r5, r0, #4
 800594c:	42a3      	cmp	r3, r4
 800594e:	d30c      	bcc.n	800596a <__copybits+0x36>
 8005950:	1aa3      	subs	r3, r4, r2
 8005952:	3b11      	subs	r3, #17
 8005954:	f023 0303 	bic.w	r3, r3, #3
 8005958:	3211      	adds	r2, #17
 800595a:	42a2      	cmp	r2, r4
 800595c:	bf88      	it	hi
 800595e:	2300      	movhi	r3, #0
 8005960:	4418      	add	r0, r3
 8005962:	2300      	movs	r3, #0
 8005964:	4288      	cmp	r0, r1
 8005966:	d305      	bcc.n	8005974 <__copybits+0x40>
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	f853 6b04 	ldr.w	r6, [r3], #4
 800596e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005972:	e7eb      	b.n	800594c <__copybits+0x18>
 8005974:	f840 3b04 	str.w	r3, [r0], #4
 8005978:	e7f4      	b.n	8005964 <__copybits+0x30>

0800597a <__any_on>:
 800597a:	f100 0214 	add.w	r2, r0, #20
 800597e:	6900      	ldr	r0, [r0, #16]
 8005980:	114b      	asrs	r3, r1, #5
 8005982:	4298      	cmp	r0, r3
 8005984:	b510      	push	{r4, lr}
 8005986:	db11      	blt.n	80059ac <__any_on+0x32>
 8005988:	dd0a      	ble.n	80059a0 <__any_on+0x26>
 800598a:	f011 011f 	ands.w	r1, r1, #31
 800598e:	d007      	beq.n	80059a0 <__any_on+0x26>
 8005990:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005994:	fa24 f001 	lsr.w	r0, r4, r1
 8005998:	fa00 f101 	lsl.w	r1, r0, r1
 800599c:	428c      	cmp	r4, r1
 800599e:	d10b      	bne.n	80059b8 <__any_on+0x3e>
 80059a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d803      	bhi.n	80059b0 <__any_on+0x36>
 80059a8:	2000      	movs	r0, #0
 80059aa:	bd10      	pop	{r4, pc}
 80059ac:	4603      	mov	r3, r0
 80059ae:	e7f7      	b.n	80059a0 <__any_on+0x26>
 80059b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d0f5      	beq.n	80059a4 <__any_on+0x2a>
 80059b8:	2001      	movs	r0, #1
 80059ba:	e7f6      	b.n	80059aa <__any_on+0x30>

080059bc <_malloc_usable_size_r>:
 80059bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c0:	1f18      	subs	r0, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfbc      	itt	lt
 80059c6:	580b      	ldrlt	r3, [r1, r0]
 80059c8:	18c0      	addlt	r0, r0, r3
 80059ca:	4770      	bx	lr

080059cc <__ascii_wctomb>:
 80059cc:	4603      	mov	r3, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	b141      	cbz	r1, 80059e4 <__ascii_wctomb+0x18>
 80059d2:	2aff      	cmp	r2, #255	; 0xff
 80059d4:	d904      	bls.n	80059e0 <__ascii_wctomb+0x14>
 80059d6:	228a      	movs	r2, #138	; 0x8a
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4770      	bx	lr
 80059e0:	2001      	movs	r0, #1
 80059e2:	700a      	strb	r2, [r1, #0]
 80059e4:	4770      	bx	lr

080059e6 <__ssputs_r>:
 80059e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ea:	461f      	mov	r7, r3
 80059ec:	688e      	ldr	r6, [r1, #8]
 80059ee:	4682      	mov	sl, r0
 80059f0:	42be      	cmp	r6, r7
 80059f2:	460c      	mov	r4, r1
 80059f4:	4690      	mov	r8, r2
 80059f6:	680b      	ldr	r3, [r1, #0]
 80059f8:	d82c      	bhi.n	8005a54 <__ssputs_r+0x6e>
 80059fa:	898a      	ldrh	r2, [r1, #12]
 80059fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a00:	d026      	beq.n	8005a50 <__ssputs_r+0x6a>
 8005a02:	6965      	ldr	r5, [r4, #20]
 8005a04:	6909      	ldr	r1, [r1, #16]
 8005a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a0a:	eba3 0901 	sub.w	r9, r3, r1
 8005a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a12:	1c7b      	adds	r3, r7, #1
 8005a14:	444b      	add	r3, r9
 8005a16:	106d      	asrs	r5, r5, #1
 8005a18:	429d      	cmp	r5, r3
 8005a1a:	bf38      	it	cc
 8005a1c:	461d      	movcc	r5, r3
 8005a1e:	0553      	lsls	r3, r2, #21
 8005a20:	d527      	bpl.n	8005a72 <__ssputs_r+0x8c>
 8005a22:	4629      	mov	r1, r5
 8005a24:	f7fd fde2 	bl	80035ec <_malloc_r>
 8005a28:	4606      	mov	r6, r0
 8005a2a:	b360      	cbz	r0, 8005a86 <__ssputs_r+0xa0>
 8005a2c:	464a      	mov	r2, r9
 8005a2e:	6921      	ldr	r1, [r4, #16]
 8005a30:	f7fe ff5f 	bl	80048f2 <memcpy>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	6126      	str	r6, [r4, #16]
 8005a42:	444e      	add	r6, r9
 8005a44:	6026      	str	r6, [r4, #0]
 8005a46:	463e      	mov	r6, r7
 8005a48:	6165      	str	r5, [r4, #20]
 8005a4a:	eba5 0509 	sub.w	r5, r5, r9
 8005a4e:	60a5      	str	r5, [r4, #8]
 8005a50:	42be      	cmp	r6, r7
 8005a52:	d900      	bls.n	8005a56 <__ssputs_r+0x70>
 8005a54:	463e      	mov	r6, r7
 8005a56:	4632      	mov	r2, r6
 8005a58:	4641      	mov	r1, r8
 8005a5a:	6820      	ldr	r0, [r4, #0]
 8005a5c:	f000 fee9 	bl	8006832 <memmove>
 8005a60:	2000      	movs	r0, #0
 8005a62:	68a3      	ldr	r3, [r4, #8]
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	4433      	add	r3, r6
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a72:	462a      	mov	r2, r5
 8005a74:	f7fd fe4e 	bl	8003714 <_realloc_r>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1e0      	bne.n	8005a40 <__ssputs_r+0x5a>
 8005a7e:	4650      	mov	r0, sl
 8005a80:	6921      	ldr	r1, [r4, #16]
 8005a82:	f7fe ff4b 	bl	800491c <_free_r>
 8005a86:	230c      	movs	r3, #12
 8005a88:	f8ca 3000 	str.w	r3, [sl]
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	e7e9      	b.n	8005a6e <__ssputs_r+0x88>
	...

08005a9c <_svfiprintf_r>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4698      	mov	r8, r3
 8005aa2:	898b      	ldrh	r3, [r1, #12]
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	4614      	mov	r4, r2
 8005aac:	b09d      	sub	sp, #116	; 0x74
 8005aae:	d50e      	bpl.n	8005ace <_svfiprintf_r+0x32>
 8005ab0:	690b      	ldr	r3, [r1, #16]
 8005ab2:	b963      	cbnz	r3, 8005ace <_svfiprintf_r+0x32>
 8005ab4:	2140      	movs	r1, #64	; 0x40
 8005ab6:	f7fd fd99 	bl	80035ec <_malloc_r>
 8005aba:	6028      	str	r0, [r5, #0]
 8005abc:	6128      	str	r0, [r5, #16]
 8005abe:	b920      	cbnz	r0, 8005aca <_svfiprintf_r+0x2e>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e0d0      	b.n	8005c6c <_svfiprintf_r+0x1d0>
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	616b      	str	r3, [r5, #20]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ad8:	2330      	movs	r3, #48	; 0x30
 8005ada:	f04f 0901 	mov.w	r9, #1
 8005ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c84 <_svfiprintf_r+0x1e8>
 8005ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aea:	4623      	mov	r3, r4
 8005aec:	469a      	mov	sl, r3
 8005aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005af2:	b10a      	cbz	r2, 8005af8 <_svfiprintf_r+0x5c>
 8005af4:	2a25      	cmp	r2, #37	; 0x25
 8005af6:	d1f9      	bne.n	8005aec <_svfiprintf_r+0x50>
 8005af8:	ebba 0b04 	subs.w	fp, sl, r4
 8005afc:	d00b      	beq.n	8005b16 <_svfiprintf_r+0x7a>
 8005afe:	465b      	mov	r3, fp
 8005b00:	4622      	mov	r2, r4
 8005b02:	4629      	mov	r1, r5
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff ff6e 	bl	80059e6 <__ssputs_r>
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f000 80a9 	beq.w	8005c62 <_svfiprintf_r+0x1c6>
 8005b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b12:	445a      	add	r2, fp
 8005b14:	9209      	str	r2, [sp, #36]	; 0x24
 8005b16:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80a1 	beq.w	8005c62 <_svfiprintf_r+0x1c6>
 8005b20:	2300      	movs	r3, #0
 8005b22:	f04f 32ff 	mov.w	r2, #4294967295
 8005b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b2a:	f10a 0a01 	add.w	sl, sl, #1
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b36:	931a      	str	r3, [sp, #104]	; 0x68
 8005b38:	4654      	mov	r4, sl
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	4850      	ldr	r0, [pc, #320]	; (8005c84 <_svfiprintf_r+0x1e8>)
 8005b42:	f000 fe90 	bl	8006866 <memchr>
 8005b46:	9a04      	ldr	r2, [sp, #16]
 8005b48:	b9d8      	cbnz	r0, 8005b82 <_svfiprintf_r+0xe6>
 8005b4a:	06d0      	lsls	r0, r2, #27
 8005b4c:	bf44      	itt	mi
 8005b4e:	2320      	movmi	r3, #32
 8005b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b54:	0711      	lsls	r1, r2, #28
 8005b56:	bf44      	itt	mi
 8005b58:	232b      	movmi	r3, #43	; 0x2b
 8005b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b62:	2b2a      	cmp	r3, #42	; 0x2a
 8005b64:	d015      	beq.n	8005b92 <_svfiprintf_r+0xf6>
 8005b66:	4654      	mov	r4, sl
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f04f 0c0a 	mov.w	ip, #10
 8005b6e:	9a07      	ldr	r2, [sp, #28]
 8005b70:	4621      	mov	r1, r4
 8005b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b76:	3b30      	subs	r3, #48	; 0x30
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d94d      	bls.n	8005c18 <_svfiprintf_r+0x17c>
 8005b7c:	b1b0      	cbz	r0, 8005bac <_svfiprintf_r+0x110>
 8005b7e:	9207      	str	r2, [sp, #28]
 8005b80:	e014      	b.n	8005bac <_svfiprintf_r+0x110>
 8005b82:	eba0 0308 	sub.w	r3, r0, r8
 8005b86:	fa09 f303 	lsl.w	r3, r9, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	46a2      	mov	sl, r4
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	e7d2      	b.n	8005b38 <_svfiprintf_r+0x9c>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	1d19      	adds	r1, r3, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	9103      	str	r1, [sp, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bfbb      	ittet	lt
 8005b9e:	425b      	neglt	r3, r3
 8005ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ba4:	9307      	strge	r3, [sp, #28]
 8005ba6:	9307      	strlt	r3, [sp, #28]
 8005ba8:	bfb8      	it	lt
 8005baa:	9204      	strlt	r2, [sp, #16]
 8005bac:	7823      	ldrb	r3, [r4, #0]
 8005bae:	2b2e      	cmp	r3, #46	; 0x2e
 8005bb0:	d10c      	bne.n	8005bcc <_svfiprintf_r+0x130>
 8005bb2:	7863      	ldrb	r3, [r4, #1]
 8005bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb6:	d134      	bne.n	8005c22 <_svfiprintf_r+0x186>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	3402      	adds	r4, #2
 8005bbc:	1d1a      	adds	r2, r3, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	9203      	str	r2, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfb8      	it	lt
 8005bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c88 <_svfiprintf_r+0x1ec>
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	7821      	ldrb	r1, [r4, #0]
 8005bd6:	f000 fe46 	bl	8006866 <memchr>
 8005bda:	b138      	cbz	r0, 8005bec <_svfiprintf_r+0x150>
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	eba0 000a 	sub.w	r0, r0, sl
 8005be4:	4082      	lsls	r2, r0
 8005be6:	4313      	orrs	r3, r2
 8005be8:	3401      	adds	r4, #1
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	2206      	movs	r2, #6
 8005bf2:	4826      	ldr	r0, [pc, #152]	; (8005c8c <_svfiprintf_r+0x1f0>)
 8005bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bf8:	f000 fe35 	bl	8006866 <memchr>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d038      	beq.n	8005c72 <_svfiprintf_r+0x1d6>
 8005c00:	4b23      	ldr	r3, [pc, #140]	; (8005c90 <_svfiprintf_r+0x1f4>)
 8005c02:	bb1b      	cbnz	r3, 8005c4c <_svfiprintf_r+0x1b0>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	3307      	adds	r3, #7
 8005c08:	f023 0307 	bic.w	r3, r3, #7
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	4433      	add	r3, r6
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	e768      	b.n	8005aea <_svfiprintf_r+0x4e>
 8005c18:	460c      	mov	r4, r1
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c20:	e7a6      	b.n	8005b70 <_svfiprintf_r+0xd4>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f04f 0c0a 	mov.w	ip, #10
 8005c28:	4619      	mov	r1, r3
 8005c2a:	3401      	adds	r4, #1
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c34:	3a30      	subs	r2, #48	; 0x30
 8005c36:	2a09      	cmp	r2, #9
 8005c38:	d903      	bls.n	8005c42 <_svfiprintf_r+0x1a6>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0c6      	beq.n	8005bcc <_svfiprintf_r+0x130>
 8005c3e:	9105      	str	r1, [sp, #20]
 8005c40:	e7c4      	b.n	8005bcc <_svfiprintf_r+0x130>
 8005c42:	4604      	mov	r4, r0
 8005c44:	2301      	movs	r3, #1
 8005c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c4a:	e7f0      	b.n	8005c2e <_svfiprintf_r+0x192>
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4638      	mov	r0, r7
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <_svfiprintf_r+0x1f8>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	f3af 8000 	nop.w
 8005c5c:	1c42      	adds	r2, r0, #1
 8005c5e:	4606      	mov	r6, r0
 8005c60:	d1d6      	bne.n	8005c10 <_svfiprintf_r+0x174>
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	065b      	lsls	r3, r3, #25
 8005c66:	f53f af2d 	bmi.w	8005ac4 <_svfiprintf_r+0x28>
 8005c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c6c:	b01d      	add	sp, #116	; 0x74
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	462a      	mov	r2, r5
 8005c78:	4638      	mov	r0, r7
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <_svfiprintf_r+0x1f8>)
 8005c7c:	a904      	add	r1, sp, #16
 8005c7e:	f000 fa4f 	bl	8006120 <_printf_i>
 8005c82:	e7eb      	b.n	8005c5c <_svfiprintf_r+0x1c0>
 8005c84:	0800738c 	.word	0x0800738c
 8005c88:	08007392 	.word	0x08007392
 8005c8c:	08007396 	.word	0x08007396
 8005c90:	00000000 	.word	0x00000000
 8005c94:	080059e7 	.word	0x080059e7

08005c98 <_sungetc_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	1c4b      	adds	r3, r1, #1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	d103      	bne.n	8005ca8 <_sungetc_r+0x10>
 8005ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	8993      	ldrh	r3, [r2, #12]
 8005caa:	b2cd      	uxtb	r5, r1
 8005cac:	f023 0320 	bic.w	r3, r3, #32
 8005cb0:	8193      	strh	r3, [r2, #12]
 8005cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cb4:	6852      	ldr	r2, [r2, #4]
 8005cb6:	b18b      	cbz	r3, 8005cdc <_sungetc_r+0x44>
 8005cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	dd08      	ble.n	8005cd0 <_sungetc_r+0x38>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	1e5a      	subs	r2, r3, #1
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	6063      	str	r3, [r4, #4]
 8005cce:	e7e9      	b.n	8005ca4 <_sungetc_r+0xc>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	f000 fd76 	bl	80067c2 <__submore>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d0f1      	beq.n	8005cbe <_sungetc_r+0x26>
 8005cda:	e7e1      	b.n	8005ca0 <_sungetc_r+0x8>
 8005cdc:	6921      	ldr	r1, [r4, #16]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	b151      	cbz	r1, 8005cf8 <_sungetc_r+0x60>
 8005ce2:	4299      	cmp	r1, r3
 8005ce4:	d208      	bcs.n	8005cf8 <_sungetc_r+0x60>
 8005ce6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005cea:	42a9      	cmp	r1, r5
 8005cec:	d104      	bne.n	8005cf8 <_sungetc_r+0x60>
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	3201      	adds	r2, #1
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	6062      	str	r2, [r4, #4]
 8005cf6:	e7d5      	b.n	8005ca4 <_sungetc_r+0xc>
 8005cf8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d00:	6363      	str	r3, [r4, #52]	; 0x34
 8005d02:	2303      	movs	r3, #3
 8005d04:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d06:	4623      	mov	r3, r4
 8005d08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7dc      	b.n	8005ccc <_sungetc_r+0x34>

08005d12 <__ssrefill_r>:
 8005d12:	b510      	push	{r4, lr}
 8005d14:	460c      	mov	r4, r1
 8005d16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d18:	b169      	cbz	r1, 8005d36 <__ssrefill_r+0x24>
 8005d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	d001      	beq.n	8005d26 <__ssrefill_r+0x14>
 8005d22:	f7fe fdfb 	bl	800491c <_free_r>
 8005d26:	2000      	movs	r0, #0
 8005d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	b113      	cbz	r3, 8005d36 <__ssrefill_r+0x24>
 8005d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6063      	str	r3, [r4, #4]
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	e7f3      	b.n	8005d34 <__ssrefill_r+0x22>

08005d4c <__ssvfiscanf_r>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	460c      	mov	r4, r1
 8005d52:	2100      	movs	r1, #0
 8005d54:	4606      	mov	r6, r0
 8005d56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005d5a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005d5e:	49a6      	ldr	r1, [pc, #664]	; (8005ff8 <__ssvfiscanf_r+0x2ac>)
 8005d60:	f10d 0804 	add.w	r8, sp, #4
 8005d64:	91a0      	str	r1, [sp, #640]	; 0x280
 8005d66:	49a5      	ldr	r1, [pc, #660]	; (8005ffc <__ssvfiscanf_r+0x2b0>)
 8005d68:	4fa5      	ldr	r7, [pc, #660]	; (8006000 <__ssvfiscanf_r+0x2b4>)
 8005d6a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006004 <__ssvfiscanf_r+0x2b8>
 8005d6e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005d72:	91a1      	str	r1, [sp, #644]	; 0x284
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	7813      	ldrb	r3, [r2, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 815a 	beq.w	8006032 <__ssvfiscanf_r+0x2e6>
 8005d7e:	5cf9      	ldrb	r1, [r7, r3]
 8005d80:	1c55      	adds	r5, r2, #1
 8005d82:	f011 0108 	ands.w	r1, r1, #8
 8005d86:	d019      	beq.n	8005dbc <__ssvfiscanf_r+0x70>
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dd0f      	ble.n	8005dae <__ssvfiscanf_r+0x62>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	5cba      	ldrb	r2, [r7, r2]
 8005d94:	0712      	lsls	r2, r2, #28
 8005d96:	d401      	bmi.n	8005d9c <__ssvfiscanf_r+0x50>
 8005d98:	462a      	mov	r2, r5
 8005d9a:	e7ec      	b.n	8005d76 <__ssvfiscanf_r+0x2a>
 8005d9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d9e:	3301      	adds	r3, #1
 8005da0:	3201      	adds	r2, #1
 8005da2:	9245      	str	r2, [sp, #276]	; 0x114
 8005da4:	6862      	ldr	r2, [r4, #4]
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	3a01      	subs	r2, #1
 8005daa:	6062      	str	r2, [r4, #4]
 8005dac:	e7ec      	b.n	8005d88 <__ssvfiscanf_r+0x3c>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4630      	mov	r0, r6
 8005db2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005db4:	4798      	blx	r3
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d0e9      	beq.n	8005d8e <__ssvfiscanf_r+0x42>
 8005dba:	e7ed      	b.n	8005d98 <__ssvfiscanf_r+0x4c>
 8005dbc:	2b25      	cmp	r3, #37	; 0x25
 8005dbe:	d012      	beq.n	8005de6 <__ssvfiscanf_r+0x9a>
 8005dc0:	469a      	mov	sl, r3
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f340 8092 	ble.w	8005eee <__ssvfiscanf_r+0x1a2>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	7813      	ldrb	r3, [r2, #0]
 8005dce:	4553      	cmp	r3, sl
 8005dd0:	f040 812f 	bne.w	8006032 <__ssvfiscanf_r+0x2e6>
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	9345      	str	r3, [sp, #276]	; 0x114
 8005de4:	e7d8      	b.n	8005d98 <__ssvfiscanf_r+0x4c>
 8005de6:	9141      	str	r1, [sp, #260]	; 0x104
 8005de8:	9143      	str	r1, [sp, #268]	; 0x10c
 8005dea:	7853      	ldrb	r3, [r2, #1]
 8005dec:	2b2a      	cmp	r3, #42	; 0x2a
 8005dee:	bf04      	itt	eq
 8005df0:	2310      	moveq	r3, #16
 8005df2:	1c95      	addeq	r5, r2, #2
 8005df4:	f04f 020a 	mov.w	r2, #10
 8005df8:	bf08      	it	eq
 8005dfa:	9341      	streq	r3, [sp, #260]	; 0x104
 8005dfc:	46aa      	mov	sl, r5
 8005dfe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005e02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d91c      	bls.n	8005e44 <__ssvfiscanf_r+0xf8>
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	487d      	ldr	r0, [pc, #500]	; (8006004 <__ssvfiscanf_r+0x2b8>)
 8005e0e:	f000 fd2a 	bl	8006866 <memchr>
 8005e12:	b138      	cbz	r0, 8005e24 <__ssvfiscanf_r+0xd8>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4655      	mov	r5, sl
 8005e18:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e1a:	eba0 0009 	sub.w	r0, r0, r9
 8005e1e:	4083      	lsls	r3, r0
 8005e20:	4313      	orrs	r3, r2
 8005e22:	9341      	str	r3, [sp, #260]	; 0x104
 8005e24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e28:	2b78      	cmp	r3, #120	; 0x78
 8005e2a:	d806      	bhi.n	8005e3a <__ssvfiscanf_r+0xee>
 8005e2c:	2b57      	cmp	r3, #87	; 0x57
 8005e2e:	d810      	bhi.n	8005e52 <__ssvfiscanf_r+0x106>
 8005e30:	2b25      	cmp	r3, #37	; 0x25
 8005e32:	d0c5      	beq.n	8005dc0 <__ssvfiscanf_r+0x74>
 8005e34:	d856      	bhi.n	8005ee4 <__ssvfiscanf_r+0x198>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d064      	beq.n	8005f04 <__ssvfiscanf_r+0x1b8>
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e3e:	230a      	movs	r3, #10
 8005e40:	9342      	str	r3, [sp, #264]	; 0x108
 8005e42:	e075      	b.n	8005f30 <__ssvfiscanf_r+0x1e4>
 8005e44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e46:	4655      	mov	r5, sl
 8005e48:	fb02 1103 	mla	r1, r2, r3, r1
 8005e4c:	3930      	subs	r1, #48	; 0x30
 8005e4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005e50:	e7d4      	b.n	8005dfc <__ssvfiscanf_r+0xb0>
 8005e52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005e56:	2a20      	cmp	r2, #32
 8005e58:	d8ef      	bhi.n	8005e3a <__ssvfiscanf_r+0xee>
 8005e5a:	a101      	add	r1, pc, #4	; (adr r1, 8005e60 <__ssvfiscanf_r+0x114>)
 8005e5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e60:	08005f13 	.word	0x08005f13
 8005e64:	08005e3b 	.word	0x08005e3b
 8005e68:	08005e3b 	.word	0x08005e3b
 8005e6c:	08005f71 	.word	0x08005f71
 8005e70:	08005e3b 	.word	0x08005e3b
 8005e74:	08005e3b 	.word	0x08005e3b
 8005e78:	08005e3b 	.word	0x08005e3b
 8005e7c:	08005e3b 	.word	0x08005e3b
 8005e80:	08005e3b 	.word	0x08005e3b
 8005e84:	08005e3b 	.word	0x08005e3b
 8005e88:	08005e3b 	.word	0x08005e3b
 8005e8c:	08005f87 	.word	0x08005f87
 8005e90:	08005f6d 	.word	0x08005f6d
 8005e94:	08005eeb 	.word	0x08005eeb
 8005e98:	08005eeb 	.word	0x08005eeb
 8005e9c:	08005eeb 	.word	0x08005eeb
 8005ea0:	08005e3b 	.word	0x08005e3b
 8005ea4:	08005f29 	.word	0x08005f29
 8005ea8:	08005e3b 	.word	0x08005e3b
 8005eac:	08005e3b 	.word	0x08005e3b
 8005eb0:	08005e3b 	.word	0x08005e3b
 8005eb4:	08005e3b 	.word	0x08005e3b
 8005eb8:	08005f97 	.word	0x08005f97
 8005ebc:	08005f65 	.word	0x08005f65
 8005ec0:	08005f0b 	.word	0x08005f0b
 8005ec4:	08005e3b 	.word	0x08005e3b
 8005ec8:	08005e3b 	.word	0x08005e3b
 8005ecc:	08005f93 	.word	0x08005f93
 8005ed0:	08005e3b 	.word	0x08005e3b
 8005ed4:	08005f6d 	.word	0x08005f6d
 8005ed8:	08005e3b 	.word	0x08005e3b
 8005edc:	08005e3b 	.word	0x08005e3b
 8005ee0:	08005f13 	.word	0x08005f13
 8005ee4:	3b45      	subs	r3, #69	; 0x45
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d8a7      	bhi.n	8005e3a <__ssvfiscanf_r+0xee>
 8005eea:	2305      	movs	r3, #5
 8005eec:	e01f      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ef4:	4798      	blx	r3
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f43f af67 	beq.w	8005dca <__ssvfiscanf_r+0x7e>
 8005efc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 808d 	bne.w	800601e <__ssvfiscanf_r+0x2d2>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e08f      	b.n	800602a <__ssvfiscanf_r+0x2de>
 8005f0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f0c:	f042 0220 	orr.w	r2, r2, #32
 8005f10:	9241      	str	r2, [sp, #260]	; 0x104
 8005f12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f18:	9241      	str	r2, [sp, #260]	; 0x104
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	2b6f      	cmp	r3, #111	; 0x6f
 8005f1e:	bf34      	ite	cc
 8005f20:	2303      	movcc	r3, #3
 8005f22:	2304      	movcs	r3, #4
 8005f24:	9242      	str	r2, [sp, #264]	; 0x108
 8005f26:	e002      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9342      	str	r3, [sp, #264]	; 0x108
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dd3d      	ble.n	8005fb2 <__ssvfiscanf_r+0x266>
 8005f36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f38:	0659      	lsls	r1, r3, #25
 8005f3a:	d404      	bmi.n	8005f46 <__ssvfiscanf_r+0x1fa>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	5cba      	ldrb	r2, [r7, r2]
 8005f42:	0712      	lsls	r2, r2, #28
 8005f44:	d43c      	bmi.n	8005fc0 <__ssvfiscanf_r+0x274>
 8005f46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	dc4b      	bgt.n	8005fe4 <__ssvfiscanf_r+0x298>
 8005f4c:	466b      	mov	r3, sp
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4630      	mov	r0, r6
 8005f52:	a941      	add	r1, sp, #260	; 0x104
 8005f54:	f000 fa06 	bl	8006364 <_scanf_chars>
 8005f58:	2801      	cmp	r0, #1
 8005f5a:	d06a      	beq.n	8006032 <__ssvfiscanf_r+0x2e6>
 8005f5c:	2802      	cmp	r0, #2
 8005f5e:	f47f af1b 	bne.w	8005d98 <__ssvfiscanf_r+0x4c>
 8005f62:	e7cb      	b.n	8005efc <__ssvfiscanf_r+0x1b0>
 8005f64:	2308      	movs	r3, #8
 8005f66:	9342      	str	r3, [sp, #264]	; 0x108
 8005f68:	2304      	movs	r3, #4
 8005f6a:	e7e0      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005f6c:	220a      	movs	r2, #10
 8005f6e:	e7d5      	b.n	8005f1c <__ssvfiscanf_r+0x1d0>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4640      	mov	r0, r8
 8005f74:	f000 fbec 	bl	8006750 <__sccl>
 8005f78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f80:	9341      	str	r3, [sp, #260]	; 0x104
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7d3      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005f86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8c:	9341      	str	r3, [sp, #260]	; 0x104
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e7cd      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e7cb      	b.n	8005f2e <__ssvfiscanf_r+0x1e2>
 8005f96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005f98:	06c3      	lsls	r3, r0, #27
 8005f9a:	f53f aefd 	bmi.w	8005d98 <__ssvfiscanf_r+0x4c>
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fa2:	1d19      	adds	r1, r3, #4
 8005fa4:	9100      	str	r1, [sp, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	07c0      	lsls	r0, r0, #31
 8005faa:	bf4c      	ite	mi
 8005fac:	801a      	strhmi	r2, [r3, #0]
 8005fae:	601a      	strpl	r2, [r3, #0]
 8005fb0:	e6f2      	b.n	8005d98 <__ssvfiscanf_r+0x4c>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fb8:	4798      	blx	r3
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0bb      	beq.n	8005f36 <__ssvfiscanf_r+0x1ea>
 8005fbe:	e79d      	b.n	8005efc <__ssvfiscanf_r+0x1b0>
 8005fc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	9245      	str	r2, [sp, #276]	; 0x114
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	3a01      	subs	r2, #1
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	6062      	str	r2, [r4, #4]
 8005fce:	dd02      	ble.n	8005fd6 <__ssvfiscanf_r+0x28a>
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	e7b2      	b.n	8005f3c <__ssvfiscanf_r+0x1f0>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4630      	mov	r0, r6
 8005fda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fdc:	4798      	blx	r3
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0ac      	beq.n	8005f3c <__ssvfiscanf_r+0x1f0>
 8005fe2:	e78b      	b.n	8005efc <__ssvfiscanf_r+0x1b0>
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	dc0f      	bgt.n	8006008 <__ssvfiscanf_r+0x2bc>
 8005fe8:	466b      	mov	r3, sp
 8005fea:	4622      	mov	r2, r4
 8005fec:	4630      	mov	r0, r6
 8005fee:	a941      	add	r1, sp, #260	; 0x104
 8005ff0:	f000 fa12 	bl	8006418 <_scanf_i>
 8005ff4:	e7b0      	b.n	8005f58 <__ssvfiscanf_r+0x20c>
 8005ff6:	bf00      	nop
 8005ff8:	08005c99 	.word	0x08005c99
 8005ffc:	08005d13 	.word	0x08005d13
 8006000:	080070a9 	.word	0x080070a9
 8006004:	08007392 	.word	0x08007392
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <__ssvfiscanf_r+0x2ec>)
 800600a:	2b00      	cmp	r3, #0
 800600c:	f43f aec4 	beq.w	8005d98 <__ssvfiscanf_r+0x4c>
 8006010:	466b      	mov	r3, sp
 8006012:	4622      	mov	r2, r4
 8006014:	4630      	mov	r0, r6
 8006016:	a941      	add	r1, sp, #260	; 0x104
 8006018:	f3af 8000 	nop.w
 800601c:	e79c      	b.n	8005f58 <__ssvfiscanf_r+0x20c>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006024:	bf18      	it	ne
 8006026:	f04f 30ff 	movne.w	r0, #4294967295
 800602a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006032:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006034:	e7f9      	b.n	800602a <__ssvfiscanf_r+0x2de>
 8006036:	bf00      	nop
 8006038:	00000000 	.word	0x00000000

0800603c <_printf_common>:
 800603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006040:	4616      	mov	r6, r2
 8006042:	4699      	mov	r9, r3
 8006044:	688a      	ldr	r2, [r1, #8]
 8006046:	690b      	ldr	r3, [r1, #16]
 8006048:	4607      	mov	r7, r0
 800604a:	4293      	cmp	r3, r2
 800604c:	bfb8      	it	lt
 800604e:	4613      	movlt	r3, r2
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006056:	460c      	mov	r4, r1
 8006058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800605c:	b10a      	cbz	r2, 8006062 <_printf_common+0x26>
 800605e:	3301      	adds	r3, #1
 8006060:	6033      	str	r3, [r6, #0]
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	0699      	lsls	r1, r3, #26
 8006066:	bf42      	ittt	mi
 8006068:	6833      	ldrmi	r3, [r6, #0]
 800606a:	3302      	addmi	r3, #2
 800606c:	6033      	strmi	r3, [r6, #0]
 800606e:	6825      	ldr	r5, [r4, #0]
 8006070:	f015 0506 	ands.w	r5, r5, #6
 8006074:	d106      	bne.n	8006084 <_printf_common+0x48>
 8006076:	f104 0a19 	add.w	sl, r4, #25
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	6832      	ldr	r2, [r6, #0]
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	42ab      	cmp	r3, r5
 8006082:	dc2b      	bgt.n	80060dc <_printf_common+0xa0>
 8006084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006088:	1e13      	subs	r3, r2, #0
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	2301      	movne	r3, #1
 8006090:	0692      	lsls	r2, r2, #26
 8006092:	d430      	bmi.n	80060f6 <_printf_common+0xba>
 8006094:	4649      	mov	r1, r9
 8006096:	4638      	mov	r0, r7
 8006098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d023      	beq.n	80060ea <_printf_common+0xae>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	f003 0306 	and.w	r3, r3, #6
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	bf14      	ite	ne
 80060ae:	2500      	movne	r5, #0
 80060b0:	6833      	ldreq	r3, [r6, #0]
 80060b2:	f04f 0600 	mov.w	r6, #0
 80060b6:	bf08      	it	eq
 80060b8:	68e5      	ldreq	r5, [r4, #12]
 80060ba:	f104 041a 	add.w	r4, r4, #26
 80060be:	bf08      	it	eq
 80060c0:	1aed      	subeq	r5, r5, r3
 80060c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060c6:	bf08      	it	eq
 80060c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bfc4      	itt	gt
 80060d0:	1a9b      	subgt	r3, r3, r2
 80060d2:	18ed      	addgt	r5, r5, r3
 80060d4:	42b5      	cmp	r5, r6
 80060d6:	d11a      	bne.n	800610e <_printf_common+0xd2>
 80060d8:	2000      	movs	r0, #0
 80060da:	e008      	b.n	80060ee <_printf_common+0xb2>
 80060dc:	2301      	movs	r3, #1
 80060de:	4652      	mov	r2, sl
 80060e0:	4649      	mov	r1, r9
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c0      	blx	r8
 80060e6:	3001      	adds	r0, #1
 80060e8:	d103      	bne.n	80060f2 <_printf_common+0xb6>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295
 80060ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f2:	3501      	adds	r5, #1
 80060f4:	e7c1      	b.n	800607a <_printf_common+0x3e>
 80060f6:	2030      	movs	r0, #48	; 0x30
 80060f8:	18e1      	adds	r1, r4, r3
 80060fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006104:	4422      	add	r2, r4
 8006106:	3302      	adds	r3, #2
 8006108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610c:	e7c2      	b.n	8006094 <_printf_common+0x58>
 800610e:	2301      	movs	r3, #1
 8006110:	4622      	mov	r2, r4
 8006112:	4649      	mov	r1, r9
 8006114:	4638      	mov	r0, r7
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d0e6      	beq.n	80060ea <_printf_common+0xae>
 800611c:	3601      	adds	r6, #1
 800611e:	e7d9      	b.n	80060d4 <_printf_common+0x98>

08006120 <_printf_i>:
 8006120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	7e0f      	ldrb	r7, [r1, #24]
 8006126:	4691      	mov	r9, r2
 8006128:	2f78      	cmp	r7, #120	; 0x78
 800612a:	4680      	mov	r8, r0
 800612c:	460c      	mov	r4, r1
 800612e:	469a      	mov	sl, r3
 8006130:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006136:	d807      	bhi.n	8006148 <_printf_i+0x28>
 8006138:	2f62      	cmp	r7, #98	; 0x62
 800613a:	d80a      	bhi.n	8006152 <_printf_i+0x32>
 800613c:	2f00      	cmp	r7, #0
 800613e:	f000 80d5 	beq.w	80062ec <_printf_i+0x1cc>
 8006142:	2f58      	cmp	r7, #88	; 0x58
 8006144:	f000 80c1 	beq.w	80062ca <_printf_i+0x1aa>
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006150:	e03a      	b.n	80061c8 <_printf_i+0xa8>
 8006152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006156:	2b15      	cmp	r3, #21
 8006158:	d8f6      	bhi.n	8006148 <_printf_i+0x28>
 800615a:	a101      	add	r1, pc, #4	; (adr r1, 8006160 <_printf_i+0x40>)
 800615c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006160:	080061b9 	.word	0x080061b9
 8006164:	080061cd 	.word	0x080061cd
 8006168:	08006149 	.word	0x08006149
 800616c:	08006149 	.word	0x08006149
 8006170:	08006149 	.word	0x08006149
 8006174:	08006149 	.word	0x08006149
 8006178:	080061cd 	.word	0x080061cd
 800617c:	08006149 	.word	0x08006149
 8006180:	08006149 	.word	0x08006149
 8006184:	08006149 	.word	0x08006149
 8006188:	08006149 	.word	0x08006149
 800618c:	080062d3 	.word	0x080062d3
 8006190:	080061f9 	.word	0x080061f9
 8006194:	0800628d 	.word	0x0800628d
 8006198:	08006149 	.word	0x08006149
 800619c:	08006149 	.word	0x08006149
 80061a0:	080062f5 	.word	0x080062f5
 80061a4:	08006149 	.word	0x08006149
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	08006149 	.word	0x08006149
 80061b0:	08006149 	.word	0x08006149
 80061b4:	08006295 	.word	0x08006295
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0a0      	b.n	800630e <_printf_i+0x1ee>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	0607      	lsls	r7, r0, #24
 80061d2:	f103 0104 	add.w	r1, r3, #4
 80061d6:	6029      	str	r1, [r5, #0]
 80061d8:	d501      	bpl.n	80061de <_printf_i+0xbe>
 80061da:	681e      	ldr	r6, [r3, #0]
 80061dc:	e003      	b.n	80061e6 <_printf_i+0xc6>
 80061de:	0646      	lsls	r6, r0, #25
 80061e0:	d5fb      	bpl.n	80061da <_printf_i+0xba>
 80061e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	da03      	bge.n	80061f2 <_printf_i+0xd2>
 80061ea:	232d      	movs	r3, #45	; 0x2d
 80061ec:	4276      	negs	r6, r6
 80061ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f2:	230a      	movs	r3, #10
 80061f4:	4859      	ldr	r0, [pc, #356]	; (800635c <_printf_i+0x23c>)
 80061f6:	e012      	b.n	800621e <_printf_i+0xfe>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1d19      	adds	r1, r3, #4
 80061fe:	6029      	str	r1, [r5, #0]
 8006200:	0605      	lsls	r5, r0, #24
 8006202:	d501      	bpl.n	8006208 <_printf_i+0xe8>
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	e002      	b.n	800620e <_printf_i+0xee>
 8006208:	0641      	lsls	r1, r0, #25
 800620a:	d5fb      	bpl.n	8006204 <_printf_i+0xe4>
 800620c:	881e      	ldrh	r6, [r3, #0]
 800620e:	2f6f      	cmp	r7, #111	; 0x6f
 8006210:	bf0c      	ite	eq
 8006212:	2308      	moveq	r3, #8
 8006214:	230a      	movne	r3, #10
 8006216:	4851      	ldr	r0, [pc, #324]	; (800635c <_printf_i+0x23c>)
 8006218:	2100      	movs	r1, #0
 800621a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800621e:	6865      	ldr	r5, [r4, #4]
 8006220:	2d00      	cmp	r5, #0
 8006222:	bfa8      	it	ge
 8006224:	6821      	ldrge	r1, [r4, #0]
 8006226:	60a5      	str	r5, [r4, #8]
 8006228:	bfa4      	itt	ge
 800622a:	f021 0104 	bicge.w	r1, r1, #4
 800622e:	6021      	strge	r1, [r4, #0]
 8006230:	b90e      	cbnz	r6, 8006236 <_printf_i+0x116>
 8006232:	2d00      	cmp	r5, #0
 8006234:	d04b      	beq.n	80062ce <_printf_i+0x1ae>
 8006236:	4615      	mov	r5, r2
 8006238:	fbb6 f1f3 	udiv	r1, r6, r3
 800623c:	fb03 6711 	mls	r7, r3, r1, r6
 8006240:	5dc7      	ldrb	r7, [r0, r7]
 8006242:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006246:	4637      	mov	r7, r6
 8006248:	42bb      	cmp	r3, r7
 800624a:	460e      	mov	r6, r1
 800624c:	d9f4      	bls.n	8006238 <_printf_i+0x118>
 800624e:	2b08      	cmp	r3, #8
 8006250:	d10b      	bne.n	800626a <_printf_i+0x14a>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	07de      	lsls	r6, r3, #31
 8006256:	d508      	bpl.n	800626a <_printf_i+0x14a>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	6861      	ldr	r1, [r4, #4]
 800625c:	4299      	cmp	r1, r3
 800625e:	bfde      	ittt	le
 8006260:	2330      	movle	r3, #48	; 0x30
 8006262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006266:	f105 35ff 	addle.w	r5, r5, #4294967295
 800626a:	1b52      	subs	r2, r2, r5
 800626c:	6122      	str	r2, [r4, #16]
 800626e:	464b      	mov	r3, r9
 8006270:	4621      	mov	r1, r4
 8006272:	4640      	mov	r0, r8
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	aa03      	add	r2, sp, #12
 800627a:	f7ff fedf 	bl	800603c <_printf_common>
 800627e:	3001      	adds	r0, #1
 8006280:	d14a      	bne.n	8006318 <_printf_i+0x1f8>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	b004      	add	sp, #16
 8006288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	f043 0320 	orr.w	r3, r3, #32
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	2778      	movs	r7, #120	; 0x78
 8006296:	4832      	ldr	r0, [pc, #200]	; (8006360 <_printf_i+0x240>)
 8006298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	6829      	ldr	r1, [r5, #0]
 80062a0:	061f      	lsls	r7, r3, #24
 80062a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a6:	d402      	bmi.n	80062ae <_printf_i+0x18e>
 80062a8:	065f      	lsls	r7, r3, #25
 80062aa:	bf48      	it	mi
 80062ac:	b2b6      	uxthmi	r6, r6
 80062ae:	07df      	lsls	r7, r3, #31
 80062b0:	bf48      	it	mi
 80062b2:	f043 0320 	orrmi.w	r3, r3, #32
 80062b6:	6029      	str	r1, [r5, #0]
 80062b8:	bf48      	it	mi
 80062ba:	6023      	strmi	r3, [r4, #0]
 80062bc:	b91e      	cbnz	r6, 80062c6 <_printf_i+0x1a6>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f023 0320 	bic.w	r3, r3, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	2310      	movs	r3, #16
 80062c8:	e7a6      	b.n	8006218 <_printf_i+0xf8>
 80062ca:	4824      	ldr	r0, [pc, #144]	; (800635c <_printf_i+0x23c>)
 80062cc:	e7e4      	b.n	8006298 <_printf_i+0x178>
 80062ce:	4615      	mov	r5, r2
 80062d0:	e7bd      	b.n	800624e <_printf_i+0x12e>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	6826      	ldr	r6, [r4, #0]
 80062d6:	1d18      	adds	r0, r3, #4
 80062d8:	6961      	ldr	r1, [r4, #20]
 80062da:	6028      	str	r0, [r5, #0]
 80062dc:	0635      	lsls	r5, r6, #24
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	d501      	bpl.n	80062e6 <_printf_i+0x1c6>
 80062e2:	6019      	str	r1, [r3, #0]
 80062e4:	e002      	b.n	80062ec <_printf_i+0x1cc>
 80062e6:	0670      	lsls	r0, r6, #25
 80062e8:	d5fb      	bpl.n	80062e2 <_printf_i+0x1c2>
 80062ea:	8019      	strh	r1, [r3, #0]
 80062ec:	2300      	movs	r3, #0
 80062ee:	4615      	mov	r5, r2
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	e7bc      	b.n	800626e <_printf_i+0x14e>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	2100      	movs	r1, #0
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	602a      	str	r2, [r5, #0]
 80062fc:	681d      	ldr	r5, [r3, #0]
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	4628      	mov	r0, r5
 8006302:	f000 fab0 	bl	8006866 <memchr>
 8006306:	b108      	cbz	r0, 800630c <_printf_i+0x1ec>
 8006308:	1b40      	subs	r0, r0, r5
 800630a:	6060      	str	r0, [r4, #4]
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	2300      	movs	r3, #0
 8006312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006316:	e7aa      	b.n	800626e <_printf_i+0x14e>
 8006318:	462a      	mov	r2, r5
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	47d0      	blx	sl
 8006322:	3001      	adds	r0, #1
 8006324:	d0ad      	beq.n	8006282 <_printf_i+0x162>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	079b      	lsls	r3, r3, #30
 800632a:	d413      	bmi.n	8006354 <_printf_i+0x234>
 800632c:	68e0      	ldr	r0, [r4, #12]
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	4298      	cmp	r0, r3
 8006332:	bfb8      	it	lt
 8006334:	4618      	movlt	r0, r3
 8006336:	e7a6      	b.n	8006286 <_printf_i+0x166>
 8006338:	2301      	movs	r3, #1
 800633a:	4632      	mov	r2, r6
 800633c:	4649      	mov	r1, r9
 800633e:	4640      	mov	r0, r8
 8006340:	47d0      	blx	sl
 8006342:	3001      	adds	r0, #1
 8006344:	d09d      	beq.n	8006282 <_printf_i+0x162>
 8006346:	3501      	adds	r5, #1
 8006348:	68e3      	ldr	r3, [r4, #12]
 800634a:	9903      	ldr	r1, [sp, #12]
 800634c:	1a5b      	subs	r3, r3, r1
 800634e:	42ab      	cmp	r3, r5
 8006350:	dcf2      	bgt.n	8006338 <_printf_i+0x218>
 8006352:	e7eb      	b.n	800632c <_printf_i+0x20c>
 8006354:	2500      	movs	r5, #0
 8006356:	f104 0619 	add.w	r6, r4, #25
 800635a:	e7f5      	b.n	8006348 <_printf_i+0x228>
 800635c:	0800739d 	.word	0x0800739d
 8006360:	080073ae 	.word	0x080073ae

08006364 <_scanf_chars>:
 8006364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006368:	4615      	mov	r5, r2
 800636a:	688a      	ldr	r2, [r1, #8]
 800636c:	4680      	mov	r8, r0
 800636e:	460c      	mov	r4, r1
 8006370:	b932      	cbnz	r2, 8006380 <_scanf_chars+0x1c>
 8006372:	698a      	ldr	r2, [r1, #24]
 8006374:	2a00      	cmp	r2, #0
 8006376:	bf0c      	ite	eq
 8006378:	2201      	moveq	r2, #1
 800637a:	f04f 32ff 	movne.w	r2, #4294967295
 800637e:	608a      	str	r2, [r1, #8]
 8006380:	2700      	movs	r7, #0
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006414 <_scanf_chars+0xb0>
 8006388:	06d1      	lsls	r1, r2, #27
 800638a:	bf5f      	itttt	pl
 800638c:	681a      	ldrpl	r2, [r3, #0]
 800638e:	1d11      	addpl	r1, r2, #4
 8006390:	6019      	strpl	r1, [r3, #0]
 8006392:	6816      	ldrpl	r6, [r2, #0]
 8006394:	69a0      	ldr	r0, [r4, #24]
 8006396:	b188      	cbz	r0, 80063bc <_scanf_chars+0x58>
 8006398:	2801      	cmp	r0, #1
 800639a:	d107      	bne.n	80063ac <_scanf_chars+0x48>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	6963      	ldr	r3, [r4, #20]
 80063a2:	5c9b      	ldrb	r3, [r3, r2]
 80063a4:	b953      	cbnz	r3, 80063bc <_scanf_chars+0x58>
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	d031      	beq.n	800640e <_scanf_chars+0xaa>
 80063aa:	e022      	b.n	80063f2 <_scanf_chars+0x8e>
 80063ac:	2802      	cmp	r0, #2
 80063ae:	d120      	bne.n	80063f2 <_scanf_chars+0x8e>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80063b8:	071b      	lsls	r3, r3, #28
 80063ba:	d41a      	bmi.n	80063f2 <_scanf_chars+0x8e>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	3701      	adds	r7, #1
 80063c0:	06da      	lsls	r2, r3, #27
 80063c2:	bf5e      	ittt	pl
 80063c4:	682b      	ldrpl	r3, [r5, #0]
 80063c6:	781b      	ldrbpl	r3, [r3, #0]
 80063c8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80063cc:	682a      	ldr	r2, [r5, #0]
 80063ce:	686b      	ldr	r3, [r5, #4]
 80063d0:	3201      	adds	r2, #1
 80063d2:	602a      	str	r2, [r5, #0]
 80063d4:	68a2      	ldr	r2, [r4, #8]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	3a01      	subs	r2, #1
 80063da:	606b      	str	r3, [r5, #4]
 80063dc:	60a2      	str	r2, [r4, #8]
 80063de:	b142      	cbz	r2, 80063f2 <_scanf_chars+0x8e>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dcd7      	bgt.n	8006394 <_scanf_chars+0x30>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4640      	mov	r0, r8
 80063e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063ec:	4798      	blx	r3
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d0d0      	beq.n	8006394 <_scanf_chars+0x30>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f013 0310 	ands.w	r3, r3, #16
 80063f8:	d105      	bne.n	8006406 <_scanf_chars+0xa2>
 80063fa:	68e2      	ldr	r2, [r4, #12]
 80063fc:	3201      	adds	r2, #1
 80063fe:	60e2      	str	r2, [r4, #12]
 8006400:	69a2      	ldr	r2, [r4, #24]
 8006402:	b102      	cbz	r2, 8006406 <_scanf_chars+0xa2>
 8006404:	7033      	strb	r3, [r6, #0]
 8006406:	2000      	movs	r0, #0
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	443b      	add	r3, r7
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	bf00      	nop
 8006414:	080070a9 	.word	0x080070a9

08006418 <_scanf_i>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	4698      	mov	r8, r3
 8006420:	4b72      	ldr	r3, [pc, #456]	; (80065ec <_scanf_i+0x1d4>)
 8006422:	b087      	sub	sp, #28
 8006424:	4682      	mov	sl, r0
 8006426:	4616      	mov	r6, r2
 8006428:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800642c:	ab03      	add	r3, sp, #12
 800642e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006432:	4b6f      	ldr	r3, [pc, #444]	; (80065f0 <_scanf_i+0x1d8>)
 8006434:	69a1      	ldr	r1, [r4, #24]
 8006436:	4a6f      	ldr	r2, [pc, #444]	; (80065f4 <_scanf_i+0x1dc>)
 8006438:	4627      	mov	r7, r4
 800643a:	2903      	cmp	r1, #3
 800643c:	bf18      	it	ne
 800643e:	461a      	movne	r2, r3
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	9201      	str	r2, [sp, #4]
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800644a:	bf81      	itttt	hi
 800644c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006450:	eb03 0905 	addhi.w	r9, r3, r5
 8006454:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006458:	60a3      	strhi	r3, [r4, #8]
 800645a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800645e:	bf98      	it	ls
 8006460:	f04f 0900 	movls.w	r9, #0
 8006464:	463d      	mov	r5, r7
 8006466:	f04f 0b00 	mov.w	fp, #0
 800646a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	6831      	ldr	r1, [r6, #0]
 8006472:	ab03      	add	r3, sp, #12
 8006474:	2202      	movs	r2, #2
 8006476:	7809      	ldrb	r1, [r1, #0]
 8006478:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800647c:	f000 f9f3 	bl	8006866 <memchr>
 8006480:	b328      	cbz	r0, 80064ce <_scanf_i+0xb6>
 8006482:	f1bb 0f01 	cmp.w	fp, #1
 8006486:	d159      	bne.n	800653c <_scanf_i+0x124>
 8006488:	6862      	ldr	r2, [r4, #4]
 800648a:	b92a      	cbnz	r2, 8006498 <_scanf_i+0x80>
 800648c:	2308      	movs	r3, #8
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	6822      	ldr	r2, [r4, #0]
 800649a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	68a2      	ldr	r2, [r4, #8]
 80064a2:	1e51      	subs	r1, r2, #1
 80064a4:	60a1      	str	r1, [r4, #8]
 80064a6:	b192      	cbz	r2, 80064ce <_scanf_i+0xb6>
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	1c51      	adds	r1, r2, #1
 80064ac:	6031      	str	r1, [r6, #0]
 80064ae:	7812      	ldrb	r2, [r2, #0]
 80064b0:	f805 2b01 	strb.w	r2, [r5], #1
 80064b4:	6872      	ldr	r2, [r6, #4]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	6072      	str	r2, [r6, #4]
 80064bc:	dc07      	bgt.n	80064ce <_scanf_i+0xb6>
 80064be:	4631      	mov	r1, r6
 80064c0:	4650      	mov	r0, sl
 80064c2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80064c6:	4790      	blx	r2
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f040 8085 	bne.w	80065d8 <_scanf_i+0x1c0>
 80064ce:	f10b 0b01 	add.w	fp, fp, #1
 80064d2:	f1bb 0f03 	cmp.w	fp, #3
 80064d6:	d1cb      	bne.n	8006470 <_scanf_i+0x58>
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	b90b      	cbnz	r3, 80064e0 <_scanf_i+0xc8>
 80064dc:	230a      	movs	r3, #10
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	4945      	ldr	r1, [pc, #276]	; (80065f8 <_scanf_i+0x1e0>)
 80064e4:	6960      	ldr	r0, [r4, #20]
 80064e6:	1ac9      	subs	r1, r1, r3
 80064e8:	f000 f932 	bl	8006750 <__sccl>
 80064ec:	f04f 0b00 	mov.w	fp, #0
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d03d      	beq.n	8006574 <_scanf_i+0x15c>
 80064f8:	6831      	ldr	r1, [r6, #0]
 80064fa:	6960      	ldr	r0, [r4, #20]
 80064fc:	f891 c000 	ldrb.w	ip, [r1]
 8006500:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006504:	2800      	cmp	r0, #0
 8006506:	d035      	beq.n	8006574 <_scanf_i+0x15c>
 8006508:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800650c:	d124      	bne.n	8006558 <_scanf_i+0x140>
 800650e:	0510      	lsls	r0, r2, #20
 8006510:	d522      	bpl.n	8006558 <_scanf_i+0x140>
 8006512:	f10b 0b01 	add.w	fp, fp, #1
 8006516:	f1b9 0f00 	cmp.w	r9, #0
 800651a:	d003      	beq.n	8006524 <_scanf_i+0x10c>
 800651c:	3301      	adds	r3, #1
 800651e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006522:	60a3      	str	r3, [r4, #8]
 8006524:	6873      	ldr	r3, [r6, #4]
 8006526:	3b01      	subs	r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	6073      	str	r3, [r6, #4]
 800652c:	dd1b      	ble.n	8006566 <_scanf_i+0x14e>
 800652e:	6833      	ldr	r3, [r6, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	3b01      	subs	r3, #1
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	e7d9      	b.n	80064f0 <_scanf_i+0xd8>
 800653c:	f1bb 0f02 	cmp.w	fp, #2
 8006540:	d1ae      	bne.n	80064a0 <_scanf_i+0x88>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006548:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800654c:	d1bf      	bne.n	80064ce <_scanf_i+0xb6>
 800654e:	2310      	movs	r3, #16
 8006550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	e7a2      	b.n	800649e <_scanf_i+0x86>
 8006558:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800655c:	6022      	str	r2, [r4, #0]
 800655e:	780b      	ldrb	r3, [r1, #0]
 8006560:	f805 3b01 	strb.w	r3, [r5], #1
 8006564:	e7de      	b.n	8006524 <_scanf_i+0x10c>
 8006566:	4631      	mov	r1, r6
 8006568:	4650      	mov	r0, sl
 800656a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800656e:	4798      	blx	r3
 8006570:	2800      	cmp	r0, #0
 8006572:	d0df      	beq.n	8006534 <_scanf_i+0x11c>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	05d9      	lsls	r1, r3, #23
 8006578:	d50d      	bpl.n	8006596 <_scanf_i+0x17e>
 800657a:	42bd      	cmp	r5, r7
 800657c:	d909      	bls.n	8006592 <_scanf_i+0x17a>
 800657e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006582:	4632      	mov	r2, r6
 8006584:	4650      	mov	r0, sl
 8006586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800658a:	f105 39ff 	add.w	r9, r5, #4294967295
 800658e:	4798      	blx	r3
 8006590:	464d      	mov	r5, r9
 8006592:	42bd      	cmp	r5, r7
 8006594:	d028      	beq.n	80065e8 <_scanf_i+0x1d0>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	f012 0210 	ands.w	r2, r2, #16
 800659c:	d113      	bne.n	80065c6 <_scanf_i+0x1ae>
 800659e:	702a      	strb	r2, [r5, #0]
 80065a0:	4639      	mov	r1, r7
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	4650      	mov	r0, sl
 80065a6:	9e01      	ldr	r6, [sp, #4]
 80065a8:	47b0      	blx	r6
 80065aa:	f8d8 3000 	ldr.w	r3, [r8]
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	1d1a      	adds	r2, r3, #4
 80065b2:	f8c8 2000 	str.w	r2, [r8]
 80065b6:	f011 0f20 	tst.w	r1, #32
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	d00f      	beq.n	80065de <_scanf_i+0x1c6>
 80065be:	6018      	str	r0, [r3, #0]
 80065c0:	68e3      	ldr	r3, [r4, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60e3      	str	r3, [r4, #12]
 80065c6:	2000      	movs	r0, #0
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	1bed      	subs	r5, r5, r7
 80065cc:	445d      	add	r5, fp
 80065ce:	442b      	add	r3, r5
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	b007      	add	sp, #28
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	f04f 0b00 	mov.w	fp, #0
 80065dc:	e7ca      	b.n	8006574 <_scanf_i+0x15c>
 80065de:	07ca      	lsls	r2, r1, #31
 80065e0:	bf4c      	ite	mi
 80065e2:	8018      	strhmi	r0, [r3, #0]
 80065e4:	6018      	strpl	r0, [r3, #0]
 80065e6:	e7eb      	b.n	80065c0 <_scanf_i+0x1a8>
 80065e8:	2001      	movs	r0, #1
 80065ea:	e7f2      	b.n	80065d2 <_scanf_i+0x1ba>
 80065ec:	08006f58 	.word	0x08006f58
 80065f0:	080069cd 	.word	0x080069cd
 80065f4:	080044b5 	.word	0x080044b5
 80065f8:	080073cf 	.word	0x080073cf

080065fc <__sflush_r>:
 80065fc:	898a      	ldrh	r2, [r1, #12]
 80065fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006600:	4605      	mov	r5, r0
 8006602:	0710      	lsls	r0, r2, #28
 8006604:	460c      	mov	r4, r1
 8006606:	d457      	bmi.n	80066b8 <__sflush_r+0xbc>
 8006608:	684b      	ldr	r3, [r1, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dc04      	bgt.n	8006618 <__sflush_r+0x1c>
 800660e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc01      	bgt.n	8006618 <__sflush_r+0x1c>
 8006614:	2000      	movs	r0, #0
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800661a:	2e00      	cmp	r6, #0
 800661c:	d0fa      	beq.n	8006614 <__sflush_r+0x18>
 800661e:	2300      	movs	r3, #0
 8006620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006624:	682f      	ldr	r7, [r5, #0]
 8006626:	6a21      	ldr	r1, [r4, #32]
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	d032      	beq.n	8006692 <__sflush_r+0x96>
 800662c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	075a      	lsls	r2, r3, #29
 8006632:	d505      	bpl.n	8006640 <__sflush_r+0x44>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	1ac0      	subs	r0, r0, r3
 8006638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800663a:	b10b      	cbz	r3, 8006640 <__sflush_r+0x44>
 800663c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800663e:	1ac0      	subs	r0, r0, r3
 8006640:	2300      	movs	r3, #0
 8006642:	4602      	mov	r2, r0
 8006644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006646:	4628      	mov	r0, r5
 8006648:	6a21      	ldr	r1, [r4, #32]
 800664a:	47b0      	blx	r6
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	d106      	bne.n	8006660 <__sflush_r+0x64>
 8006652:	6829      	ldr	r1, [r5, #0]
 8006654:	291d      	cmp	r1, #29
 8006656:	d82b      	bhi.n	80066b0 <__sflush_r+0xb4>
 8006658:	4a28      	ldr	r2, [pc, #160]	; (80066fc <__sflush_r+0x100>)
 800665a:	410a      	asrs	r2, r1
 800665c:	07d6      	lsls	r6, r2, #31
 800665e:	d427      	bmi.n	80066b0 <__sflush_r+0xb4>
 8006660:	2200      	movs	r2, #0
 8006662:	6062      	str	r2, [r4, #4]
 8006664:	6922      	ldr	r2, [r4, #16]
 8006666:	04d9      	lsls	r1, r3, #19
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	d504      	bpl.n	8006676 <__sflush_r+0x7a>
 800666c:	1c42      	adds	r2, r0, #1
 800666e:	d101      	bne.n	8006674 <__sflush_r+0x78>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b903      	cbnz	r3, 8006676 <__sflush_r+0x7a>
 8006674:	6560      	str	r0, [r4, #84]	; 0x54
 8006676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006678:	602f      	str	r7, [r5, #0]
 800667a:	2900      	cmp	r1, #0
 800667c:	d0ca      	beq.n	8006614 <__sflush_r+0x18>
 800667e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006682:	4299      	cmp	r1, r3
 8006684:	d002      	beq.n	800668c <__sflush_r+0x90>
 8006686:	4628      	mov	r0, r5
 8006688:	f7fe f948 	bl	800491c <_free_r>
 800668c:	2000      	movs	r0, #0
 800668e:	6360      	str	r0, [r4, #52]	; 0x34
 8006690:	e7c1      	b.n	8006616 <__sflush_r+0x1a>
 8006692:	2301      	movs	r3, #1
 8006694:	4628      	mov	r0, r5
 8006696:	47b0      	blx	r6
 8006698:	1c41      	adds	r1, r0, #1
 800669a:	d1c8      	bne.n	800662e <__sflush_r+0x32>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0c5      	beq.n	800662e <__sflush_r+0x32>
 80066a2:	2b1d      	cmp	r3, #29
 80066a4:	d001      	beq.n	80066aa <__sflush_r+0xae>
 80066a6:	2b16      	cmp	r3, #22
 80066a8:	d101      	bne.n	80066ae <__sflush_r+0xb2>
 80066aa:	602f      	str	r7, [r5, #0]
 80066ac:	e7b2      	b.n	8006614 <__sflush_r+0x18>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	e7ae      	b.n	8006616 <__sflush_r+0x1a>
 80066b8:	690f      	ldr	r7, [r1, #16]
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	d0aa      	beq.n	8006614 <__sflush_r+0x18>
 80066be:	0793      	lsls	r3, r2, #30
 80066c0:	bf18      	it	ne
 80066c2:	2300      	movne	r3, #0
 80066c4:	680e      	ldr	r6, [r1, #0]
 80066c6:	bf08      	it	eq
 80066c8:	694b      	ldreq	r3, [r1, #20]
 80066ca:	1bf6      	subs	r6, r6, r7
 80066cc:	600f      	str	r7, [r1, #0]
 80066ce:	608b      	str	r3, [r1, #8]
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	dd9f      	ble.n	8006614 <__sflush_r+0x18>
 80066d4:	4633      	mov	r3, r6
 80066d6:	463a      	mov	r2, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	6a21      	ldr	r1, [r4, #32]
 80066dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80066e0:	47e0      	blx	ip
 80066e2:	2800      	cmp	r0, #0
 80066e4:	dc06      	bgt.n	80066f4 <__sflush_r+0xf8>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e790      	b.n	8006616 <__sflush_r+0x1a>
 80066f4:	4407      	add	r7, r0
 80066f6:	1a36      	subs	r6, r6, r0
 80066f8:	e7ea      	b.n	80066d0 <__sflush_r+0xd4>
 80066fa:	bf00      	nop
 80066fc:	dfbffffe 	.word	0xdfbffffe

08006700 <_fflush_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b913      	cbnz	r3, 8006710 <_fflush_r+0x10>
 800670a:	2500      	movs	r5, #0
 800670c:	4628      	mov	r0, r5
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	b118      	cbz	r0, 800671a <_fflush_r+0x1a>
 8006712:	6a03      	ldr	r3, [r0, #32]
 8006714:	b90b      	cbnz	r3, 800671a <_fflush_r+0x1a>
 8006716:	f7fd ff65 	bl	80045e4 <__sinit>
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f3      	beq.n	800670a <_fflush_r+0xa>
 8006722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	d404      	bmi.n	8006732 <_fflush_r+0x32>
 8006728:	0599      	lsls	r1, r3, #22
 800672a:	d402      	bmi.n	8006732 <_fflush_r+0x32>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f7fe f8d6 	bl	80048de <__retarget_lock_acquire_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	4621      	mov	r1, r4
 8006736:	f7ff ff61 	bl	80065fc <__sflush_r>
 800673a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673c:	4605      	mov	r5, r0
 800673e:	07da      	lsls	r2, r3, #31
 8006740:	d4e4      	bmi.n	800670c <_fflush_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d4e1      	bmi.n	800670c <_fflush_r+0xc>
 8006748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674a:	f7fe f8c9 	bl	80048e0 <__retarget_lock_release_recursive>
 800674e:	e7dd      	b.n	800670c <_fflush_r+0xc>

08006750 <__sccl>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	780b      	ldrb	r3, [r1, #0]
 8006754:	4604      	mov	r4, r0
 8006756:	2b5e      	cmp	r3, #94	; 0x5e
 8006758:	bf0b      	itete	eq
 800675a:	784b      	ldrbeq	r3, [r1, #1]
 800675c:	1c4a      	addne	r2, r1, #1
 800675e:	1c8a      	addeq	r2, r1, #2
 8006760:	2100      	movne	r1, #0
 8006762:	bf08      	it	eq
 8006764:	2101      	moveq	r1, #1
 8006766:	3801      	subs	r0, #1
 8006768:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800676c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006770:	42a8      	cmp	r0, r5
 8006772:	d1fb      	bne.n	800676c <__sccl+0x1c>
 8006774:	b90b      	cbnz	r3, 800677a <__sccl+0x2a>
 8006776:	1e50      	subs	r0, r2, #1
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	f081 0101 	eor.w	r1, r1, #1
 800677e:	4610      	mov	r0, r2
 8006780:	54e1      	strb	r1, [r4, r3]
 8006782:	4602      	mov	r2, r0
 8006784:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006788:	2d2d      	cmp	r5, #45	; 0x2d
 800678a:	d005      	beq.n	8006798 <__sccl+0x48>
 800678c:	2d5d      	cmp	r5, #93	; 0x5d
 800678e:	d016      	beq.n	80067be <__sccl+0x6e>
 8006790:	2d00      	cmp	r5, #0
 8006792:	d0f1      	beq.n	8006778 <__sccl+0x28>
 8006794:	462b      	mov	r3, r5
 8006796:	e7f2      	b.n	800677e <__sccl+0x2e>
 8006798:	7846      	ldrb	r6, [r0, #1]
 800679a:	2e5d      	cmp	r6, #93	; 0x5d
 800679c:	d0fa      	beq.n	8006794 <__sccl+0x44>
 800679e:	42b3      	cmp	r3, r6
 80067a0:	dcf8      	bgt.n	8006794 <__sccl+0x44>
 80067a2:	461a      	mov	r2, r3
 80067a4:	3002      	adds	r0, #2
 80067a6:	3201      	adds	r2, #1
 80067a8:	4296      	cmp	r6, r2
 80067aa:	54a1      	strb	r1, [r4, r2]
 80067ac:	dcfb      	bgt.n	80067a6 <__sccl+0x56>
 80067ae:	1af2      	subs	r2, r6, r3
 80067b0:	3a01      	subs	r2, #1
 80067b2:	42b3      	cmp	r3, r6
 80067b4:	bfa8      	it	ge
 80067b6:	2200      	movge	r2, #0
 80067b8:	1c5d      	adds	r5, r3, #1
 80067ba:	18ab      	adds	r3, r5, r2
 80067bc:	e7e1      	b.n	8006782 <__sccl+0x32>
 80067be:	4610      	mov	r0, r2
 80067c0:	e7da      	b.n	8006778 <__sccl+0x28>

080067c2 <__submore>:
 80067c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c6:	460c      	mov	r4, r1
 80067c8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ce:	4299      	cmp	r1, r3
 80067d0:	d11b      	bne.n	800680a <__submore+0x48>
 80067d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067d6:	f7fc ff09 	bl	80035ec <_malloc_r>
 80067da:	b918      	cbnz	r0, 80067e4 <__submore+0x22>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80067ea:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80067ee:	6360      	str	r0, [r4, #52]	; 0x34
 80067f0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80067f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80067f8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80067fc:	7043      	strb	r3, [r0, #1]
 80067fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006802:	7003      	strb	r3, [r0, #0]
 8006804:	6020      	str	r0, [r4, #0]
 8006806:	2000      	movs	r0, #0
 8006808:	e7ea      	b.n	80067e0 <__submore+0x1e>
 800680a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800680c:	0077      	lsls	r7, r6, #1
 800680e:	463a      	mov	r2, r7
 8006810:	f7fc ff80 	bl	8003714 <_realloc_r>
 8006814:	4605      	mov	r5, r0
 8006816:	2800      	cmp	r0, #0
 8006818:	d0e0      	beq.n	80067dc <__submore+0x1a>
 800681a:	eb00 0806 	add.w	r8, r0, r6
 800681e:	4601      	mov	r1, r0
 8006820:	4632      	mov	r2, r6
 8006822:	4640      	mov	r0, r8
 8006824:	f7fe f865 	bl	80048f2 <memcpy>
 8006828:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800682c:	f8c4 8000 	str.w	r8, [r4]
 8006830:	e7e9      	b.n	8006806 <__submore+0x44>

08006832 <memmove>:
 8006832:	4288      	cmp	r0, r1
 8006834:	b510      	push	{r4, lr}
 8006836:	eb01 0402 	add.w	r4, r1, r2
 800683a:	d902      	bls.n	8006842 <memmove+0x10>
 800683c:	4284      	cmp	r4, r0
 800683e:	4623      	mov	r3, r4
 8006840:	d807      	bhi.n	8006852 <memmove+0x20>
 8006842:	1e43      	subs	r3, r0, #1
 8006844:	42a1      	cmp	r1, r4
 8006846:	d008      	beq.n	800685a <memmove+0x28>
 8006848:	f811 2b01 	ldrb.w	r2, [r1], #1
 800684c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006850:	e7f8      	b.n	8006844 <memmove+0x12>
 8006852:	4601      	mov	r1, r0
 8006854:	4402      	add	r2, r0
 8006856:	428a      	cmp	r2, r1
 8006858:	d100      	bne.n	800685c <memmove+0x2a>
 800685a:	bd10      	pop	{r4, pc}
 800685c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006860:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006864:	e7f7      	b.n	8006856 <memmove+0x24>

08006866 <memchr>:
 8006866:	4603      	mov	r3, r0
 8006868:	b510      	push	{r4, lr}
 800686a:	b2c9      	uxtb	r1, r1
 800686c:	4402      	add	r2, r0
 800686e:	4293      	cmp	r3, r2
 8006870:	4618      	mov	r0, r3
 8006872:	d101      	bne.n	8006878 <memchr+0x12>
 8006874:	2000      	movs	r0, #0
 8006876:	e003      	b.n	8006880 <memchr+0x1a>
 8006878:	7804      	ldrb	r4, [r0, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	428c      	cmp	r4, r1
 800687e:	d1f6      	bne.n	800686e <memchr+0x8>
 8006880:	bd10      	pop	{r4, pc}
	...

08006884 <__assert_func>:
 8006884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006886:	4614      	mov	r4, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <__assert_func+0x2c>)
 800688c:	4605      	mov	r5, r0
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68d8      	ldr	r0, [r3, #12]
 8006892:	b14c      	cbz	r4, 80068a8 <__assert_func+0x24>
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <__assert_func+0x30>)
 8006896:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800689a:	9100      	str	r1, [sp, #0]
 800689c:	462b      	mov	r3, r5
 800689e:	4906      	ldr	r1, [pc, #24]	; (80068b8 <__assert_func+0x34>)
 80068a0:	f000 f896 	bl	80069d0 <fiprintf>
 80068a4:	f000 f8a6 	bl	80069f4 <abort>
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <__assert_func+0x38>)
 80068aa:	461c      	mov	r4, r3
 80068ac:	e7f3      	b.n	8006896 <__assert_func+0x12>
 80068ae:	bf00      	nop
 80068b0:	200001dc 	.word	0x200001dc
 80068b4:	080073da 	.word	0x080073da
 80068b8:	080073e7 	.word	0x080073e7
 80068bc:	08007415 	.word	0x08007415

080068c0 <_calloc_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	fba1 5402 	umull	r5, r4, r1, r2
 80068c6:	b934      	cbnz	r4, 80068d6 <_calloc_r+0x16>
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7fc fe8f 	bl	80035ec <_malloc_r>
 80068ce:	4606      	mov	r6, r0
 80068d0:	b928      	cbnz	r0, 80068de <_calloc_r+0x1e>
 80068d2:	4630      	mov	r0, r6
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
 80068d6:	220c      	movs	r2, #12
 80068d8:	2600      	movs	r6, #0
 80068da:	6002      	str	r2, [r0, #0]
 80068dc:	e7f9      	b.n	80068d2 <_calloc_r+0x12>
 80068de:	462a      	mov	r2, r5
 80068e0:	4621      	mov	r1, r4
 80068e2:	f7fd ff44 	bl	800476e <memset>
 80068e6:	e7f4      	b.n	80068d2 <_calloc_r+0x12>

080068e8 <_strtoul_l.constprop.0>:
 80068e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068ec:	4686      	mov	lr, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	4f35      	ldr	r7, [pc, #212]	; (80069c8 <_strtoul_l.constprop.0+0xe0>)
 80068f2:	4628      	mov	r0, r5
 80068f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068f8:	5d3e      	ldrb	r6, [r7, r4]
 80068fa:	f016 0608 	ands.w	r6, r6, #8
 80068fe:	d1f8      	bne.n	80068f2 <_strtoul_l.constprop.0+0xa>
 8006900:	2c2d      	cmp	r4, #45	; 0x2d
 8006902:	d130      	bne.n	8006966 <_strtoul_l.constprop.0+0x7e>
 8006904:	2601      	movs	r6, #1
 8006906:	782c      	ldrb	r4, [r5, #0]
 8006908:	1c85      	adds	r5, r0, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d057      	beq.n	80069be <_strtoul_l.constprop.0+0xd6>
 800690e:	2b10      	cmp	r3, #16
 8006910:	d109      	bne.n	8006926 <_strtoul_l.constprop.0+0x3e>
 8006912:	2c30      	cmp	r4, #48	; 0x30
 8006914:	d107      	bne.n	8006926 <_strtoul_l.constprop.0+0x3e>
 8006916:	7828      	ldrb	r0, [r5, #0]
 8006918:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800691c:	2858      	cmp	r0, #88	; 0x58
 800691e:	d149      	bne.n	80069b4 <_strtoul_l.constprop.0+0xcc>
 8006920:	2310      	movs	r3, #16
 8006922:	786c      	ldrb	r4, [r5, #1]
 8006924:	3502      	adds	r5, #2
 8006926:	f04f 38ff 	mov.w	r8, #4294967295
 800692a:	fbb8 f8f3 	udiv	r8, r8, r3
 800692e:	2700      	movs	r7, #0
 8006930:	fb03 f908 	mul.w	r9, r3, r8
 8006934:	4638      	mov	r0, r7
 8006936:	ea6f 0909 	mvn.w	r9, r9
 800693a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800693e:	f1bc 0f09 	cmp.w	ip, #9
 8006942:	d815      	bhi.n	8006970 <_strtoul_l.constprop.0+0x88>
 8006944:	4664      	mov	r4, ip
 8006946:	42a3      	cmp	r3, r4
 8006948:	dd23      	ble.n	8006992 <_strtoul_l.constprop.0+0xaa>
 800694a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800694e:	d007      	beq.n	8006960 <_strtoul_l.constprop.0+0x78>
 8006950:	4580      	cmp	r8, r0
 8006952:	d31b      	bcc.n	800698c <_strtoul_l.constprop.0+0xa4>
 8006954:	d101      	bne.n	800695a <_strtoul_l.constprop.0+0x72>
 8006956:	45a1      	cmp	r9, r4
 8006958:	db18      	blt.n	800698c <_strtoul_l.constprop.0+0xa4>
 800695a:	2701      	movs	r7, #1
 800695c:	fb00 4003 	mla	r0, r0, r3, r4
 8006960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006964:	e7e9      	b.n	800693a <_strtoul_l.constprop.0+0x52>
 8006966:	2c2b      	cmp	r4, #43	; 0x2b
 8006968:	bf04      	itt	eq
 800696a:	782c      	ldrbeq	r4, [r5, #0]
 800696c:	1c85      	addeq	r5, r0, #2
 800696e:	e7cc      	b.n	800690a <_strtoul_l.constprop.0+0x22>
 8006970:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006974:	f1bc 0f19 	cmp.w	ip, #25
 8006978:	d801      	bhi.n	800697e <_strtoul_l.constprop.0+0x96>
 800697a:	3c37      	subs	r4, #55	; 0x37
 800697c:	e7e3      	b.n	8006946 <_strtoul_l.constprop.0+0x5e>
 800697e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006982:	f1bc 0f19 	cmp.w	ip, #25
 8006986:	d804      	bhi.n	8006992 <_strtoul_l.constprop.0+0xaa>
 8006988:	3c57      	subs	r4, #87	; 0x57
 800698a:	e7dc      	b.n	8006946 <_strtoul_l.constprop.0+0x5e>
 800698c:	f04f 37ff 	mov.w	r7, #4294967295
 8006990:	e7e6      	b.n	8006960 <_strtoul_l.constprop.0+0x78>
 8006992:	1c7b      	adds	r3, r7, #1
 8006994:	d106      	bne.n	80069a4 <_strtoul_l.constprop.0+0xbc>
 8006996:	2322      	movs	r3, #34	; 0x22
 8006998:	4638      	mov	r0, r7
 800699a:	f8ce 3000 	str.w	r3, [lr]
 800699e:	b932      	cbnz	r2, 80069ae <_strtoul_l.constprop.0+0xc6>
 80069a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069a4:	b106      	cbz	r6, 80069a8 <_strtoul_l.constprop.0+0xc0>
 80069a6:	4240      	negs	r0, r0
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d0f9      	beq.n	80069a0 <_strtoul_l.constprop.0+0xb8>
 80069ac:	b107      	cbz	r7, 80069b0 <_strtoul_l.constprop.0+0xc8>
 80069ae:	1e69      	subs	r1, r5, #1
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	e7f5      	b.n	80069a0 <_strtoul_l.constprop.0+0xb8>
 80069b4:	2430      	movs	r4, #48	; 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1b5      	bne.n	8006926 <_strtoul_l.constprop.0+0x3e>
 80069ba:	2308      	movs	r3, #8
 80069bc:	e7b3      	b.n	8006926 <_strtoul_l.constprop.0+0x3e>
 80069be:	2c30      	cmp	r4, #48	; 0x30
 80069c0:	d0a9      	beq.n	8006916 <_strtoul_l.constprop.0+0x2e>
 80069c2:	230a      	movs	r3, #10
 80069c4:	e7af      	b.n	8006926 <_strtoul_l.constprop.0+0x3e>
 80069c6:	bf00      	nop
 80069c8:	080070a9 	.word	0x080070a9

080069cc <_strtoul_r>:
 80069cc:	f7ff bf8c 	b.w	80068e8 <_strtoul_l.constprop.0>

080069d0 <fiprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b503      	push	{r0, r1, lr}
 80069d4:	4601      	mov	r1, r0
 80069d6:	ab03      	add	r3, sp, #12
 80069d8:	4805      	ldr	r0, [pc, #20]	; (80069f0 <fiprintf+0x20>)
 80069da:	f853 2b04 	ldr.w	r2, [r3], #4
 80069de:	6800      	ldr	r0, [r0, #0]
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f000 f835 	bl	8006a50 <_vfiprintf_r>
 80069e6:	b002      	add	sp, #8
 80069e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069ec:	b003      	add	sp, #12
 80069ee:	4770      	bx	lr
 80069f0:	200001dc 	.word	0x200001dc

080069f4 <abort>:
 80069f4:	2006      	movs	r0, #6
 80069f6:	b508      	push	{r3, lr}
 80069f8:	f000 fa02 	bl	8006e00 <raise>
 80069fc:	2001      	movs	r0, #1
 80069fe:	f7fb fa3b 	bl	8001e78 <_exit>

08006a02 <__sfputc_r>:
 8006a02:	6893      	ldr	r3, [r2, #8]
 8006a04:	b410      	push	{r4}
 8006a06:	3b01      	subs	r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	6093      	str	r3, [r2, #8]
 8006a0c:	da07      	bge.n	8006a1e <__sfputc_r+0x1c>
 8006a0e:	6994      	ldr	r4, [r2, #24]
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	db01      	blt.n	8006a18 <__sfputc_r+0x16>
 8006a14:	290a      	cmp	r1, #10
 8006a16:	d102      	bne.n	8006a1e <__sfputc_r+0x1c>
 8006a18:	bc10      	pop	{r4}
 8006a1a:	f000 b933 	b.w	8006c84 <__swbuf_r>
 8006a1e:	6813      	ldr	r3, [r2, #0]
 8006a20:	1c58      	adds	r0, r3, #1
 8006a22:	6010      	str	r0, [r2, #0]
 8006a24:	7019      	strb	r1, [r3, #0]
 8006a26:	4608      	mov	r0, r1
 8006a28:	bc10      	pop	{r4}
 8006a2a:	4770      	bx	lr

08006a2c <__sfputs_r>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	4614      	mov	r4, r2
 8006a34:	18d5      	adds	r5, r2, r3
 8006a36:	42ac      	cmp	r4, r5
 8006a38:	d101      	bne.n	8006a3e <__sfputs_r+0x12>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e007      	b.n	8006a4e <__sfputs_r+0x22>
 8006a3e:	463a      	mov	r2, r7
 8006a40:	4630      	mov	r0, r6
 8006a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a46:	f7ff ffdc 	bl	8006a02 <__sfputc_r>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d1f3      	bne.n	8006a36 <__sfputs_r+0xa>
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a50 <_vfiprintf_r>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	460d      	mov	r5, r1
 8006a56:	4614      	mov	r4, r2
 8006a58:	4698      	mov	r8, r3
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	b09d      	sub	sp, #116	; 0x74
 8006a5e:	b118      	cbz	r0, 8006a68 <_vfiprintf_r+0x18>
 8006a60:	6a03      	ldr	r3, [r0, #32]
 8006a62:	b90b      	cbnz	r3, 8006a68 <_vfiprintf_r+0x18>
 8006a64:	f7fd fdbe 	bl	80045e4 <__sinit>
 8006a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6a:	07d9      	lsls	r1, r3, #31
 8006a6c:	d405      	bmi.n	8006a7a <_vfiprintf_r+0x2a>
 8006a6e:	89ab      	ldrh	r3, [r5, #12]
 8006a70:	059a      	lsls	r2, r3, #22
 8006a72:	d402      	bmi.n	8006a7a <_vfiprintf_r+0x2a>
 8006a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a76:	f7fd ff32 	bl	80048de <__retarget_lock_acquire_recursive>
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	071b      	lsls	r3, r3, #28
 8006a7e:	d501      	bpl.n	8006a84 <_vfiprintf_r+0x34>
 8006a80:	692b      	ldr	r3, [r5, #16]
 8006a82:	b99b      	cbnz	r3, 8006aac <_vfiprintf_r+0x5c>
 8006a84:	4629      	mov	r1, r5
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 f93a 	bl	8006d00 <__swsetup_r>
 8006a8c:	b170      	cbz	r0, 8006aac <_vfiprintf_r+0x5c>
 8006a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a90:	07dc      	lsls	r4, r3, #31
 8006a92:	d504      	bpl.n	8006a9e <_vfiprintf_r+0x4e>
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	b01d      	add	sp, #116	; 0x74
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	0598      	lsls	r0, r3, #22
 8006aa2:	d4f7      	bmi.n	8006a94 <_vfiprintf_r+0x44>
 8006aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aa6:	f7fd ff1b 	bl	80048e0 <__retarget_lock_release_recursive>
 8006aaa:	e7f3      	b.n	8006a94 <_vfiprintf_r+0x44>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab6:	2330      	movs	r3, #48	; 0x30
 8006ab8:	f04f 0901 	mov.w	r9, #1
 8006abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ac0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006c70 <_vfiprintf_r+0x220>
 8006ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ac8:	4623      	mov	r3, r4
 8006aca:	469a      	mov	sl, r3
 8006acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad0:	b10a      	cbz	r2, 8006ad6 <_vfiprintf_r+0x86>
 8006ad2:	2a25      	cmp	r2, #37	; 0x25
 8006ad4:	d1f9      	bne.n	8006aca <_vfiprintf_r+0x7a>
 8006ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8006ada:	d00b      	beq.n	8006af4 <_vfiprintf_r+0xa4>
 8006adc:	465b      	mov	r3, fp
 8006ade:	4622      	mov	r2, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ffa2 	bl	8006a2c <__sfputs_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f000 80a9 	beq.w	8006c40 <_vfiprintf_r+0x1f0>
 8006aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af0:	445a      	add	r2, fp
 8006af2:	9209      	str	r2, [sp, #36]	; 0x24
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80a1 	beq.w	8006c40 <_vfiprintf_r+0x1f0>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f04f 32ff 	mov.w	r2, #4294967295
 8006b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b08:	f10a 0a01 	add.w	sl, sl, #1
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b14:	931a      	str	r3, [sp, #104]	; 0x68
 8006b16:	4654      	mov	r4, sl
 8006b18:	2205      	movs	r2, #5
 8006b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1e:	4854      	ldr	r0, [pc, #336]	; (8006c70 <_vfiprintf_r+0x220>)
 8006b20:	f7ff fea1 	bl	8006866 <memchr>
 8006b24:	9a04      	ldr	r2, [sp, #16]
 8006b26:	b9d8      	cbnz	r0, 8006b60 <_vfiprintf_r+0x110>
 8006b28:	06d1      	lsls	r1, r2, #27
 8006b2a:	bf44      	itt	mi
 8006b2c:	2320      	movmi	r3, #32
 8006b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b32:	0713      	lsls	r3, r2, #28
 8006b34:	bf44      	itt	mi
 8006b36:	232b      	movmi	r3, #43	; 0x2b
 8006b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b40:	2b2a      	cmp	r3, #42	; 0x2a
 8006b42:	d015      	beq.n	8006b70 <_vfiprintf_r+0x120>
 8006b44:	4654      	mov	r4, sl
 8006b46:	2000      	movs	r0, #0
 8006b48:	f04f 0c0a 	mov.w	ip, #10
 8006b4c:	9a07      	ldr	r2, [sp, #28]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b54:	3b30      	subs	r3, #48	; 0x30
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d94d      	bls.n	8006bf6 <_vfiprintf_r+0x1a6>
 8006b5a:	b1b0      	cbz	r0, 8006b8a <_vfiprintf_r+0x13a>
 8006b5c:	9207      	str	r2, [sp, #28]
 8006b5e:	e014      	b.n	8006b8a <_vfiprintf_r+0x13a>
 8006b60:	eba0 0308 	sub.w	r3, r0, r8
 8006b64:	fa09 f303 	lsl.w	r3, r9, r3
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	46a2      	mov	sl, r4
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	e7d2      	b.n	8006b16 <_vfiprintf_r+0xc6>
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	1d19      	adds	r1, r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	9103      	str	r1, [sp, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bfbb      	ittet	lt
 8006b7c:	425b      	neglt	r3, r3
 8006b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b82:	9307      	strge	r3, [sp, #28]
 8006b84:	9307      	strlt	r3, [sp, #28]
 8006b86:	bfb8      	it	lt
 8006b88:	9204      	strlt	r2, [sp, #16]
 8006b8a:	7823      	ldrb	r3, [r4, #0]
 8006b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b8e:	d10c      	bne.n	8006baa <_vfiprintf_r+0x15a>
 8006b90:	7863      	ldrb	r3, [r4, #1]
 8006b92:	2b2a      	cmp	r3, #42	; 0x2a
 8006b94:	d134      	bne.n	8006c00 <_vfiprintf_r+0x1b0>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	3402      	adds	r4, #2
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9203      	str	r2, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfb8      	it	lt
 8006ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c74 <_vfiprintf_r+0x224>
 8006bae:	2203      	movs	r2, #3
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	7821      	ldrb	r1, [r4, #0]
 8006bb4:	f7ff fe57 	bl	8006866 <memchr>
 8006bb8:	b138      	cbz	r0, 8006bca <_vfiprintf_r+0x17a>
 8006bba:	2240      	movs	r2, #64	; 0x40
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	eba0 000a 	sub.w	r0, r0, sl
 8006bc2:	4082      	lsls	r2, r0
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	3401      	adds	r4, #1
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bce:	2206      	movs	r2, #6
 8006bd0:	4829      	ldr	r0, [pc, #164]	; (8006c78 <_vfiprintf_r+0x228>)
 8006bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bd6:	f7ff fe46 	bl	8006866 <memchr>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d03f      	beq.n	8006c5e <_vfiprintf_r+0x20e>
 8006bde:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <_vfiprintf_r+0x22c>)
 8006be0:	bb1b      	cbnz	r3, 8006c2a <_vfiprintf_r+0x1da>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	3307      	adds	r3, #7
 8006be6:	f023 0307 	bic.w	r3, r3, #7
 8006bea:	3308      	adds	r3, #8
 8006bec:	9303      	str	r3, [sp, #12]
 8006bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf0:	443b      	add	r3, r7
 8006bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf4:	e768      	b.n	8006ac8 <_vfiprintf_r+0x78>
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bfe:	e7a6      	b.n	8006b4e <_vfiprintf_r+0xfe>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f04f 0c0a 	mov.w	ip, #10
 8006c06:	4619      	mov	r1, r3
 8006c08:	3401      	adds	r4, #1
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c12:	3a30      	subs	r2, #48	; 0x30
 8006c14:	2a09      	cmp	r2, #9
 8006c16:	d903      	bls.n	8006c20 <_vfiprintf_r+0x1d0>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0c6      	beq.n	8006baa <_vfiprintf_r+0x15a>
 8006c1c:	9105      	str	r1, [sp, #20]
 8006c1e:	e7c4      	b.n	8006baa <_vfiprintf_r+0x15a>
 8006c20:	4604      	mov	r4, r0
 8006c22:	2301      	movs	r3, #1
 8006c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c28:	e7f0      	b.n	8006c0c <_vfiprintf_r+0x1bc>
 8006c2a:	ab03      	add	r3, sp, #12
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	462a      	mov	r2, r5
 8006c30:	4630      	mov	r0, r6
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <_vfiprintf_r+0x230>)
 8006c34:	a904      	add	r1, sp, #16
 8006c36:	f3af 8000 	nop.w
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	1c78      	adds	r0, r7, #1
 8006c3e:	d1d6      	bne.n	8006bee <_vfiprintf_r+0x19e>
 8006c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c42:	07d9      	lsls	r1, r3, #31
 8006c44:	d405      	bmi.n	8006c52 <_vfiprintf_r+0x202>
 8006c46:	89ab      	ldrh	r3, [r5, #12]
 8006c48:	059a      	lsls	r2, r3, #22
 8006c4a:	d402      	bmi.n	8006c52 <_vfiprintf_r+0x202>
 8006c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c4e:	f7fd fe47 	bl	80048e0 <__retarget_lock_release_recursive>
 8006c52:	89ab      	ldrh	r3, [r5, #12]
 8006c54:	065b      	lsls	r3, r3, #25
 8006c56:	f53f af1d 	bmi.w	8006a94 <_vfiprintf_r+0x44>
 8006c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c5c:	e71c      	b.n	8006a98 <_vfiprintf_r+0x48>
 8006c5e:	ab03      	add	r3, sp, #12
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	462a      	mov	r2, r5
 8006c64:	4630      	mov	r0, r6
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <_vfiprintf_r+0x230>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	f7ff fa59 	bl	8006120 <_printf_i>
 8006c6e:	e7e4      	b.n	8006c3a <_vfiprintf_r+0x1ea>
 8006c70:	0800738c 	.word	0x0800738c
 8006c74:	08007392 	.word	0x08007392
 8006c78:	08007396 	.word	0x08007396
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	08006a2d 	.word	0x08006a2d

08006c84 <__swbuf_r>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	460e      	mov	r6, r1
 8006c88:	4614      	mov	r4, r2
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b118      	cbz	r0, 8006c96 <__swbuf_r+0x12>
 8006c8e:	6a03      	ldr	r3, [r0, #32]
 8006c90:	b90b      	cbnz	r3, 8006c96 <__swbuf_r+0x12>
 8006c92:	f7fd fca7 	bl	80045e4 <__sinit>
 8006c96:	69a3      	ldr	r3, [r4, #24]
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	071a      	lsls	r2, r3, #28
 8006c9e:	d525      	bpl.n	8006cec <__swbuf_r+0x68>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b31b      	cbz	r3, 8006cec <__swbuf_r+0x68>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	b2f6      	uxtb	r6, r6
 8006caa:	1a98      	subs	r0, r3, r2
 8006cac:	6963      	ldr	r3, [r4, #20]
 8006cae:	4637      	mov	r7, r6
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	dc04      	bgt.n	8006cbe <__swbuf_r+0x3a>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f7ff fd22 	bl	8006700 <_fflush_r>
 8006cbc:	b9e0      	cbnz	r0, 8006cf8 <__swbuf_r+0x74>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	701e      	strb	r6, [r3, #0]
 8006ccc:	6962      	ldr	r2, [r4, #20]
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d004      	beq.n	8006cde <__swbuf_r+0x5a>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d506      	bpl.n	8006ce8 <__swbuf_r+0x64>
 8006cda:	2e0a      	cmp	r6, #10
 8006cdc:	d104      	bne.n	8006ce8 <__swbuf_r+0x64>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f7ff fd0d 	bl	8006700 <_fflush_r>
 8006ce6:	b938      	cbnz	r0, 8006cf8 <__swbuf_r+0x74>
 8006ce8:	4638      	mov	r0, r7
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f806 	bl	8006d00 <__swsetup_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d0d5      	beq.n	8006ca4 <__swbuf_r+0x20>
 8006cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8006cfc:	e7f4      	b.n	8006ce8 <__swbuf_r+0x64>
	...

08006d00 <__swsetup_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <__swsetup_r+0xac>)
 8006d04:	4605      	mov	r5, r0
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	460c      	mov	r4, r1
 8006d0a:	b118      	cbz	r0, 8006d14 <__swsetup_r+0x14>
 8006d0c:	6a03      	ldr	r3, [r0, #32]
 8006d0e:	b90b      	cbnz	r3, 8006d14 <__swsetup_r+0x14>
 8006d10:	f7fd fc68 	bl	80045e4 <__sinit>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d1a:	0718      	lsls	r0, r3, #28
 8006d1c:	d422      	bmi.n	8006d64 <__swsetup_r+0x64>
 8006d1e:	06d9      	lsls	r1, r3, #27
 8006d20:	d407      	bmi.n	8006d32 <__swsetup_r+0x32>
 8006d22:	2309      	movs	r3, #9
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	e034      	b.n	8006d9c <__swsetup_r+0x9c>
 8006d32:	0758      	lsls	r0, r3, #29
 8006d34:	d512      	bpl.n	8006d5c <__swsetup_r+0x5c>
 8006d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d38:	b141      	cbz	r1, 8006d4c <__swsetup_r+0x4c>
 8006d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	d002      	beq.n	8006d48 <__swsetup_r+0x48>
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7fd fdea 	bl	800491c <_free_r>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	2300      	movs	r3, #0
 8006d56:	6063      	str	r3, [r4, #4]
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f043 0308 	orr.w	r3, r3, #8
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	b94b      	cbnz	r3, 8006d7c <__swsetup_r+0x7c>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d72:	d003      	beq.n	8006d7c <__swsetup_r+0x7c>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f883 	bl	8006e82 <__smakebuf_r>
 8006d7c:	89a0      	ldrh	r0, [r4, #12]
 8006d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d82:	f010 0301 	ands.w	r3, r0, #1
 8006d86:	d00a      	beq.n	8006d9e <__swsetup_r+0x9e>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60a3      	str	r3, [r4, #8]
 8006d8c:	6963      	ldr	r3, [r4, #20]
 8006d8e:	425b      	negs	r3, r3
 8006d90:	61a3      	str	r3, [r4, #24]
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	b943      	cbnz	r3, 8006da8 <__swsetup_r+0xa8>
 8006d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d9a:	d1c4      	bne.n	8006d26 <__swsetup_r+0x26>
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
 8006d9e:	0781      	lsls	r1, r0, #30
 8006da0:	bf58      	it	pl
 8006da2:	6963      	ldrpl	r3, [r4, #20]
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	e7f4      	b.n	8006d92 <__swsetup_r+0x92>
 8006da8:	2000      	movs	r0, #0
 8006daa:	e7f7      	b.n	8006d9c <__swsetup_r+0x9c>
 8006dac:	200001dc 	.word	0x200001dc

08006db0 <_raise_r>:
 8006db0:	291f      	cmp	r1, #31
 8006db2:	b538      	push	{r3, r4, r5, lr}
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	d904      	bls.n	8006dc4 <_raise_r+0x14>
 8006dba:	2316      	movs	r3, #22
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006dc6:	b112      	cbz	r2, 8006dce <_raise_r+0x1e>
 8006dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dcc:	b94b      	cbnz	r3, 8006de2 <_raise_r+0x32>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f830 	bl	8006e34 <_getpid_r>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	4620      	mov	r0, r4
 8006dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dde:	f000 b817 	b.w	8006e10 <_kill_r>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d00a      	beq.n	8006dfc <_raise_r+0x4c>
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	d103      	bne.n	8006df2 <_raise_r+0x42>
 8006dea:	2316      	movs	r3, #22
 8006dec:	6003      	str	r3, [r0, #0]
 8006dee:	2001      	movs	r0, #1
 8006df0:	e7e7      	b.n	8006dc2 <_raise_r+0x12>
 8006df2:	2400      	movs	r4, #0
 8006df4:	4628      	mov	r0, r5
 8006df6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dfa:	4798      	blx	r3
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7e0      	b.n	8006dc2 <_raise_r+0x12>

08006e00 <raise>:
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <raise+0xc>)
 8006e02:	4601      	mov	r1, r0
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f7ff bfd3 	b.w	8006db0 <_raise_r>
 8006e0a:	bf00      	nop
 8006e0c:	200001dc 	.word	0x200001dc

08006e10 <_kill_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	2300      	movs	r3, #0
 8006e14:	4d06      	ldr	r5, [pc, #24]	; (8006e30 <_kill_r+0x20>)
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	f7fb f823 	bl	8001e68 <_kill>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d102      	bne.n	8006e2c <_kill_r+0x1c>
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	b103      	cbz	r3, 8006e2c <_kill_r+0x1c>
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000448 	.word	0x20000448

08006e34 <_getpid_r>:
 8006e34:	f7fb b816 	b.w	8001e64 <_getpid>

08006e38 <__swhatbuf_r>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e40:	4615      	mov	r5, r2
 8006e42:	2900      	cmp	r1, #0
 8006e44:	461e      	mov	r6, r3
 8006e46:	b096      	sub	sp, #88	; 0x58
 8006e48:	da0c      	bge.n	8006e64 <__swhatbuf_r+0x2c>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e52:	bf0c      	ite	eq
 8006e54:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e58:	2340      	movne	r3, #64	; 0x40
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	6031      	str	r1, [r6, #0]
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	b016      	add	sp, #88	; 0x58
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	466a      	mov	r2, sp
 8006e66:	f000 f849 	bl	8006efc <_fstat_r>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	dbed      	blt.n	8006e4a <__swhatbuf_r+0x12>
 8006e6e:	9901      	ldr	r1, [sp, #4]
 8006e70:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e74:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e78:	4259      	negs	r1, r3
 8006e7a:	4159      	adcs	r1, r3
 8006e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e80:	e7eb      	b.n	8006e5a <__swhatbuf_r+0x22>

08006e82 <__smakebuf_r>:
 8006e82:	898b      	ldrh	r3, [r1, #12]
 8006e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e86:	079d      	lsls	r5, r3, #30
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	d507      	bpl.n	8006e9e <__smakebuf_r+0x1c>
 8006e8e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	2301      	movs	r3, #1
 8006e98:	6163      	str	r3, [r4, #20]
 8006e9a:	b002      	add	sp, #8
 8006e9c:	bd70      	pop	{r4, r5, r6, pc}
 8006e9e:	466a      	mov	r2, sp
 8006ea0:	ab01      	add	r3, sp, #4
 8006ea2:	f7ff ffc9 	bl	8006e38 <__swhatbuf_r>
 8006ea6:	9900      	ldr	r1, [sp, #0]
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7fc fb9e 	bl	80035ec <_malloc_r>
 8006eb0:	b948      	cbnz	r0, 8006ec6 <__smakebuf_r+0x44>
 8006eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb6:	059a      	lsls	r2, r3, #22
 8006eb8:	d4ef      	bmi.n	8006e9a <__smakebuf_r+0x18>
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	f043 0302 	orr.w	r3, r3, #2
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	e7e3      	b.n	8006e8e <__smakebuf_r+0xc>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	6020      	str	r0, [r4, #0]
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	6120      	str	r0, [r4, #16]
 8006ed4:	6163      	str	r3, [r4, #20]
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	b15b      	cbz	r3, 8006ef2 <__smakebuf_r+0x70>
 8006eda:	4630      	mov	r0, r6
 8006edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee0:	f000 f81e 	bl	8006f20 <_isatty_r>
 8006ee4:	b128      	cbz	r0, 8006ef2 <__smakebuf_r+0x70>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f023 0303 	bic.w	r3, r3, #3
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	431d      	orrs	r5, r3
 8006ef6:	81a5      	strh	r5, [r4, #12]
 8006ef8:	e7cf      	b.n	8006e9a <__smakebuf_r+0x18>
	...

08006efc <_fstat_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	2300      	movs	r3, #0
 8006f00:	4d06      	ldr	r5, [pc, #24]	; (8006f1c <_fstat_r+0x20>)
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	602b      	str	r3, [r5, #0]
 8006f0a:	f7fa ffda 	bl	8001ec2 <_fstat>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	d102      	bne.n	8006f18 <_fstat_r+0x1c>
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	b103      	cbz	r3, 8006f18 <_fstat_r+0x1c>
 8006f16:	6023      	str	r3, [r4, #0]
 8006f18:	bd38      	pop	{r3, r4, r5, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000448 	.word	0x20000448

08006f20 <_isatty_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	2300      	movs	r3, #0
 8006f24:	4d05      	ldr	r5, [pc, #20]	; (8006f3c <_isatty_r+0x1c>)
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	f7fa ffce 	bl	8001ecc <_isatty>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_isatty_r+0x1a>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_isatty_r+0x1a>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20000448 	.word	0x20000448

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
